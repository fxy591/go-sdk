{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5165\u95e8\u4ecb\u7ecd 1.\u5165\u95e8\u5f00\u59cb go-sdk\u7b80\u4ecb go-sdk\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u3001\u9ad8\u5ea6\u6a21\u5757\u5316\u3001\u54cd\u5e94\u5f0f\u3001\u7c7b\u578b\u5b89\u5168\u7684go\u7c7b\u5e93\u63d0\u4f9b\u4e30\u5bccAPI\uff0c\u7528\u4e8e\u5904\u7406TelChain\u667a\u80fd\u5408\u7ea6\u53ca\u4e0eTelChain\u7f51\u7edc\u4e0a\u7684\u5ba2\u6237\u7aef(\u8282\u70b9)\u8fdb\u884c\u96c6\u6210\u3002 \u53ef\u4ee5\u901a\u8fc7\u5b83\u8fdb\u884cTelChain\u533a\u5757\u94fe\u7684\u5f00\u53d1\uff0c\u800c\u65e0\u9700\u4e3a\u4f60\u7684\u5e94\u7528\u5e73\u53f0\u7f16\u5199\u96c6\u6210\u4ee3\u7801\u3002 2.go-sdk\u5f00\u53d1\u5165\u95e8 \u9996\u5148\u5c06\u6700\u65b0\u7248\u672c\u7684go-sdk\u5b89\u88c5\u5230\u9879\u76ee\u4e2d\u3002 \u4ee5\u4e0b\u4e3ago.mod\u6587\u4ef6\u5185\u5bb9\uff1a module github.com/bif/bif-sdk-go go 1.17 require ( github.com/aristanetworks/goarista v0.0.0-20200423211322-0b5ff220aee9 github.com/btcsuite/btcd v0.21.0-beta github.com/btcsuite/btcutil v1.0.2 github.com/davecgh/go-spew v1.1.1 github.com/gorilla/websocket v1.4.2 github.com/libp2p/go-libp2p-core v0.5.2 github.com/pborman/uuid v1.2.0 github.com/prometheus/common v0.9.1 github.com/stretchr/testify v1.5.1 github.com/teleinfo-bif/bit-gmsm v1.0.5 golang.org/x/crypto v0.0.0-20201221181555-eec23a3978ad golang.org/x/sys v0.0.0-20200219091948-cb0a6d8edb6c gopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f ) require ( github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751 // indirect github.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4 // indirect github.com/gogo/protobuf v1.3.1 // indirect github.com/google/uuid v1.0.0 // indirect github.com/ipfs/go-cid v0.0.5 // indirect github.com/konsorten/go-windows-terminal-sequences v1.0.1 // indirect github.com/kr/text v0.1.0 // indirect github.com/libp2p/go-buffer-pool v0.0.2 // indirect github.com/libp2p/go-openssl v0.0.4 // indirect github.com/minio/blake2b-simd v0.0.0-20160723061019-3f5f724cb5b1 // indirect github.com/minio/sha256-simd v0.1.1 // indirect github.com/mr-tron/base58 v1.1.3 // indirect github.com/multiformats/go-base32 v0.0.3 // indirect github.com/multiformats/go-multiaddr v0.2.1 // indirect github.com/multiformats/go-multibase v0.0.1 // indirect github.com/multiformats/go-multihash v0.0.13 // indirect github.com/multiformats/go-varint v0.0.5 // indirect github.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e // indirect github.com/pmezard/go-difflib v1.0.0 // indirect github.com/sirupsen/logrus v1.4.2 // indirect github.com/spacemonkeygo/spacelog v0.0.0-20180420211403-2296661a0572 // indirect github.com/spaolacci/murmur3 v1.1.0 // indirect gopkg.in/alecthomas/kingpin.v2 v2.2.6 // indirect gopkg.in/yaml.v2 v2.2.8 // indirect ) 3.\u542f\u52a8\u5ba2\u6237\u7aef \u9700\u8981\u542f\u52a8\u4e00\u4e2aTelChain\u5ba2\u6237\u7aef\uff0c\u5f53\u7136\u5982\u679c\u4f60\u5df2\u7ecf\u542f\u52a8\u4e86\u5c31\u4e0d\u9700\u8981\u518d\u6b21\u542f\u52a8\u3002 gbif --singleton.dpos Gbif gbif = Gbif.build(new HttpService(\"http://ip:port\")); \u5f53\u4e0d\u9700\u8981Bifj\u5b9e\u4f8b\u65f6\uff0c\u9700\u8981\u8c03\u7528 shutdown \u65b9\u6cd5\u6765\u91ca\u653e\u5b83\u6240\u4f7f\u7528\u7684\u8d44\u6e90\u3002 gbif.shutdown() 4.\u53d1\u9001\u8bf7\u6c42 \u53d1\u9001\u540c\u6b65\u8bf7\u6c42 Gbif gbif = Gbif.build(new HttpService()); // defaults to http://localhost:8545/ Web3ClientVersion web3ClientVersion = gbif.bifClientVersion().send(); String clientVersion = web3ClientVersion.getWeb3ClientVersion(); 5.IPC go-sdk\u8fd8\u652f\u6301\u901a\u8fc7\u6587\u4ef6\u5957\u63a5\u5b57\u5feb\u901f\u8fd0\u884c\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff08IPC\uff09\uff0c\u652f\u6301\u5ba2\u6237\u7aef\u5728\u76f8\u540c\u7684\u4e3b\u673a\u4e0a\u540c\u65f6\u8fd0\u884cgo-sdk\u3002\u5728\u521b\u5efa\u670d\u52a1\u65f6\uff0c\u4f7f\u7528\u76f8\u5173\u7684 IPCService \u5c31\u53ef\u4ee5\u5b9e\u73b0\u800c\u4e0d\u9700\u8981\u901a\u8fc7 HTTPService \u3002 // OS X/Linux/Unix: Gbif gbif = Gbif.build(new UnixIpcService(\"/path/to/socketfile\")); ... // Windows Gbif gbif = Gbif.build(new WindowsIpcService(\"/path/to/namedpipefile\")); ... 6.\u901a\u8fc7go\u6253\u5305TelChain\u667a\u80fd\u5408\u7ea6 go-sdk\u53ef\u4ee5\u81ea\u52a8\u6253\u5305\u667a\u80fd\u5408\u540c\u4ee3\u7801\uff0c\u4ee5\u4fbf\u8fdb\u884cTelChain\u667a\u80fd\u5408\u540c\u90e8\u7f72\u548c\u4ea4\u4e92\u3002 \u8981\u6253\u5305\u4ee3\u7801\uff0c\u9700\u8981\u5148\u7f16\u8bd1\u667a\u80fd\u5408\u540c\uff1a $ solc <contract>.sol --bin --abi --optimize -o <output-dir>/ </output-dir></contract> bifj solidity generate /path/to/<smart-contract>.bin /path/to/<smart-contract>.abi -o /path/to/src/main/java -p com.your.organisation.name </smart-contract></smart-contract> \u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u65b0\u5efa\u548c\u90e8\u7f72\u667a\u80fd\u5408\u7ea6\u4e86\uff1a Gbif gbif= Gbif.build(new HttpService()); // defaults to http://localhost:8545/ Credentials credentials = WalletUtils.loadCredentials(\"password\", \"/path/to/walletfile\"); YourSmartContract contract = YourSmartContract.deploy( <bifj>, <credentials>, GAS_PRICE, GAS_LIMIT, <param1>, ..., <paramn>).send(); // constructor params </paramn></param1></credentials></bifj> \u6216\u8005\u4f7f\u7528\u4e00\u4e2a\u73b0\u6709\u7684\u667a\u80fd\u5408\u7ea6\uff1a YourSmartContract contract = YourSmartContract.load( \"0x<address>|<ensname>\", <bifj>, <credentials>, GAS_PRICE, GAS_LIMIT); </credentials></bifj></ensname></address> \u7136\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u667a\u80fd\u5408\u7ea6\u7684\u4ea4\u4e92\u4e86\uff1a TransactionReceipt transactionReceipt = contract.someMethod( <param1>, ...).send(); </param1> \u8c03\u7528\u667a\u80fd\u5408\u7ea6\uff1a Type result = contract.someMethod(<param1>, ...).send(); </param1> 7.Filters go-sdk\u7684\u54cd\u5e94\u5f0f\u51fd\u6570\u53ef\u4ee5\u4f7f\u89c2\u5bdf\u8005\u901a\u8fc7\u4e8b\u4ef6\u53bb\u901a\u77e5\u6d88\u606f\u8ba2\u9605\u8005\u53d8\u5f97\u5f88\u7b80\u5355\uff0c\u5e76\u80fd\u591f\u8bb0\u5f55\u5728\u533a\u5757\u94fe\u4e2d\u3002\u63a5\u6536\u6240\u6709\u65b0\u7684\u533a\u5757\u5e76\u628a\u5b83\u4eec\u6dfb\u52a0\u5230\u533a\u5757\u94fe\u4e2d\uff1a Subscription subscription = gbif.blockObservable(false).subscribe(block -> { ... }); \u63a5\u6536\u6240\u6709\u65b0\u7684\u4ea4\u6613\u5e76\u628a\u5b83\u4eec\u6dfb\u52a0\u5230\u533a\u5757\u94fe\u4e2d\uff1a Subscription subscription = gbif.transactionObservable().subscribe(tx -> { ... }); \u63a5\u6536\u6240\u6709\u5df2\u7ecf\u63d0\u4ea4\u5230\u7f51\u7edc\u4e2d\u7b49\u5f85\u5904\u7406\u7684\u4ea4\u6613\u3002(\u4ed6\u4eec\u88ab\u7edf\u4e00\u7684\u5206\u914d\u5230\u4e00\u4e2a\u533a\u5757\u4e4b\u524d\u3002) Subscription subscription = gbif.pendingTransactionObservable().subscribe(tx -> { ... }); \u6216\u8005\u4f60\u91cd\u7f6e\u6240\u6709\u7684\u533a\u5757\u5230\u6700\u65b0\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5f53\u6709\u65b0\u5efa\u533a\u5757\u7684\u65f6\u5019\u4f1a\u901a\u77e5\u4f60\u3002 Subscription subscription = catchUpToLatestAndSubscribeToNewBlocksObservable( <startblocknumber>, <fulltxobjects>) .subscribe(block -> { ... }); </fulltxobjects></startblocknumber> \u4e3b\u9898\u8fc7\u6ee4 \u4e5f\u88ab\u652f\u6301\uff1a CoreFilter filter = new CoreFilter(DefaultBlockParameterName.EARLIEST, DefaultBlockParameterName.LATEST, <contract-address>) .addSingleTopic(...)|.addOptionalTopics(..., ...)|...; gbif.coreLogObservable(filter).subscribe(log -> { ... }); </contract-address> \u5f53\u4e0d\u518d\u9700\u8981\u65f6\uff0c\u8ba2\u9605\u4e5f\u5e94\u8be5\u88ab\u53d6\u6d88\uff1a subscription.unsubscribe(); \u6ce8\u610f\uff1aInfura\u4e2d\u4e0d\u652f\u6301filters\u3002 8.\u4ea4\u6613 go-sdk\u652f\u6301\u4f7f\u7528TelChain\u94b1\u5305\u6587\u4ef6\uff08\u63a8\u8350\u7684\uff09\u548c\u7528\u4e8e\u53d1\u9001\u4e8b\u52a1\u7684TelChain\u5ba2\u6237\u7aef\u7ba1\u7406\u547d\u4ee4\u3002 \u4f7f\u7528\u94b1\u5305\u6587\u4ef6\u53d1\u9001\u79ef\u5206\u7ed9\u5176\u4ed6\u4eba\uff1a Gbif gbif= Gbif.build(new HttpService()); // defaults to http://localhost:8545/ Credentials credentials = WalletUtils.loadCredentials(\"password\", \"/path/to/walletfile\"); TransactionReceipt transactionReceipt = Transfer.sendFunds( gbif, credentials, \"0x<address>|<ensname>\", BigDecimal.valueOf(1.0), Convert.Unit.coreER) .send(); </ensname></address> \u6216\u8005\u4f60\u5e0c\u671b\u5efa\u7acb\u4f60\u81ea\u5df1\u5b9a\u5236\u7684\u4ea4\u6613\uff1a Gbif gbif = Gbif.build(new HttpService()); // defaults to http://localhost:8545/ Credentials credentials = WalletUtils.loadCredentials(\"password\", \"/path/to/walletfile\"); // get the next available nonce CoreGetTransactionCount coreGetTransactionCount = gbif.coreGetTransactionCount( address, DefaultBlockParameterName.LATEST).send(); BigInteger nonce = coreGetTransactionCount.getTransactionCount(); // create our transaction RawTransaction rawTransaction = RawTransaction.createBiferTransaction( nonce, <gas price>, <gas limit>, <toaddress>, <value>); // sign & send our transaction byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials); String hexValue = Numeric.toHexString(signedMessage); CoreSendTransaction coreSendTransaction = gbif.coreSendRawTransaction(hexValue).send(); // ... </value></toaddress></gas></gas> \u4f7f\u7528TelChain\u5ba2\u6237\u7aef\u7684\u7ba1\u7406\u547d\u4ee4\uff08\u5982\u679c\u4f60\u7684\u94b1\u5305\u5bc6\u94a5\u5df2\u7ecf\u5728\u5ba2\u6237\u7aef\u5b58\u50a8\uff09\uff1a Admin bifj = Admin.build(new HttpService()); // defaults to http://localhost:8545/ PersonalUnlockAccount personalUnlockAccount = gbif.personalUnlockAccount(\"0x000...\", \"a password\").sendAsync().get(); if (personalUnlockAccount.accountUnlocked()) { // send a transaction } 9.\u547d\u4ee4\u884c\u5de5\u5177 java-sdk\u7684jar\u5305\u4e3a\u6bcf\u4e00\u4e2a\u7248\u672c\u90fd\u63d0\u4f9b\u547d\u4ee4\u884c\u5de5\u5177\u3002\u547d\u4ee4\u884c\u5de5\u5177\u5141\u8bb8\u4f60\u76f4\u63a5\u901a\u8fc7\u4e00\u4e9b\u547d\u4ee4\u4f7f\u7528java-sdk\u7684\u4e00\u4e9b\u529f\u80fd\uff1a \u94b1\u5305\u521b\u5efa \u94b1\u5305\u5bc6\u7801\u7ba1\u7406 \u8d44\u91d1\u4ece\u94b1\u5305\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a solidity\u7f16\u5199\u7684\u667a\u80fd\u5408\u540c\u529f\u80fd\u6253\u5305 \u8bf7\u53c2\u9605 \u6587\u6863 \u4ee5\u83b7\u5f97\u547d\u4ee4\u884c\u76f8\u5173\u7684\u8fdb\u4e00\u6b65\u7684\u4fe1\u606f\u3002 10.\u5176\u4ed6\u7684\u7ec6\u8282 \u5165\u95e8\u4ecb\u7ecd \u5165\u95e8\u5f00\u59cb Maven Gradle \u542f\u52a8\u5ba2\u6237\u7aef \u53d1\u9001\u8bf7\u6c42 IPC \u901a\u8fc7java\u6253\u5305TelChain\u667a\u80fd\u5408\u7ea6 Filters \u4ea4\u6613 \u547d\u4ee4\u884c\u5de5\u5177 \u5176\u4ed6\u7684\u7ec6\u8282 \u6a21\u5757 \u6a21\u5757\u7b80\u4ecb \u4ea4\u6613 \u4ea4\u6613\u7b80\u4ecb \u5982\u4f55\u83b7\u5f97\u79ef\u5206Bifer TelChain\u6d4b\u8bd5\u94fe \u5728testnet\u6d4b\u8bd5\u94fe\u6216\u8005\u79c1\u6709\u94fe\u4e0a\u6316\u6398 gas \u4ea4\u6613\u673a\u5236 \u901a\u8fc7TelChainethereum\u5ba2\u6237\u7aef\u8fdb\u884c\u8ba4\u8bc1\u7b7e\u540d\u4ea4\u6613 \u79bb\u7ebf\u4ea4\u6613\u7b7e\u540d\u8ba4\u8bc1 \u521b\u5efa\u548c\u4f7f\u7528\u94b1\u5305\u6587\u4ef6 \u7b7e\u7f72TelChain\u4ea4\u6613 \u4ea4\u6613\u968f\u673a\u6570 \u4ea4\u6613\u7c7b\u578b \u79ef\u5206\u4ece\u4e00\u65b9\u4ea4\u6613\u5230\u53e6\u4e00\u65b9 \u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u6253\u5305\u5668 \u521b\u5efa\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6 \u4e0e\u667a\u80fd\u5408\u7ea6\u4ea4\u6613 \u67e5\u8be2\u667a\u80fd\u5408\u7ea6\u72b6\u6001 \u667a\u80fd\u5408\u7ea6 \u667a\u80fd\u5408\u7ea6\u7b80\u4ecb \u4ecesolidity\u8bed\u8a00\u5f00\u59cb \u7f16\u8bd1solidity\u6e90\u4ee3\u7801 \u90e8\u7f72\u667a\u80fd\u5408\u7ea6\u53ca\u4e0e\u667a\u80fd\u5408\u7ea6\u4ea4\u4e92 \u667a\u80fd\u5408\u7ea6\u793a\u4f8bdemo EIP-20TelChain\u667a\u80fd\u5408\u7ea6\u901a\u8bc1\u6807\u51c6 \u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305 \u6784\u5efa\u4e0e\u90e8\u7f72\u667a\u80fd\u5408\u7ea6 \u667a\u80fd\u5408\u7ea6\u6709\u6548\u6027 \u4ea4\u6613\u7ba1\u7406\u5668 \u5728\u4ea4\u6613\u4e2d\u6307\u5b9a\u94feID:EIP-155 \u4ea4\u6613\u6536\u636e\u5904\u7406\u5668 \u8c03\u7528\u4ea4\u6613\u548c\u4e8b\u4ef6 \u8c03\u7528\u5e38\u91cf\u65b9\u6cd5 \u52a8\u6001gas\u4ef7\u683c\u4e0e\u9650\u4ef7 java-sdk\u5b9e\u4f8b \u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3\u5373ABI\u7b80\u4ecb \u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3\u5373ABI\u7b80\u4ecb \u7c7b\u578b\u6620\u5c04 ABI\u7684\u8fdb\u4e00\u6b65\u7ec6\u8282 \u4f9d\u8d56\u5173\u7cfb \u9012\u5f52\u957f\u5ea6\u524d\u7f00RLP\u7f16\u7801\u65b9\u6848 \u9012\u5f52\u957f\u5ea6\u524d\u7f00RLP\u7f16\u7801\u65b9\u6848 RLP\u7c7b\u578b \u4ea4\u6613\u7f16\u7801 \u4f9d\u8d56\u5173\u7cfb \u8fc7\u6ee4\u5668Filters\u548c\u4e8b\u4ef6Events \u8fc7\u6ee4\u5668Filters\u548c\u4e8b\u4ef6Events \u5757\u548c\u4ea4\u6613\u8fc7\u6ee4\u5668 \u518d\u73b0\u8fc7\u6ee4\u5668 \u4e3b\u9898\u8fc7\u6ee4\u5668\u548cEVM\u4e8b\u4ef6 \u64cd\u4f5c\u7ec4\u5408\u6ce8\u8bb0 \u8fdb\u4e00\u6b65\u7684\u4f8b\u5b50 \u547d\u4ee4\u884c\u5de5\u5177 \u547d\u4ee4\u884c\u5de5\u5177 java-sdk\u547d\u4ee4\u884c\u5de5\u5177\u4f5c\u4e3a\u94b1\u5305\u5de5\u5177 \u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305 \u5982\u4f55\u7ba1\u7406APIs \u5982\u4f55\u7ba1\u7406APIs \u5982\u4f55\u5728java-sdk\u4e2d\u4f7f\u7528Infura \u7b7e\u540d Infura Http \u5ba2\u6237\u7aef \u4ea4\u6613 TelChain\u540d\u79f0\u670d\u52a1ENS TelChain\u540d\u79f0\u670d\u52a1ENS ENS\u5728java-sdk\u4e2d\u7684\u4f7f\u7528 java-sdk\u5b9e\u73b0 Unicode\u6280\u672f\u6807\u51c6UTS46 \u6ce8\u518c\u57df\u540d java-sdk\u5e38\u89c1\u95ee\u9898\u89e3\u51b3\u65b9\u6848 \u4f60\u6709\u4e00\u4e2a\u4f7f\u7528java-sdk\u5f00\u53d1\u7684\u9879\u76ee\u5417\uff1f \u6211\u63d0\u4ea4\u4e86\u4e00\u4e2a\u4ea4\u6613\uff0c\u4f46\u6ca1\u6709\u88ab\u5f00\u91c7\u3002 \u6211\u60f3\u4e86\u89e3JSON-RPC\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u6211\u60f3\u5728\u6d4b\u8bd5\u94fe\u4e0a\u83b7\u5f97\u4e00\u4e9b\u79ef\u5206\uff0c\u53c8\u4e0d\u60f3\u53bb\u5f00\u91c7\u3002 \u5982\u4f55\u4ece\u4ea4\u6613\u8c03\u7528\u7684\u667a\u80fd\u5408\u7ea6\u65b9\u6cd5\u4e2d\u83b7\u53d6\u8fd4\u56de\u503c\uff1f \u662f\u5426\u53ef\u4ee5\u7528\u4ea4\u6613\u53d1\u9001\u4efb\u610f\u6587\u672c\uff1f \u6211\u5df2\u751f\u6210\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305\u4f46\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f\u7a7a\u7684\uff1f \u6211\u7684ENS\u67e5\u8be2\u5931\u8d25\u4e86 TelChain\u5e38\u89c1\u95ee\u9898\u96c6 java-sdk\u9879\u76ee\u6350\u8d60\u5730\u5740 \u6211\u5728\u54ea\u91cc\u53ef\u4ee5\u83b7\u5f97java-sdk\u7684\u5546\u4e1a\u652f\u6301\uff1f \u5168\u90e8\u6559\u7a0b 2. javaTelChain\u5e93java-sdk\u6587\u6863 \u5176\u4ed6\u7684\u7ec6\u8282 java8 bulid\uff1a java-sdk\u63d0\u4f9b\u5bf9\u6240\u6709\u54cd\u5e94\u7c7b\u578b\u7684\u5b89\u5168\u8bbf\u95ee\u3002\u53ef\u9009\u7684\u6216null\u54cd\u5e94java 8\u90fd\u652f\u6301\u3002 \u5f02\u6b65\u8bf7\u6c42\u5305\u5728\u4e00\u4e2ajava 8\u7684 CompletableFutures \u3002java-sdk\u63d0\u4f9b\u4e86\u56f4\u7ed5\u6240\u6709\u5f02\u6b65\u8bf7\u6c42\u7684\u6253\u5305\u5de5\u5177\uff0c\u4ee5\u786e\u4fdd\u5728\u6267\u884c\u671f\u95f4\u53ef\u4ee5\u6355\u83b7\u4efb\u4f55\u5f02\u5e38\uff0c\u800c\u4e0d\u53ea\u662f\u4e22\u5f03\u3002\u7531\u4e8e\u5728\u5b8c\u5168\u68c0\u67e5\u4e2d\u4f1a\u6709\u5f88\u591a\u7f3a\u5c11\u652f\u6301\u7684\u5f02\u5e38\u60c5\u51b5\uff0c\u8fd9\u4e9b\u5f02\u5e38\u901a\u5e38\u88ab\u786e\u5b9a\u4e3a\u672a\u68c0\u6d4b\u5230\u7684\u5f02\u5e38\uff0c\u5bfc\u81f4\u68c0\u6d4b\u8fc7\u7a0b\u51fa\u73b0\u95ee\u9898\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Async.run() \u53ca\u5176\u5173\u8054 test \u3002 \u5728java 8\u7684Android\u7248\u672c\uff1a \u5305\u6570\u91cf\u4f5c\u4e3a BigIntegers \u8fd4\u56de\u3002\u5bf9\u4e8e\u7b80\u5355\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u901a\u8fc7 Response.getResult() \u83b7\u53d6\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u6570\u91cf\u7ed3\u679c\u3002 \u8fd8\u53ef\u4ee5\u901a\u8fc7\u5728 HttpService\u548cIpcService\u7c7b\u4e2d\u5b58\u5728\u7684 includeRawResponse \u53c2\u6570\u5c06\u539f\u751f\u7684JSON\u5305\u653e\u7f6e\u5728\u54cd\u5e94\u4e2d\u3002","title":"\u5165\u95e8\u4ecb\u7ecd"},{"location":"#_1","text":"","title":"\u5165\u95e8\u4ecb\u7ecd"},{"location":"#1","text":"","title":"1.\u5165\u95e8\u5f00\u59cb"},{"location":"#go-sdk","text":"go-sdk\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u3001\u9ad8\u5ea6\u6a21\u5757\u5316\u3001\u54cd\u5e94\u5f0f\u3001\u7c7b\u578b\u5b89\u5168\u7684go\u7c7b\u5e93\u63d0\u4f9b\u4e30\u5bccAPI\uff0c\u7528\u4e8e\u5904\u7406TelChain\u667a\u80fd\u5408\u7ea6\u53ca\u4e0eTelChain\u7f51\u7edc\u4e0a\u7684\u5ba2\u6237\u7aef(\u8282\u70b9)\u8fdb\u884c\u96c6\u6210\u3002 \u53ef\u4ee5\u901a\u8fc7\u5b83\u8fdb\u884cTelChain\u533a\u5757\u94fe\u7684\u5f00\u53d1\uff0c\u800c\u65e0\u9700\u4e3a\u4f60\u7684\u5e94\u7528\u5e73\u53f0\u7f16\u5199\u96c6\u6210\u4ee3\u7801\u3002","title":"go-sdk\u7b80\u4ecb"},{"location":"#2go-sdk","text":"\u9996\u5148\u5c06\u6700\u65b0\u7248\u672c\u7684go-sdk\u5b89\u88c5\u5230\u9879\u76ee\u4e2d\u3002 \u4ee5\u4e0b\u4e3ago.mod\u6587\u4ef6\u5185\u5bb9\uff1a module github.com/bif/bif-sdk-go go 1.17 require ( github.com/aristanetworks/goarista v0.0.0-20200423211322-0b5ff220aee9 github.com/btcsuite/btcd v0.21.0-beta github.com/btcsuite/btcutil v1.0.2 github.com/davecgh/go-spew v1.1.1 github.com/gorilla/websocket v1.4.2 github.com/libp2p/go-libp2p-core v0.5.2 github.com/pborman/uuid v1.2.0 github.com/prometheus/common v0.9.1 github.com/stretchr/testify v1.5.1 github.com/teleinfo-bif/bit-gmsm v1.0.5 golang.org/x/crypto v0.0.0-20201221181555-eec23a3978ad golang.org/x/sys v0.0.0-20200219091948-cb0a6d8edb6c gopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f ) require ( github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751 // indirect github.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4 // indirect github.com/gogo/protobuf v1.3.1 // indirect github.com/google/uuid v1.0.0 // indirect github.com/ipfs/go-cid v0.0.5 // indirect github.com/konsorten/go-windows-terminal-sequences v1.0.1 // indirect github.com/kr/text v0.1.0 // indirect github.com/libp2p/go-buffer-pool v0.0.2 // indirect github.com/libp2p/go-openssl v0.0.4 // indirect github.com/minio/blake2b-simd v0.0.0-20160723061019-3f5f724cb5b1 // indirect github.com/minio/sha256-simd v0.1.1 // indirect github.com/mr-tron/base58 v1.1.3 // indirect github.com/multiformats/go-base32 v0.0.3 // indirect github.com/multiformats/go-multiaddr v0.2.1 // indirect github.com/multiformats/go-multibase v0.0.1 // indirect github.com/multiformats/go-multihash v0.0.13 // indirect github.com/multiformats/go-varint v0.0.5 // indirect github.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e // indirect github.com/pmezard/go-difflib v1.0.0 // indirect github.com/sirupsen/logrus v1.4.2 // indirect github.com/spacemonkeygo/spacelog v0.0.0-20180420211403-2296661a0572 // indirect github.com/spaolacci/murmur3 v1.1.0 // indirect gopkg.in/alecthomas/kingpin.v2 v2.2.6 // indirect gopkg.in/yaml.v2 v2.2.8 // indirect )","title":"2.go-sdk\u5f00\u53d1\u5165\u95e8"},{"location":"#3","text":"\u9700\u8981\u542f\u52a8\u4e00\u4e2aTelChain\u5ba2\u6237\u7aef\uff0c\u5f53\u7136\u5982\u679c\u4f60\u5df2\u7ecf\u542f\u52a8\u4e86\u5c31\u4e0d\u9700\u8981\u518d\u6b21\u542f\u52a8\u3002 gbif --singleton.dpos Gbif gbif = Gbif.build(new HttpService(\"http://ip:port\")); \u5f53\u4e0d\u9700\u8981Bifj\u5b9e\u4f8b\u65f6\uff0c\u9700\u8981\u8c03\u7528 shutdown \u65b9\u6cd5\u6765\u91ca\u653e\u5b83\u6240\u4f7f\u7528\u7684\u8d44\u6e90\u3002 gbif.shutdown()","title":"3.\u542f\u52a8\u5ba2\u6237\u7aef"},{"location":"#4","text":"\u53d1\u9001\u540c\u6b65\u8bf7\u6c42 Gbif gbif = Gbif.build(new HttpService()); // defaults to http://localhost:8545/ Web3ClientVersion web3ClientVersion = gbif.bifClientVersion().send(); String clientVersion = web3ClientVersion.getWeb3ClientVersion();","title":"4.\u53d1\u9001\u8bf7\u6c42"},{"location":"#5ipc","text":"go-sdk\u8fd8\u652f\u6301\u901a\u8fc7\u6587\u4ef6\u5957\u63a5\u5b57\u5feb\u901f\u8fd0\u884c\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff08IPC\uff09\uff0c\u652f\u6301\u5ba2\u6237\u7aef\u5728\u76f8\u540c\u7684\u4e3b\u673a\u4e0a\u540c\u65f6\u8fd0\u884cgo-sdk\u3002\u5728\u521b\u5efa\u670d\u52a1\u65f6\uff0c\u4f7f\u7528\u76f8\u5173\u7684 IPCService \u5c31\u53ef\u4ee5\u5b9e\u73b0\u800c\u4e0d\u9700\u8981\u901a\u8fc7 HTTPService \u3002 // OS X/Linux/Unix: Gbif gbif = Gbif.build(new UnixIpcService(\"/path/to/socketfile\")); ... // Windows Gbif gbif = Gbif.build(new WindowsIpcService(\"/path/to/namedpipefile\")); ...","title":"5.IPC"},{"location":"#6gotelchain","text":"go-sdk\u53ef\u4ee5\u81ea\u52a8\u6253\u5305\u667a\u80fd\u5408\u540c\u4ee3\u7801\uff0c\u4ee5\u4fbf\u8fdb\u884cTelChain\u667a\u80fd\u5408\u540c\u90e8\u7f72\u548c\u4ea4\u4e92\u3002 \u8981\u6253\u5305\u4ee3\u7801\uff0c\u9700\u8981\u5148\u7f16\u8bd1\u667a\u80fd\u5408\u540c\uff1a $ solc <contract>.sol --bin --abi --optimize -o <output-dir>/ </output-dir></contract> bifj solidity generate /path/to/<smart-contract>.bin /path/to/<smart-contract>.abi -o /path/to/src/main/java -p com.your.organisation.name </smart-contract></smart-contract> \u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u65b0\u5efa\u548c\u90e8\u7f72\u667a\u80fd\u5408\u7ea6\u4e86\uff1a Gbif gbif= Gbif.build(new HttpService()); // defaults to http://localhost:8545/ Credentials credentials = WalletUtils.loadCredentials(\"password\", \"/path/to/walletfile\"); YourSmartContract contract = YourSmartContract.deploy( <bifj>, <credentials>, GAS_PRICE, GAS_LIMIT, <param1>, ..., <paramn>).send(); // constructor params </paramn></param1></credentials></bifj> \u6216\u8005\u4f7f\u7528\u4e00\u4e2a\u73b0\u6709\u7684\u667a\u80fd\u5408\u7ea6\uff1a YourSmartContract contract = YourSmartContract.load( \"0x<address>|<ensname>\", <bifj>, <credentials>, GAS_PRICE, GAS_LIMIT); </credentials></bifj></ensname></address> \u7136\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u667a\u80fd\u5408\u7ea6\u7684\u4ea4\u4e92\u4e86\uff1a TransactionReceipt transactionReceipt = contract.someMethod( <param1>, ...).send(); </param1> \u8c03\u7528\u667a\u80fd\u5408\u7ea6\uff1a Type result = contract.someMethod(<param1>, ...).send(); </param1>","title":"6.\u901a\u8fc7go\u6253\u5305TelChain\u667a\u80fd\u5408\u7ea6"},{"location":"#7filters","text":"go-sdk\u7684\u54cd\u5e94\u5f0f\u51fd\u6570\u53ef\u4ee5\u4f7f\u89c2\u5bdf\u8005\u901a\u8fc7\u4e8b\u4ef6\u53bb\u901a\u77e5\u6d88\u606f\u8ba2\u9605\u8005\u53d8\u5f97\u5f88\u7b80\u5355\uff0c\u5e76\u80fd\u591f\u8bb0\u5f55\u5728\u533a\u5757\u94fe\u4e2d\u3002\u63a5\u6536\u6240\u6709\u65b0\u7684\u533a\u5757\u5e76\u628a\u5b83\u4eec\u6dfb\u52a0\u5230\u533a\u5757\u94fe\u4e2d\uff1a Subscription subscription = gbif.blockObservable(false).subscribe(block -> { ... }); \u63a5\u6536\u6240\u6709\u65b0\u7684\u4ea4\u6613\u5e76\u628a\u5b83\u4eec\u6dfb\u52a0\u5230\u533a\u5757\u94fe\u4e2d\uff1a Subscription subscription = gbif.transactionObservable().subscribe(tx -> { ... }); \u63a5\u6536\u6240\u6709\u5df2\u7ecf\u63d0\u4ea4\u5230\u7f51\u7edc\u4e2d\u7b49\u5f85\u5904\u7406\u7684\u4ea4\u6613\u3002(\u4ed6\u4eec\u88ab\u7edf\u4e00\u7684\u5206\u914d\u5230\u4e00\u4e2a\u533a\u5757\u4e4b\u524d\u3002) Subscription subscription = gbif.pendingTransactionObservable().subscribe(tx -> { ... }); \u6216\u8005\u4f60\u91cd\u7f6e\u6240\u6709\u7684\u533a\u5757\u5230\u6700\u65b0\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5f53\u6709\u65b0\u5efa\u533a\u5757\u7684\u65f6\u5019\u4f1a\u901a\u77e5\u4f60\u3002 Subscription subscription = catchUpToLatestAndSubscribeToNewBlocksObservable( <startblocknumber>, <fulltxobjects>) .subscribe(block -> { ... }); </fulltxobjects></startblocknumber> \u4e3b\u9898\u8fc7\u6ee4 \u4e5f\u88ab\u652f\u6301\uff1a CoreFilter filter = new CoreFilter(DefaultBlockParameterName.EARLIEST, DefaultBlockParameterName.LATEST, <contract-address>) .addSingleTopic(...)|.addOptionalTopics(..., ...)|...; gbif.coreLogObservable(filter).subscribe(log -> { ... }); </contract-address> \u5f53\u4e0d\u518d\u9700\u8981\u65f6\uff0c\u8ba2\u9605\u4e5f\u5e94\u8be5\u88ab\u53d6\u6d88\uff1a subscription.unsubscribe(); \u6ce8\u610f\uff1aInfura\u4e2d\u4e0d\u652f\u6301filters\u3002","title":"7.Filters"},{"location":"#8","text":"go-sdk\u652f\u6301\u4f7f\u7528TelChain\u94b1\u5305\u6587\u4ef6\uff08\u63a8\u8350\u7684\uff09\u548c\u7528\u4e8e\u53d1\u9001\u4e8b\u52a1\u7684TelChain\u5ba2\u6237\u7aef\u7ba1\u7406\u547d\u4ee4\u3002 \u4f7f\u7528\u94b1\u5305\u6587\u4ef6\u53d1\u9001\u79ef\u5206\u7ed9\u5176\u4ed6\u4eba\uff1a Gbif gbif= Gbif.build(new HttpService()); // defaults to http://localhost:8545/ Credentials credentials = WalletUtils.loadCredentials(\"password\", \"/path/to/walletfile\"); TransactionReceipt transactionReceipt = Transfer.sendFunds( gbif, credentials, \"0x<address>|<ensname>\", BigDecimal.valueOf(1.0), Convert.Unit.coreER) .send(); </ensname></address> \u6216\u8005\u4f60\u5e0c\u671b\u5efa\u7acb\u4f60\u81ea\u5df1\u5b9a\u5236\u7684\u4ea4\u6613\uff1a Gbif gbif = Gbif.build(new HttpService()); // defaults to http://localhost:8545/ Credentials credentials = WalletUtils.loadCredentials(\"password\", \"/path/to/walletfile\"); // get the next available nonce CoreGetTransactionCount coreGetTransactionCount = gbif.coreGetTransactionCount( address, DefaultBlockParameterName.LATEST).send(); BigInteger nonce = coreGetTransactionCount.getTransactionCount(); // create our transaction RawTransaction rawTransaction = RawTransaction.createBiferTransaction( nonce, <gas price>, <gas limit>, <toaddress>, <value>); // sign & send our transaction byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials); String hexValue = Numeric.toHexString(signedMessage); CoreSendTransaction coreSendTransaction = gbif.coreSendRawTransaction(hexValue).send(); // ... </value></toaddress></gas></gas> \u4f7f\u7528TelChain\u5ba2\u6237\u7aef\u7684\u7ba1\u7406\u547d\u4ee4\uff08\u5982\u679c\u4f60\u7684\u94b1\u5305\u5bc6\u94a5\u5df2\u7ecf\u5728\u5ba2\u6237\u7aef\u5b58\u50a8\uff09\uff1a Admin bifj = Admin.build(new HttpService()); // defaults to http://localhost:8545/ PersonalUnlockAccount personalUnlockAccount = gbif.personalUnlockAccount(\"0x000...\", \"a password\").sendAsync().get(); if (personalUnlockAccount.accountUnlocked()) { // send a transaction }","title":"8.\u4ea4\u6613"},{"location":"#9","text":"java-sdk\u7684jar\u5305\u4e3a\u6bcf\u4e00\u4e2a\u7248\u672c\u90fd\u63d0\u4f9b\u547d\u4ee4\u884c\u5de5\u5177\u3002\u547d\u4ee4\u884c\u5de5\u5177\u5141\u8bb8\u4f60\u76f4\u63a5\u901a\u8fc7\u4e00\u4e9b\u547d\u4ee4\u4f7f\u7528java-sdk\u7684\u4e00\u4e9b\u529f\u80fd\uff1a \u94b1\u5305\u521b\u5efa \u94b1\u5305\u5bc6\u7801\u7ba1\u7406 \u8d44\u91d1\u4ece\u94b1\u5305\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a solidity\u7f16\u5199\u7684\u667a\u80fd\u5408\u540c\u529f\u80fd\u6253\u5305 \u8bf7\u53c2\u9605 \u6587\u6863 \u4ee5\u83b7\u5f97\u547d\u4ee4\u884c\u76f8\u5173\u7684\u8fdb\u4e00\u6b65\u7684\u4fe1\u606f\u3002","title":"9.\u547d\u4ee4\u884c\u5de5\u5177"},{"location":"#10","text":"\u5165\u95e8\u4ecb\u7ecd \u5165\u95e8\u5f00\u59cb Maven Gradle \u542f\u52a8\u5ba2\u6237\u7aef \u53d1\u9001\u8bf7\u6c42 IPC \u901a\u8fc7java\u6253\u5305TelChain\u667a\u80fd\u5408\u7ea6 Filters \u4ea4\u6613 \u547d\u4ee4\u884c\u5de5\u5177 \u5176\u4ed6\u7684\u7ec6\u8282 \u6a21\u5757 \u6a21\u5757\u7b80\u4ecb \u4ea4\u6613 \u4ea4\u6613\u7b80\u4ecb \u5982\u4f55\u83b7\u5f97\u79ef\u5206Bifer TelChain\u6d4b\u8bd5\u94fe \u5728testnet\u6d4b\u8bd5\u94fe\u6216\u8005\u79c1\u6709\u94fe\u4e0a\u6316\u6398 gas \u4ea4\u6613\u673a\u5236 \u901a\u8fc7TelChainethereum\u5ba2\u6237\u7aef\u8fdb\u884c\u8ba4\u8bc1\u7b7e\u540d\u4ea4\u6613 \u79bb\u7ebf\u4ea4\u6613\u7b7e\u540d\u8ba4\u8bc1 \u521b\u5efa\u548c\u4f7f\u7528\u94b1\u5305\u6587\u4ef6 \u7b7e\u7f72TelChain\u4ea4\u6613 \u4ea4\u6613\u968f\u673a\u6570 \u4ea4\u6613\u7c7b\u578b \u79ef\u5206\u4ece\u4e00\u65b9\u4ea4\u6613\u5230\u53e6\u4e00\u65b9 \u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u6253\u5305\u5668 \u521b\u5efa\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6 \u4e0e\u667a\u80fd\u5408\u7ea6\u4ea4\u6613 \u67e5\u8be2\u667a\u80fd\u5408\u7ea6\u72b6\u6001 \u667a\u80fd\u5408\u7ea6 \u667a\u80fd\u5408\u7ea6\u7b80\u4ecb \u4ecesolidity\u8bed\u8a00\u5f00\u59cb \u7f16\u8bd1solidity\u6e90\u4ee3\u7801 \u90e8\u7f72\u667a\u80fd\u5408\u7ea6\u53ca\u4e0e\u667a\u80fd\u5408\u7ea6\u4ea4\u4e92 \u667a\u80fd\u5408\u7ea6\u793a\u4f8bdemo EIP-20TelChain\u667a\u80fd\u5408\u7ea6\u901a\u8bc1\u6807\u51c6 \u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305 \u6784\u5efa\u4e0e\u90e8\u7f72\u667a\u80fd\u5408\u7ea6 \u667a\u80fd\u5408\u7ea6\u6709\u6548\u6027 \u4ea4\u6613\u7ba1\u7406\u5668 \u5728\u4ea4\u6613\u4e2d\u6307\u5b9a\u94feID:EIP-155 \u4ea4\u6613\u6536\u636e\u5904\u7406\u5668 \u8c03\u7528\u4ea4\u6613\u548c\u4e8b\u4ef6 \u8c03\u7528\u5e38\u91cf\u65b9\u6cd5 \u52a8\u6001gas\u4ef7\u683c\u4e0e\u9650\u4ef7 java-sdk\u5b9e\u4f8b \u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3\u5373ABI\u7b80\u4ecb \u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3\u5373ABI\u7b80\u4ecb \u7c7b\u578b\u6620\u5c04 ABI\u7684\u8fdb\u4e00\u6b65\u7ec6\u8282 \u4f9d\u8d56\u5173\u7cfb \u9012\u5f52\u957f\u5ea6\u524d\u7f00RLP\u7f16\u7801\u65b9\u6848 \u9012\u5f52\u957f\u5ea6\u524d\u7f00RLP\u7f16\u7801\u65b9\u6848 RLP\u7c7b\u578b \u4ea4\u6613\u7f16\u7801 \u4f9d\u8d56\u5173\u7cfb \u8fc7\u6ee4\u5668Filters\u548c\u4e8b\u4ef6Events \u8fc7\u6ee4\u5668Filters\u548c\u4e8b\u4ef6Events \u5757\u548c\u4ea4\u6613\u8fc7\u6ee4\u5668 \u518d\u73b0\u8fc7\u6ee4\u5668 \u4e3b\u9898\u8fc7\u6ee4\u5668\u548cEVM\u4e8b\u4ef6 \u64cd\u4f5c\u7ec4\u5408\u6ce8\u8bb0 \u8fdb\u4e00\u6b65\u7684\u4f8b\u5b50 \u547d\u4ee4\u884c\u5de5\u5177 \u547d\u4ee4\u884c\u5de5\u5177 java-sdk\u547d\u4ee4\u884c\u5de5\u5177\u4f5c\u4e3a\u94b1\u5305\u5de5\u5177 \u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305 \u5982\u4f55\u7ba1\u7406APIs \u5982\u4f55\u7ba1\u7406APIs \u5982\u4f55\u5728java-sdk\u4e2d\u4f7f\u7528Infura \u7b7e\u540d Infura Http \u5ba2\u6237\u7aef \u4ea4\u6613 TelChain\u540d\u79f0\u670d\u52a1ENS TelChain\u540d\u79f0\u670d\u52a1ENS ENS\u5728java-sdk\u4e2d\u7684\u4f7f\u7528 java-sdk\u5b9e\u73b0 Unicode\u6280\u672f\u6807\u51c6UTS46 \u6ce8\u518c\u57df\u540d java-sdk\u5e38\u89c1\u95ee\u9898\u89e3\u51b3\u65b9\u6848 \u4f60\u6709\u4e00\u4e2a\u4f7f\u7528java-sdk\u5f00\u53d1\u7684\u9879\u76ee\u5417\uff1f \u6211\u63d0\u4ea4\u4e86\u4e00\u4e2a\u4ea4\u6613\uff0c\u4f46\u6ca1\u6709\u88ab\u5f00\u91c7\u3002 \u6211\u60f3\u4e86\u89e3JSON-RPC\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u6211\u60f3\u5728\u6d4b\u8bd5\u94fe\u4e0a\u83b7\u5f97\u4e00\u4e9b\u79ef\u5206\uff0c\u53c8\u4e0d\u60f3\u53bb\u5f00\u91c7\u3002 \u5982\u4f55\u4ece\u4ea4\u6613\u8c03\u7528\u7684\u667a\u80fd\u5408\u7ea6\u65b9\u6cd5\u4e2d\u83b7\u53d6\u8fd4\u56de\u503c\uff1f \u662f\u5426\u53ef\u4ee5\u7528\u4ea4\u6613\u53d1\u9001\u4efb\u610f\u6587\u672c\uff1f \u6211\u5df2\u751f\u6210\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305\u4f46\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f\u7a7a\u7684\uff1f \u6211\u7684ENS\u67e5\u8be2\u5931\u8d25\u4e86 TelChain\u5e38\u89c1\u95ee\u9898\u96c6 java-sdk\u9879\u76ee\u6350\u8d60\u5730\u5740 \u6211\u5728\u54ea\u91cc\u53ef\u4ee5\u83b7\u5f97java-sdk\u7684\u5546\u4e1a\u652f\u6301\uff1f \u5168\u90e8\u6559\u7a0b 2. javaTelChain\u5e93java-sdk\u6587\u6863 \u5176\u4ed6\u7684\u7ec6\u8282 java8 bulid\uff1a java-sdk\u63d0\u4f9b\u5bf9\u6240\u6709\u54cd\u5e94\u7c7b\u578b\u7684\u5b89\u5168\u8bbf\u95ee\u3002\u53ef\u9009\u7684\u6216null\u54cd\u5e94java 8\u90fd\u652f\u6301\u3002 \u5f02\u6b65\u8bf7\u6c42\u5305\u5728\u4e00\u4e2ajava 8\u7684 CompletableFutures \u3002java-sdk\u63d0\u4f9b\u4e86\u56f4\u7ed5\u6240\u6709\u5f02\u6b65\u8bf7\u6c42\u7684\u6253\u5305\u5de5\u5177\uff0c\u4ee5\u786e\u4fdd\u5728\u6267\u884c\u671f\u95f4\u53ef\u4ee5\u6355\u83b7\u4efb\u4f55\u5f02\u5e38\uff0c\u800c\u4e0d\u53ea\u662f\u4e22\u5f03\u3002\u7531\u4e8e\u5728\u5b8c\u5168\u68c0\u67e5\u4e2d\u4f1a\u6709\u5f88\u591a\u7f3a\u5c11\u652f\u6301\u7684\u5f02\u5e38\u60c5\u51b5\uff0c\u8fd9\u4e9b\u5f02\u5e38\u901a\u5e38\u88ab\u786e\u5b9a\u4e3a\u672a\u68c0\u6d4b\u5230\u7684\u5f02\u5e38\uff0c\u5bfc\u81f4\u68c0\u6d4b\u8fc7\u7a0b\u51fa\u73b0\u95ee\u9898\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Async.run() \u53ca\u5176\u5173\u8054 test \u3002 \u5728java 8\u7684Android\u7248\u672c\uff1a \u5305\u6570\u91cf\u4f5c\u4e3a BigIntegers \u8fd4\u56de\u3002\u5bf9\u4e8e\u7b80\u5355\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u901a\u8fc7 Response.getResult() \u83b7\u53d6\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u6570\u91cf\u7ed3\u679c\u3002 \u8fd8\u53ef\u4ee5\u901a\u8fc7\u5728 HttpService\u548cIpcService\u7c7b\u4e2d\u5b58\u5728\u7684 includeRawResponse \u53c2\u6570\u5c06\u539f\u751f\u7684JSON\u5305\u653e\u7f6e\u5728\u54cd\u5e94\u4e2d\u3002","title":"10.\u5176\u4ed6\u7684\u7ec6\u8282"},{"location":"ABI/","text":"ABI 1.\u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3\u5373ABI\u7b80\u4ecb go-sdk\u5f00\u53d1dapp\u7684\u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3(ABI)\u662f\u5728BifereumTelChain\u4f7f\u7528go\u5f00\u53d1\u7684\u667a\u80fd\u5408\u7ea6\u7684\u6570\u636e\u7f16\u7801\u65b9\u6848\u3002ABI\u4e2d\u5b9a\u4e49\u7684\u7c7b\u578b\u4e0esolidity\u7f16\u5199\u667a\u80fd\u5408\u7ea6\u65f6\u6240\u9047\u5230\u7684\u7c7b\u578b\u5b8c\u5168\u76f8\u540c\uff0c\u5373uint8...uint256,int8...int256,\u5e03\u5c14bool,\u5b57\u7b26\u4e32string\u7b49\u7b49\u3002 go-sdk\u4e2d\u7684ABI\u6a21\u5757\u63d0\u4f9b\u4e86\u5bf9ABI\u89c4\u8303\u7684\u5b8c\u5168\u652f\u6301\uff0c\u5e76\u4e14\u5305\u62ec\uff1a \u6240\u6709ABI\u7c7b\u578b\u7684go\u5b9e\u73b0\uff0c\u5305\u62ec\u5230\u539f\u751fgo\u7c7b\u578b\u7684\u8f6c\u6362 \u51fd\u6570\u4e0e\u4e8b\u4ef6\u652f\u6301 \u5927\u91cf\u5355\u5143\u6d4b\u8bd5 2.\u7c7b\u578b\u6620\u5c04 go-sdk\u4e2d\u4f7f\u7528\u7684\u539f\u751fgo\u5230ABI\u7c7b\u578b\u6620\u5c04\u5982\u4e0b\uff1a boolean -> bool BigInteger -> uint/int byte[] -> bytes String -> string and address types List<> -> dynamic/static array BigInteger\u7c7b\u578b\u5fc5\u987b\u7528\u4e8e\u6570\u5b57\u7c7b\u578b\uff0c\u56e0\u4e3aBifereumTelChain\u4e2d\u7684\u6570\u5b57\u7c7b\u578b\u662f256\u4f4d\u6574\u6570\u503c\u3002 Fixed point types \u56fa\u5b9a\u70b9\u7c7b\u578b\u5df2\u88ab\u5b9a\u4e49\u4e3aTelChain\u5b9a\u4e49\u4e86\uff0c\u4f46\u76ee\u524d\u5728 Solidity\u8fd8\u6ca1\u6709\u5b9e\u73b0 \uff0c\u56e0\u6b64java-sdk\u76ee\u524d\u4e0d\u652f\u6301\u5b83\u4eec\uff08\u5b83\u4eec\u662f\u57283.x\u4e4b\u524d\u63d0\u4f9b\u7684\uff09\u3002\u4e00\u65e6\u5728Solidity\u53ef\u7528\uff0c\u5b83\u4eec\u5c06\u88ab\u91cd\u65b0\u5f15\u5165\u5230java-sdk\u7684ABI\u6a21\u5757\u4e2d\u3002 \u6709\u5173\u5728Java\u4e2d\u4f7f\u7528ABI\u7c7b\u578b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 Solidity smart contract wrappers 3.ABI\u7684\u8fdb\u4e00\u6b65\u7ec6\u8282 \u53ef\u4ee5\u53c2\u9605\u5404\u79cdABI\u5355\u5143\u6d4b\u8bd5\u7684\u7f16\u7801/\u89e3\u7801\u7684 \u4f8b\u5b50 \u3002 \u5b8c\u6574\u7684ABI\u89c4\u8303\u6587\u4ef6\u53ef\u4ee5\u770b Solidity documentation \u3002 4.\u4f9d\u8d56\u5173\u7cfb ABI\u4e00\u4e2a\u975e\u5e38\u8f7b\u91cf\u7ea7\u7684\u6a21\u5757\uff0c\u552f\u4e00\u7684\u7b2c\u4e09\u65b9\u4f9d\u8d56\u662f Bouncy Castle \uff0c\u7528\u4e8ehash\u52a0\u5bc6 ( Spongy Castle on Android)\u3002 \u6700\u540e\u5e0c\u671bjava\u548c\u5b89\u5353\u5f00\u53d1\u8005\uff0c\u5728JVM\u6216Android\u4e0a\u6709TelChainABI\u5408\u4f5c\u7684\u9879\u76ee\u65f6\u4f1a\u9009\u62e9\u4f7f\u7528\u8fd9\u4e2a\u6a21\u5757\uff0c\u800c\u4e0d\u662f\u518d\u7f16\u5199\u81ea\u5df1\u7684\u5b9e\u73b0\u3002","title":"ABI"},{"location":"ABI/#abi","text":"","title":"ABI"},{"location":"ABI/#1abi","text":"go-sdk\u5f00\u53d1dapp\u7684\u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3(ABI)\u662f\u5728BifereumTelChain\u4f7f\u7528go\u5f00\u53d1\u7684\u667a\u80fd\u5408\u7ea6\u7684\u6570\u636e\u7f16\u7801\u65b9\u6848\u3002ABI\u4e2d\u5b9a\u4e49\u7684\u7c7b\u578b\u4e0esolidity\u7f16\u5199\u667a\u80fd\u5408\u7ea6\u65f6\u6240\u9047\u5230\u7684\u7c7b\u578b\u5b8c\u5168\u76f8\u540c\uff0c\u5373uint8...uint256,int8...int256,\u5e03\u5c14bool,\u5b57\u7b26\u4e32string\u7b49\u7b49\u3002 go-sdk\u4e2d\u7684ABI\u6a21\u5757\u63d0\u4f9b\u4e86\u5bf9ABI\u89c4\u8303\u7684\u5b8c\u5168\u652f\u6301\uff0c\u5e76\u4e14\u5305\u62ec\uff1a \u6240\u6709ABI\u7c7b\u578b\u7684go\u5b9e\u73b0\uff0c\u5305\u62ec\u5230\u539f\u751fgo\u7c7b\u578b\u7684\u8f6c\u6362 \u51fd\u6570\u4e0e\u4e8b\u4ef6\u652f\u6301 \u5927\u91cf\u5355\u5143\u6d4b\u8bd5","title":"1.\u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3\u5373ABI\u7b80\u4ecb"},{"location":"ABI/#2","text":"go-sdk\u4e2d\u4f7f\u7528\u7684\u539f\u751fgo\u5230ABI\u7c7b\u578b\u6620\u5c04\u5982\u4e0b\uff1a boolean -> bool BigInteger -> uint/int byte[] -> bytes String -> string and address types List<> -> dynamic/static array BigInteger\u7c7b\u578b\u5fc5\u987b\u7528\u4e8e\u6570\u5b57\u7c7b\u578b\uff0c\u56e0\u4e3aBifereumTelChain\u4e2d\u7684\u6570\u5b57\u7c7b\u578b\u662f256\u4f4d\u6574\u6570\u503c\u3002 Fixed point types \u56fa\u5b9a\u70b9\u7c7b\u578b\u5df2\u88ab\u5b9a\u4e49\u4e3aTelChain\u5b9a\u4e49\u4e86\uff0c\u4f46\u76ee\u524d\u5728 Solidity\u8fd8\u6ca1\u6709\u5b9e\u73b0 \uff0c\u56e0\u6b64java-sdk\u76ee\u524d\u4e0d\u652f\u6301\u5b83\u4eec\uff08\u5b83\u4eec\u662f\u57283.x\u4e4b\u524d\u63d0\u4f9b\u7684\uff09\u3002\u4e00\u65e6\u5728Solidity\u53ef\u7528\uff0c\u5b83\u4eec\u5c06\u88ab\u91cd\u65b0\u5f15\u5165\u5230java-sdk\u7684ABI\u6a21\u5757\u4e2d\u3002 \u6709\u5173\u5728Java\u4e2d\u4f7f\u7528ABI\u7c7b\u578b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 Solidity smart contract wrappers","title":"2.\u7c7b\u578b\u6620\u5c04"},{"location":"ABI/#3abi","text":"\u53ef\u4ee5\u53c2\u9605\u5404\u79cdABI\u5355\u5143\u6d4b\u8bd5\u7684\u7f16\u7801/\u89e3\u7801\u7684 \u4f8b\u5b50 \u3002 \u5b8c\u6574\u7684ABI\u89c4\u8303\u6587\u4ef6\u53ef\u4ee5\u770b Solidity documentation \u3002","title":"3.ABI\u7684\u8fdb\u4e00\u6b65\u7ec6\u8282"},{"location":"ABI/#4","text":"ABI\u4e00\u4e2a\u975e\u5e38\u8f7b\u91cf\u7ea7\u7684\u6a21\u5757\uff0c\u552f\u4e00\u7684\u7b2c\u4e09\u65b9\u4f9d\u8d56\u662f Bouncy Castle \uff0c\u7528\u4e8ehash\u52a0\u5bc6 ( Spongy Castle on Android)\u3002 \u6700\u540e\u5e0c\u671bjava\u548c\u5b89\u5353\u5f00\u53d1\u8005\uff0c\u5728JVM\u6216Android\u4e0a\u6709TelChainABI\u5408\u4f5c\u7684\u9879\u76ee\u65f6\u4f1a\u9009\u62e9\u4f7f\u7528\u8fd9\u4e2a\u6a21\u5757\uff0c\u800c\u4e0d\u662f\u518d\u7f16\u5199\u81ea\u5df1\u7684\u5b9e\u73b0\u3002","title":"4.\u4f9d\u8d56\u5173\u7cfb"},{"location":"RLP/","text":"RLP 1.\u9012\u5f52\u957f\u5ea6\u524d\u7f00RLP\u7f16\u7801\u65b9\u6848 \u9012\u5f52\u957f\u5ea6\u524d\u7f00RLP(Recursive Length Prefix)\u7f16\u7801\u65b9\u6848\u662f\u5728TelChainBifereum\u4e2d\u4f7f\u7528\u7684\u4e00\u79cd\u7a7a\u95f4\u6709\u6548\u7684\u5bf9\u8c61\u5e8f\u5217\u5316\u65b9\u6848\u3002 \u89c4\u8303\u672c\u8eab\u5728 \u9ec4\u76ae\u4e66 \u4e2d\u5b9a\u4e49\uff0c\u800c\u4e0b\u9762\u7684\u9875\u9762\u5728 ethereum Wiki \u4e2d\u5b9a\u4e49\u3002 2.RLP\u7c7b\u578b RLP\u7f16\u7801\u5668\u5b9a\u4e49\u4e86\u4e24\u79cd\u652f\u6301\u7c7b\u578b\uff1a string list list\u7c7b\u578b\u53ef\u4ee5\u5d4c\u5957\u4efb\u610f\u6b21\u6570\uff0c\u5141\u8bb8\u5bf9\u590d\u6742\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u7f16\u7801\u3002 go-sdk\u4e2d\u7684 RLP\u6a21\u5757 \u63d0\u4f9b\u4e86RLP\u7f16\u7801\u80fd\u529b\uff0c RlpEncoderTest \u6f14\u793a\u4e86\u8bb8\u591a\u4e0d\u540c\u7c7b\u578b\u503c\u7684\u7f16\u7801\u53ef\u4ee5\u53c2\u8003: package org.gbif.rlp; import java.math.BigInteger; import java.util.Arrays; import org.junit.Test; import static org.hamcrest.CoreMatchers.is; import static org.junit.Assert.assertThat; public class RlpEncoderTest { /** * Examples taken from https://github.com/ethereum/wiki/wiki/RLP#examples. * * <p>For further examples see https://github.com/ethereum/tests/tree/develop/RLPTests. */ @Test public void testEncode() { assertThat(RlpEncoder.encode(RlpString.create(\"dog\")), is(new byte[]{ (byte) 0x83, 'd', 'o', 'g' })); assertThat(RlpEncoder.encode(new RlpList(RlpString.create(\"cat\"), RlpString.create(\"dog\"))), is(new byte[]{ (byte) 0xc8, (byte) 0x83, 'c', 'a', 't', (byte) 0x83, 'd', 'o', 'g' })); assertThat(RlpEncoder.encode(RlpString.create(\"\")), is(new byte[]{ (byte) 0x80 })); assertThat(RlpEncoder.encode(RlpString.create(new byte[] {})), is(new byte[]{ (byte) 0x80 })); assertThat(RlpEncoder.encode(new RlpList()), is(new byte[]{ (byte) 0xc0 })); assertThat(RlpEncoder.encode(RlpString.create(BigInteger.valueOf(0x0f))), is(new byte[]{ (byte) 0x0f })); assertThat(RlpEncoder.encode(RlpString.create(BigInteger.valueOf(0x0400))), is(new byte[]{ (byte) 0x82, (byte) 0x04, (byte) 0x00 })); assertThat(RlpEncoder.encode(new RlpList( new RlpList(), new RlpList(new RlpList()), new RlpList(new RlpList(), new RlpList(new RlpList())))), is(new byte[] { (byte) 0xc7, (byte) 0xc0, (byte) 0xc1, (byte) 0xc0, (byte) 0xc3, (byte) 0xc0, (byte) 0xc1, (byte) 0xc0 })); assertThat(RlpEncoder.encode( RlpString.create(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit\")), is(new byte[] { (byte) 0xb8, (byte) 0x38, 'L', 'o', 'r', 'e', 'm', ' ', 'i', 'p', 's', 'u', 'm', ' ', 'd', 'o', 'l', 'o', 'r', ' ', 's', 'i', 't', ' ', 'a', 'm', 'e', 't', ',', ' ', 'c', 'o', 'n', 's', 'e', 'c', 't', 'e', 't', 'u', 'r', ' ', 'a', 'd', 'i', 'p', 'i', 's', 'i', 'c', 'i', 'n', 'g', ' ', 'e', 'l', 'i', 't' })); assertThat(RlpEncoder.encode(RlpString.create(BigInteger.ZERO)), is(new byte[]{ (byte) 0x80 })); // https://github.com/paritytech/parity/blob/master/util/rlp/tests/tests.rs#L239 assertThat(RlpEncoder.encode(RlpString.create(new byte[] { 0 })), is(new byte[]{ (byte) 0x00 })); assertThat(RlpEncoder.encode( new RlpList( RlpString.create(\"zw\"), new RlpList(RlpString.create(4)), RlpString.create(1))), is(new byte[]{ (byte) 0xc6, (byte) 0x82, (byte) 0x7a, (byte) 0x77, (byte) 0xc1, (byte) 0x04, (byte) 0x01})); // 55 bytes. See https://github.com/bifj/bifj/issues/519 byte[] encodeMe = new byte[55]; Arrays.fill(encodeMe, (byte) 0); byte[] expectedEncoding = new byte[56]; expectedEncoding[0] = (byte) 0xb7; System.arraycopy(encodeMe, 0, expectedEncoding, 1, encodeMe.length); assertThat(RlpEncoder.encode(RlpString.create(encodeMe)), is(expectedEncoding)); } } </p> 3.\u4ea4\u6613\u7f16\u7801 \u5728go-sdk\u4e2d\uff0c\u4f7f\u7528RLP\u7f16\u7801\u5c06TelChain\u4ea4\u6613\u5bf9\u8c61\u7f16\u7801\u4e3a\u5b57\u8282\u6570\u7ec4\uff0c\u8be5\u5b57\u8282\u6570\u7ec4\u5728\u63d0\u4ea4\u7ed9\u7f51\u7edc\u4e4b\u524d\u88ab\u7b7e\u7f72\u3002\u4ea4\u6613\u7c7b\u578b\u548c\u7b7e\u540d\u903b\u8f91\u4f4d\u4e8e Crypto \u6a21\u5757\u5185\uff0c https://github.com/bifj/bifj/blob/master/crypto/src/test/java/org/bifj/crypto/TransactionEncoderTest.java \u63d0\u4f9b\u4ea4\u6613\u7b7e\u540d\u548c\u7f16\u7801\u7684\u793a\u4f8b\uff1a package org.gbif.crypto; import java.math.BigInteger; import java.util.List; import org.junit.Test; import org.gbif.rlp.RlpString; import org.gbif.rlp.RlpType; import org.gbif.utils.Numeric; import static org.hamcrest.CoreMatchers.is; import static org.hamcrest.core.IsEqual.equalTo; import static org.junit.Assert.assertThat; public class TransactionEncoderTest { @Test public void testSignMessage() { byte[] signedMessage = TransactionEncoder.signMessage( createBiferTransaction(), SampleKeys.CREDENTIALS); String hexMessage = Numeric.toHexString(signedMessage); assertThat(hexMessage, is(\"0xf85580010a840add5355887fffffffffffffff80\" + \"1c\" + \"a046360b50498ddf5566551ce1ce69c46c565f1f478bb0ee680caf31fbc08ab727\" + \"a01b2f1432de16d110407d544f519fc91b84c8e16d3b6ec899592d486a94974cd0\")); } @Test public void testBiferTransactionAsRlpValues() { List<rlptype> rlpStrings = TransactionEncoder.asRlpValues(createBiferTransaction(), new Sign.SignatureData((byte) 0, new byte[32], new byte[32])); assertThat(rlpStrings.size(), is(9)); assertThat(rlpStrings.get(3), equalTo(RlpString.create(new BigInteger(\"add5355\", 16)))); } @Test public void testContractAsRlpValues() { List<rlptype> rlpStrings = TransactionEncoder.asRlpValues( createContractTransaction(), null); assertThat(rlpStrings.size(), is(6)); assertThat(rlpStrings.get(3), is(RlpString.create(\"\"))); } @Test public void testEip155Encode() { assertThat(TransactionEncoder.encode(createEip155RawTransaction(), (byte) 1), is(Numeric.hexStringToByteArray( \"0xec098504a817c800825208943535353535353535353535353535353535353535880de0\" + \"b6b3a764000080018080\"))); } @Test public void testEip155Transaction() { // https://github.com/ethereum/EIPs/issues/155 Credentials credentials = Credentials.create( \"0x4646464646464646464646464646464646464646464646464646464646464646\"); assertThat(TransactionEncoder.signMessage( createEip155RawTransaction(), (byte) 1, credentials), is(Numeric.hexStringToByteArray( \"0xf86c098504a817c800825208943535353535353535353535353535353535353535880\" + \"de0b6b3a76400008025a028ef61340bd939bc2195fe537567866003e1a15d\" + \"3c71ff63e1590620aa636276a067cbe9d8997f761aecb703304b3800ccf55\" + \"5c9f3dc64214b297fb1966a3b6d83\"))); } private static RawTransaction createBiferTransaction() { return RawTransaction.createBiferTransaction( BigInteger.ZERO, BigInteger.ONE, BigInteger.TEN, \"0xadd5355\", BigInteger.valueOf(Long.MAX_VALUE)); } static RawTransaction createContractTransaction() { return RawTransaction.createContractTransaction( BigInteger.ZERO, BigInteger.ONE, BigInteger.TEN, BigInteger.valueOf(Long.MAX_VALUE), \"01234566789\"); } private static RawTransaction createEip155RawTransaction() { return RawTransaction.createBiferTransaction( BigInteger.valueOf(9), BigInteger.valueOf(20000000000L), BigInteger.valueOf(21000), \"0x3535353535353535353535353535353535353535\", BigInteger.valueOf(1000000000000000000L)); } } </rlptype></rlptype> package crypto import ( \"crypto/ecdsa\" \"encoding/hex\" \"errors\" \"github.com/btcsuite/btcutil/base58\" \"io\" \"io/ioutil\" \"math/big\" \"os\" \"strings\" \"github.com/bif/bif-sdk-go/crypto/config\" \"github.com/bif/bif-sdk-go/crypto/secp\" \"github.com/bif/bif-sdk-go/crypto/sm2\" \"github.com/bif/bif-sdk-go/utils\" \"github.com/bif/bif-sdk-go/utils/math\" ) // Keccak256 calculates and returns the Keccak256 hash of the input data. func Keccak256(cryptoType config.CryptoType, data ...[]byte) []byte { switch cryptoType { case config.SM2: return sm2.Keccak256Sm2(data...) case config.SECP256K1: return secp.Keccak256Btc(data...) default: return sm2.Keccak256Sm2(data...) } } // Keccak256Hash calculates and returns the Keccak256 hash of the input data, // converting it to an internal Hash data structure. func Keccak256Hash(cryptoType config.CryptoType, data ...[]byte) (h utils.Hash) { switch cryptoType { case config.SM2: return sm2.Keccak256HashSm2(data...) case config.SECP256K1: return secp.Keccak256HashBtc(data...) default: return sm2.Keccak256HashSm2(data...) } } // ToECDSA creates a private key with the given D value. func ToECDSA(d []byte, cryptoType config.CryptoType) (*ecdsa.PrivateKey, error) { switch cryptoType { case config.SM2: return sm2.ToECDSASm2(d, true) case config.SECP256K1: return secp.ToECDSABtc(d, true) default: return sm2.ToECDSASm2(d, true) } } // ToECDSAUnsafe blindly converts a binary blob to a private key. It should almost // never be used unless you are sure the input is valid and want to avoid hitting // errors due to bad origin encoding (0 prefixes cut off). func ToECDSAUnsafe(d []byte, cryptoType config.CryptoType) *ecdsa.PrivateKey { var priv *ecdsa.PrivateKey switch cryptoType { case config.SM2: priv, _ = sm2.ToECDSASm2(d, false) case config.SECP256K1: priv, _ = secp.ToECDSABtc(d, false) default: priv, _ = sm2.ToECDSASm2(d, false) } return priv } // FromECDSA exports a private key into a binary dump. func FromECDSA(priv *ecdsa.PrivateKey) []byte { if priv == nil { return nil } return math.PaddedBigBytes(priv.D, priv.Params().BitSize/8) } // UnmarshalPubkey converts bytes to a secp256k1 public key. func UnmarshalPubkey(pub []byte) (*ecdsa.PublicKey, error) { if pub[0] != 4 { // uncompressed form return nil, errors.New(\"invalid pub byte\") } x := new(big.Int).SetBytes(pub[1:33]) y := new(big.Int).SetBytes(pub[33:]) if sm2.S256Sm2().IsOnCurve(x, y) { return sm2.UnmarshalPubkeySm2(pub) } if secp.S256Btc().IsOnCurve(x, y) { return secp.UnmarshalPubkeyBtc(pub) } return sm2.UnmarshalPubkeySm2(pub) } func FromECDSAPub(p *ecdsa.PublicKey) []byte { if sm2.S256Sm2().IsOnCurve(p.X, p.Y) { return sm2.FromECDSAPubSm2(p) } if secp.S256Btc().IsOnCurve(p.X, p.Y) { return secp.FromECDSAPubBtc(p) } return sm2.FromECDSAPubSm2(p) } // HexToECDSA parses a secp256k1 private key. func HexToECDSA(hexkey string, cryptoType config.CryptoType) (*ecdsa.PrivateKey, error) { b, err := hex.DecodeString(hexkey) if err != nil { return nil, errors.New(\"invalid hex string\") } return ToECDSA(b, cryptoType) } // LoadECDSA loads a secp256k1 private key from the given file. func LoadECDSA(file string, cryptoType config.CryptoType) (*ecdsa.PrivateKey, error) { buf := make([]byte, 64) fd, err := os.Open(file) if err != nil { return nil, err } defer fd.Close() if _, err := io.ReadFull(fd, buf); err != nil { return nil, err } key, err := hex.DecodeString(string(buf)) if err != nil { return nil, err } return ToECDSA(key, cryptoType) } // SaveECDSA saves a secp256k1 private key to the given file with // restrictive permissions. The key data is saved hex-encoded. func SaveECDSA(file string, key *ecdsa.PrivateKey) error { k := hex.EncodeToString(FromECDSA(key)) return ioutil.WriteFile(file, []byte(k), 0600) } func GenerateKey(cryptoType config.CryptoType) (*ecdsa.PrivateKey, error) { switch cryptoType { case config.SM2: return sm2.GenerateKeySm2() case config.SECP256K1: return secp.GenerateKeyBtc() default: return sm2.GenerateKeySm2() } } func PubkeyToAddress(p ecdsa.PublicKey) utils.Address { length := config.HashLength var publicKey []byte var hash []byte var prefix strings.Builder if sm2.S256Sm2().IsOnCurve(p.X, p.Y) { publicKey = sm2.CompressPubkeySm2(&p) hash = sm2.Keccak256Sm2(publicKey) prefix.WriteString(string(config.SM2_Prefix)) } else if secp.S256Btc().IsOnCurve(p.X, p.Y) { publicKey = secp.CompressPubkeyBtc(&p) hash = secp.Keccak256Btc(publicKey) prefix.WriteString(string(config.SECP256K1_Prefix)) } else { publicKey = sm2.CompressPubkeySm2(&p) hash = sm2.Keccak256Sm2(publicKey) prefix.WriteString(string(config.SM2_Prefix)) } hashLength := len(hash) if hashLength < length { length = hashLength } h := hash[hashLength-length:] var encode string encode = base58.Encode(h) prefix.WriteString(string(config.BASE58_Prefix)) return utils.StringToAddress(prefix.String() + encode) } 4.\u4f9d\u8d56\u5173\u7cfb \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u8f7b\u91cf\u7ea7\u7684\u6a21\u5757\uff0c\u6ca1\u6709\u5176\u4ed6\u4f9d\u8d56\u9879\u3002","title":"RLP"},{"location":"RLP/#rlp","text":"","title":"RLP"},{"location":"RLP/#1rlp","text":"\u9012\u5f52\u957f\u5ea6\u524d\u7f00RLP(Recursive Length Prefix)\u7f16\u7801\u65b9\u6848\u662f\u5728TelChainBifereum\u4e2d\u4f7f\u7528\u7684\u4e00\u79cd\u7a7a\u95f4\u6709\u6548\u7684\u5bf9\u8c61\u5e8f\u5217\u5316\u65b9\u6848\u3002 \u89c4\u8303\u672c\u8eab\u5728 \u9ec4\u76ae\u4e66 \u4e2d\u5b9a\u4e49\uff0c\u800c\u4e0b\u9762\u7684\u9875\u9762\u5728 ethereum Wiki \u4e2d\u5b9a\u4e49\u3002","title":"1.\u9012\u5f52\u957f\u5ea6\u524d\u7f00RLP\u7f16\u7801\u65b9\u6848"},{"location":"RLP/#2rlp","text":"RLP\u7f16\u7801\u5668\u5b9a\u4e49\u4e86\u4e24\u79cd\u652f\u6301\u7c7b\u578b\uff1a string list list\u7c7b\u578b\u53ef\u4ee5\u5d4c\u5957\u4efb\u610f\u6b21\u6570\uff0c\u5141\u8bb8\u5bf9\u590d\u6742\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u7f16\u7801\u3002 go-sdk\u4e2d\u7684 RLP\u6a21\u5757 \u63d0\u4f9b\u4e86RLP\u7f16\u7801\u80fd\u529b\uff0c RlpEncoderTest \u6f14\u793a\u4e86\u8bb8\u591a\u4e0d\u540c\u7c7b\u578b\u503c\u7684\u7f16\u7801\u53ef\u4ee5\u53c2\u8003: package org.gbif.rlp; import java.math.BigInteger; import java.util.Arrays; import org.junit.Test; import static org.hamcrest.CoreMatchers.is; import static org.junit.Assert.assertThat; public class RlpEncoderTest { /** * Examples taken from https://github.com/ethereum/wiki/wiki/RLP#examples. * * <p>For further examples see https://github.com/ethereum/tests/tree/develop/RLPTests. */ @Test public void testEncode() { assertThat(RlpEncoder.encode(RlpString.create(\"dog\")), is(new byte[]{ (byte) 0x83, 'd', 'o', 'g' })); assertThat(RlpEncoder.encode(new RlpList(RlpString.create(\"cat\"), RlpString.create(\"dog\"))), is(new byte[]{ (byte) 0xc8, (byte) 0x83, 'c', 'a', 't', (byte) 0x83, 'd', 'o', 'g' })); assertThat(RlpEncoder.encode(RlpString.create(\"\")), is(new byte[]{ (byte) 0x80 })); assertThat(RlpEncoder.encode(RlpString.create(new byte[] {})), is(new byte[]{ (byte) 0x80 })); assertThat(RlpEncoder.encode(new RlpList()), is(new byte[]{ (byte) 0xc0 })); assertThat(RlpEncoder.encode(RlpString.create(BigInteger.valueOf(0x0f))), is(new byte[]{ (byte) 0x0f })); assertThat(RlpEncoder.encode(RlpString.create(BigInteger.valueOf(0x0400))), is(new byte[]{ (byte) 0x82, (byte) 0x04, (byte) 0x00 })); assertThat(RlpEncoder.encode(new RlpList( new RlpList(), new RlpList(new RlpList()), new RlpList(new RlpList(), new RlpList(new RlpList())))), is(new byte[] { (byte) 0xc7, (byte) 0xc0, (byte) 0xc1, (byte) 0xc0, (byte) 0xc3, (byte) 0xc0, (byte) 0xc1, (byte) 0xc0 })); assertThat(RlpEncoder.encode( RlpString.create(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit\")), is(new byte[] { (byte) 0xb8, (byte) 0x38, 'L', 'o', 'r', 'e', 'm', ' ', 'i', 'p', 's', 'u', 'm', ' ', 'd', 'o', 'l', 'o', 'r', ' ', 's', 'i', 't', ' ', 'a', 'm', 'e', 't', ',', ' ', 'c', 'o', 'n', 's', 'e', 'c', 't', 'e', 't', 'u', 'r', ' ', 'a', 'd', 'i', 'p', 'i', 's', 'i', 'c', 'i', 'n', 'g', ' ', 'e', 'l', 'i', 't' })); assertThat(RlpEncoder.encode(RlpString.create(BigInteger.ZERO)), is(new byte[]{ (byte) 0x80 })); // https://github.com/paritytech/parity/blob/master/util/rlp/tests/tests.rs#L239 assertThat(RlpEncoder.encode(RlpString.create(new byte[] { 0 })), is(new byte[]{ (byte) 0x00 })); assertThat(RlpEncoder.encode( new RlpList( RlpString.create(\"zw\"), new RlpList(RlpString.create(4)), RlpString.create(1))), is(new byte[]{ (byte) 0xc6, (byte) 0x82, (byte) 0x7a, (byte) 0x77, (byte) 0xc1, (byte) 0x04, (byte) 0x01})); // 55 bytes. See https://github.com/bifj/bifj/issues/519 byte[] encodeMe = new byte[55]; Arrays.fill(encodeMe, (byte) 0); byte[] expectedEncoding = new byte[56]; expectedEncoding[0] = (byte) 0xb7; System.arraycopy(encodeMe, 0, expectedEncoding, 1, encodeMe.length); assertThat(RlpEncoder.encode(RlpString.create(encodeMe)), is(expectedEncoding)); } } </p>","title":"2.RLP\u7c7b\u578b"},{"location":"RLP/#3","text":"\u5728go-sdk\u4e2d\uff0c\u4f7f\u7528RLP\u7f16\u7801\u5c06TelChain\u4ea4\u6613\u5bf9\u8c61\u7f16\u7801\u4e3a\u5b57\u8282\u6570\u7ec4\uff0c\u8be5\u5b57\u8282\u6570\u7ec4\u5728\u63d0\u4ea4\u7ed9\u7f51\u7edc\u4e4b\u524d\u88ab\u7b7e\u7f72\u3002\u4ea4\u6613\u7c7b\u578b\u548c\u7b7e\u540d\u903b\u8f91\u4f4d\u4e8e Crypto \u6a21\u5757\u5185\uff0c https://github.com/bifj/bifj/blob/master/crypto/src/test/java/org/bifj/crypto/TransactionEncoderTest.java \u63d0\u4f9b\u4ea4\u6613\u7b7e\u540d\u548c\u7f16\u7801\u7684\u793a\u4f8b\uff1a package org.gbif.crypto; import java.math.BigInteger; import java.util.List; import org.junit.Test; import org.gbif.rlp.RlpString; import org.gbif.rlp.RlpType; import org.gbif.utils.Numeric; import static org.hamcrest.CoreMatchers.is; import static org.hamcrest.core.IsEqual.equalTo; import static org.junit.Assert.assertThat; public class TransactionEncoderTest { @Test public void testSignMessage() { byte[] signedMessage = TransactionEncoder.signMessage( createBiferTransaction(), SampleKeys.CREDENTIALS); String hexMessage = Numeric.toHexString(signedMessage); assertThat(hexMessage, is(\"0xf85580010a840add5355887fffffffffffffff80\" + \"1c\" + \"a046360b50498ddf5566551ce1ce69c46c565f1f478bb0ee680caf31fbc08ab727\" + \"a01b2f1432de16d110407d544f519fc91b84c8e16d3b6ec899592d486a94974cd0\")); } @Test public void testBiferTransactionAsRlpValues() { List<rlptype> rlpStrings = TransactionEncoder.asRlpValues(createBiferTransaction(), new Sign.SignatureData((byte) 0, new byte[32], new byte[32])); assertThat(rlpStrings.size(), is(9)); assertThat(rlpStrings.get(3), equalTo(RlpString.create(new BigInteger(\"add5355\", 16)))); } @Test public void testContractAsRlpValues() { List<rlptype> rlpStrings = TransactionEncoder.asRlpValues( createContractTransaction(), null); assertThat(rlpStrings.size(), is(6)); assertThat(rlpStrings.get(3), is(RlpString.create(\"\"))); } @Test public void testEip155Encode() { assertThat(TransactionEncoder.encode(createEip155RawTransaction(), (byte) 1), is(Numeric.hexStringToByteArray( \"0xec098504a817c800825208943535353535353535353535353535353535353535880de0\" + \"b6b3a764000080018080\"))); } @Test public void testEip155Transaction() { // https://github.com/ethereum/EIPs/issues/155 Credentials credentials = Credentials.create( \"0x4646464646464646464646464646464646464646464646464646464646464646\"); assertThat(TransactionEncoder.signMessage( createEip155RawTransaction(), (byte) 1, credentials), is(Numeric.hexStringToByteArray( \"0xf86c098504a817c800825208943535353535353535353535353535353535353535880\" + \"de0b6b3a76400008025a028ef61340bd939bc2195fe537567866003e1a15d\" + \"3c71ff63e1590620aa636276a067cbe9d8997f761aecb703304b3800ccf55\" + \"5c9f3dc64214b297fb1966a3b6d83\"))); } private static RawTransaction createBiferTransaction() { return RawTransaction.createBiferTransaction( BigInteger.ZERO, BigInteger.ONE, BigInteger.TEN, \"0xadd5355\", BigInteger.valueOf(Long.MAX_VALUE)); } static RawTransaction createContractTransaction() { return RawTransaction.createContractTransaction( BigInteger.ZERO, BigInteger.ONE, BigInteger.TEN, BigInteger.valueOf(Long.MAX_VALUE), \"01234566789\"); } private static RawTransaction createEip155RawTransaction() { return RawTransaction.createBiferTransaction( BigInteger.valueOf(9), BigInteger.valueOf(20000000000L), BigInteger.valueOf(21000), \"0x3535353535353535353535353535353535353535\", BigInteger.valueOf(1000000000000000000L)); } } </rlptype></rlptype> package crypto import ( \"crypto/ecdsa\" \"encoding/hex\" \"errors\" \"github.com/btcsuite/btcutil/base58\" \"io\" \"io/ioutil\" \"math/big\" \"os\" \"strings\" \"github.com/bif/bif-sdk-go/crypto/config\" \"github.com/bif/bif-sdk-go/crypto/secp\" \"github.com/bif/bif-sdk-go/crypto/sm2\" \"github.com/bif/bif-sdk-go/utils\" \"github.com/bif/bif-sdk-go/utils/math\" ) // Keccak256 calculates and returns the Keccak256 hash of the input data. func Keccak256(cryptoType config.CryptoType, data ...[]byte) []byte { switch cryptoType { case config.SM2: return sm2.Keccak256Sm2(data...) case config.SECP256K1: return secp.Keccak256Btc(data...) default: return sm2.Keccak256Sm2(data...) } } // Keccak256Hash calculates and returns the Keccak256 hash of the input data, // converting it to an internal Hash data structure. func Keccak256Hash(cryptoType config.CryptoType, data ...[]byte) (h utils.Hash) { switch cryptoType { case config.SM2: return sm2.Keccak256HashSm2(data...) case config.SECP256K1: return secp.Keccak256HashBtc(data...) default: return sm2.Keccak256HashSm2(data...) } } // ToECDSA creates a private key with the given D value. func ToECDSA(d []byte, cryptoType config.CryptoType) (*ecdsa.PrivateKey, error) { switch cryptoType { case config.SM2: return sm2.ToECDSASm2(d, true) case config.SECP256K1: return secp.ToECDSABtc(d, true) default: return sm2.ToECDSASm2(d, true) } } // ToECDSAUnsafe blindly converts a binary blob to a private key. It should almost // never be used unless you are sure the input is valid and want to avoid hitting // errors due to bad origin encoding (0 prefixes cut off). func ToECDSAUnsafe(d []byte, cryptoType config.CryptoType) *ecdsa.PrivateKey { var priv *ecdsa.PrivateKey switch cryptoType { case config.SM2: priv, _ = sm2.ToECDSASm2(d, false) case config.SECP256K1: priv, _ = secp.ToECDSABtc(d, false) default: priv, _ = sm2.ToECDSASm2(d, false) } return priv } // FromECDSA exports a private key into a binary dump. func FromECDSA(priv *ecdsa.PrivateKey) []byte { if priv == nil { return nil } return math.PaddedBigBytes(priv.D, priv.Params().BitSize/8) } // UnmarshalPubkey converts bytes to a secp256k1 public key. func UnmarshalPubkey(pub []byte) (*ecdsa.PublicKey, error) { if pub[0] != 4 { // uncompressed form return nil, errors.New(\"invalid pub byte\") } x := new(big.Int).SetBytes(pub[1:33]) y := new(big.Int).SetBytes(pub[33:]) if sm2.S256Sm2().IsOnCurve(x, y) { return sm2.UnmarshalPubkeySm2(pub) } if secp.S256Btc().IsOnCurve(x, y) { return secp.UnmarshalPubkeyBtc(pub) } return sm2.UnmarshalPubkeySm2(pub) } func FromECDSAPub(p *ecdsa.PublicKey) []byte { if sm2.S256Sm2().IsOnCurve(p.X, p.Y) { return sm2.FromECDSAPubSm2(p) } if secp.S256Btc().IsOnCurve(p.X, p.Y) { return secp.FromECDSAPubBtc(p) } return sm2.FromECDSAPubSm2(p) } // HexToECDSA parses a secp256k1 private key. func HexToECDSA(hexkey string, cryptoType config.CryptoType) (*ecdsa.PrivateKey, error) { b, err := hex.DecodeString(hexkey) if err != nil { return nil, errors.New(\"invalid hex string\") } return ToECDSA(b, cryptoType) } // LoadECDSA loads a secp256k1 private key from the given file. func LoadECDSA(file string, cryptoType config.CryptoType) (*ecdsa.PrivateKey, error) { buf := make([]byte, 64) fd, err := os.Open(file) if err != nil { return nil, err } defer fd.Close() if _, err := io.ReadFull(fd, buf); err != nil { return nil, err } key, err := hex.DecodeString(string(buf)) if err != nil { return nil, err } return ToECDSA(key, cryptoType) } // SaveECDSA saves a secp256k1 private key to the given file with // restrictive permissions. The key data is saved hex-encoded. func SaveECDSA(file string, key *ecdsa.PrivateKey) error { k := hex.EncodeToString(FromECDSA(key)) return ioutil.WriteFile(file, []byte(k), 0600) } func GenerateKey(cryptoType config.CryptoType) (*ecdsa.PrivateKey, error) { switch cryptoType { case config.SM2: return sm2.GenerateKeySm2() case config.SECP256K1: return secp.GenerateKeyBtc() default: return sm2.GenerateKeySm2() } } func PubkeyToAddress(p ecdsa.PublicKey) utils.Address { length := config.HashLength var publicKey []byte var hash []byte var prefix strings.Builder if sm2.S256Sm2().IsOnCurve(p.X, p.Y) { publicKey = sm2.CompressPubkeySm2(&p) hash = sm2.Keccak256Sm2(publicKey) prefix.WriteString(string(config.SM2_Prefix)) } else if secp.S256Btc().IsOnCurve(p.X, p.Y) { publicKey = secp.CompressPubkeyBtc(&p) hash = secp.Keccak256Btc(publicKey) prefix.WriteString(string(config.SECP256K1_Prefix)) } else { publicKey = sm2.CompressPubkeySm2(&p) hash = sm2.Keccak256Sm2(publicKey) prefix.WriteString(string(config.SM2_Prefix)) } hashLength := len(hash) if hashLength < length { length = hashLength } h := hash[hashLength-length:] var encode string encode = base58.Encode(h) prefix.WriteString(string(config.BASE58_Prefix)) return utils.StringToAddress(prefix.String() + encode) }","title":"3.\u4ea4\u6613\u7f16\u7801"},{"location":"RLP/#4","text":"\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u8f7b\u91cf\u7ea7\u7684\u6a21\u5757\uff0c\u6ca1\u6709\u5176\u4ed6\u4f9d\u8d56\u9879\u3002","title":"4.\u4f9d\u8d56\u5173\u7cfb"},{"location":"about/","text":"\u5bc6\u7801\u5b66 \u4e00\u3001 \u57fa\u7840\u77e5\u8bc6 \u5bf9\u79f0\u52a0\u5bc6\u4e09\u8981\u7d20 \u660e\u6587plain text \u52a0\u5bc6\u7b97\u6cd5\uff1a\u52a0\u5bc6\u89c4\u5219(\u5e38\u89c1des,3des,aes) \u5bc6\u94a5\uff1a\u6839\u636e\u7b97\u6cd5\u7684\u4e0d\u540c\uff0c\u957f\u5ea6\u4e0d\u540c \u5bf9\u79f0\u89e3\u5bc6\u4e09\u8981\u7d20 \u5bc6\u6587 \u89e3\u5bc6\u7b97\u6cd5\uff1a\u53ef\u80fd\u4e0e\u52a0\u5bc6\u7b97\u6cd5\u76f8\u540c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u80fd\uff08\u5f02\u6216\u52a0\u5bc6\uff1a\u76f8\u540c\uff1b\u51ef\u6492\u5bc6\u7801\uff1a\u4e0d\u540c\uff09 \u5bc6\u94a5\uff1a\u4e0e\u52a0\u5bc6\u76f8\u540c \u52a0\u5bc6\u65b9\u5f0f\u5206\u7c7b\u53ca\u7279\u70b9 1. \u5bf9\u79f0\u52a0\u5bc6 \u5bc6\u94a5\u6570\u91cf\uff1a1\u4e2a \u7279\u70b9\uff1a \u52a0\u5bc6\u6548\u7387\u9ad8 \u53cc\u65b9\u4f7f\u7528\u7684\u5bc6\u94a5\u76f8\u540c \u5b89\u5168\u6027\uff1a \u76f8\u5bf9\u4e8e\u975e\u5bf9\u79f0\u52a0\u5bc6 \u4e0d\u5b89\u5168 \u4f7f\u7528\u60c5\u51b5\uff1a \u4e3b\u6d41\u7684\u52a0\u5bc6\u65b9\u5f0f 2. \u975e\u5bf9\u79f0\u52a0\u5bc6 \u6bcf\u4e2a\u4eba\u6709\u4e24\u628a\u94a5\u5319\uff08\u516c\u94a5\uff0c\u79c1\u94a5\uff09\uff1b\u5982\u679cA\u7ed9B\u53d1\u9001\u6d88\u606f\uff0c\u4f7f\u7528b\u7684\u516c\u94a5\u8fdb\u884c\u52a0\u5bc6\uff1bb\u7684\u516c\u94a5\u52a0\u5bc6\u7684\u4fe1\u606f\u53ea\u6709b\u7684\u79c1\u94a5\u53ef\u4ee5\u89e3\u5bc6\u3002 1. \u5bc6\u94a5\u6570\u91cf\uff1a2\u4e2a * \u516c\u94a5 * \u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u6301\u6709 * \u4e00\u822c\u7528\u4e8e\u52a0\u5bc6\u4f5c\u7528 * \u79c1\u94a5 * \u53ea\u6709\u81ea\u5df1\u6301\u6709 * \u4e00\u822c\u4e0d\u7528\u4e8e\u52a0\u5bc6\uff0c\u800c\u662f\u7528\u4e8e\u7b7e\u540d * \u7b7e\u540d\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u8bc1\u660e\u662f\u79c1\u94a5\u6301\u6709\u4eba\u53d1\u9001\u7684\u6570\u636e * \u79c1\u94a5\u7b7e\u540d\u7684\u6570\u636e\uff0c\u79c1\u94a5\u6301\u6709\u4eba\u65e0\u6cd5\u5426\u8ba4\u81ea\u5df1\u53d1\u9001\u8fc7\u8fd9\u4e2a\u6d88\u606f 2. \u7279\u70b9\uff1a * \u516c\u94a5\u52a0\u5bc6\u7684\u53ea\u6709\u81ea\u5df1\u7684\u79c1\u94a5\u80fd\u89e3\u5f00 * \u52a0\u5bc6\u3001\u89e3\u5bc6\u6548\u7387\u5f88\u4f4e\uff0c\u4e00\u822c\u4e0d\u505a\u5927\u91cf\u6570\u636e\u4f7f\u7528 3. \u5b89\u5168\u6027\uff1a\u9ad8 4. \u4f7f\u7528\u60c5\u51b5\uff1a * \u4e00\u822c\u914d\u5408\u5bf9\u79f0\u52a0\u5bc6\u4e00\u8d77\u4f7f\u7528 * \u5efa\u7acb\u8fde\u63a5\uff0c\u5148\u4f7f\u7528\u975e\u5bf9\u79f0\u52a0\u5bc6\u534f\u5546\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u548c\u5bc6\u94a5\uff0c\u7136\u540e\u4f7f\u7528\u5bf9\u79f0\u52a0\u5bc6\u8fdb\u884c\u540e\u7eed\u52a0\u89e3\u5bc6 \u52a0\u5bc6\u9886\u57df\u5e38\u8bc6 \u4e0d\u8981\u4f7f\u7528\u4fdd\u5bc6\u7684\u5bc6\u7801\u7b97\u6cd5 \u4f7f\u7528\u4f4e\u5f3a\u5ea6\u7684\u5bc6\u7801\u6bd4\u4e0d\u8fdb\u884c\u4efb\u4f55\u52a0\u5bc6\u66f4\u5371\u9669 \u4efb\u4f55\u5bc6\u7801\u603b\u6709\u4e00\u5929\u90fd\u4f1a\u88ab\u7834\u89e3==(\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u7531\u82f1\u56fd\u5b89\u5168\u5c401973\u53d1\u660e\uff0c\u540e\u7531RSA\u4e8e1977\u516c\u5f00)== \u5bc6\u7801\u53ea\u662f\u4fe1\u606f\u5b89\u5168\u7684\u4e00\u90e8\u5206\uff08\u793e\u4f1a\u5de5\u7a0b\u5b66\uff0c\u9493\u9c7c\uff09 \u8ba1\u7b97\u673a\u5355\u4f4d\u4ecb\u7ecd \u4f4d\uff1abit\uff0c0\u62161\uff0c\u6700\u5c0f\u7684\u5355\u4f4d ==\u5b57\u8282\uff1aByte\uff0c1Byte = 8bit== \u5343\u5b57\u8282\uff1aKByte\uff0c1K = 1024B\uff0c \uff08\u786c\u76d8\u91cc1K = 1000B\uff09 \u5146\u5b57\u8282\uff1aMByte\uff0c1M = 1024K = 1024B * 1024 = 1024 * 1024 * 8 bit 1 GB = 1024M = 1024K = 1024B =1024 * 8 bit 1TB = 1024GB 1PB = 1024TB ==\u5c0f\u8d34\u58eb\uff0c\u624b\u673a\u7684\u4e0b\u8f7d\u901f\u5ea6\u4e00\u822c\u662fMbit\uff0c\u8fd9\u4e2a\u901f\u5ea6\u4e0d\u662f\u6211\u4eec\u7535\u8111\u4e0a\u5e38\u8bf4\u7684\u5146\uff0c\u9700\u8981\u9664\u4ee58\u3002== \u4e8c\u3001\u7f16\u89e3\u7801\u4e0e\u52a0\u89e3\u5bc6 \u7f16\u7801\u548c\u89e3\u7801 \u7f16\u7801\uff1a\u628a\u5b57\u7b26\u8f6c\u6210\u4e8c\u8fdb\u5236\u6bd4\u7279\u6d41\u7684\u8fc7\u7a0b \u89e3\u7801\uff1a\u628a\u6bd4\u7279\u6d41\u8f6c\u6362\u6210\u53ef\u8bfb\u5b57\u7b26\u7684\u8fc7\u7a0b \u5e38\u7528\u7f16\u89e3\u7801\u65b9\u5f0f gob\u5305-\u300bgo\u5185\u7f6e\u7684\u7f16\u89e3\u7801\u5305 html\u7f16\u7801 json\u7f16\u89e3\u7801 binary\u5305-\u300bgo\u5185\u7f6e\u7684\u7f16\u89e3\u7801\u5305 \u52a0\u89e3\u5bc6 \u52a0\u89e3\u5bc6\u5c31\u662f\u5bf9\u6bd4\u7279\u6d41\u8fdb\u884c\u7f16\u89e3\u7801 \u52a0\u5bc6\uff1a\u5bf9\u660e\u6587\u7684\u6bd4\u7279\u5e8f\u5217\u8fdb\u884c\u7f16\u7801\uff0c\u5f97\u5230\u5bc6\u6587\u7684\u6bd4\u7279\u5e8f\u5217(\u5b57\u8282\u6d41) \u4e09\u3001\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u7b97\u6cd5 \u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5 1. DES\uff1aData Encryption Standard \u6982\u8ff0 DES\uff08Data Encryption Standard\uff09**\u662f1977\u5e74\u7f8e\u56fd\u8054\u90a6\u4fe1\u606f\u5904\u7406\u6807\u51c6\uff08FIPS\uff09\u4e2d\u6240\u91c7\u7528\u7684\u4e00\u79cd\u5bf9\u79f0\u5bc6\u7801\uff08FIPS46.3\uff09\u3002DES\u4e00\u76f4\u4ee5\u6765\u88ab\u7f8e\u56fd\u4ee5\u53ca\u5176\u4ed6\u56fd\u5bb6\u7684\u653f\u5e9c\u548c\u94f6\u884c\u7b49\u5e7f\u6cdb\u4f7f\u7528\u3002\u7136\u800c\uff0c\u968f\u7740\u8ba1\u7b97\u673a\u7684\u8fdb\u6b65\uff0c\u73b0\u5728DES\u5df2\u7ecf\u80fd\u591f\u88ab\u66b4\u529b\u7834\u89e3\uff0c\u5f3a\u5ea6\u5927\u4e0d\u5982\u524d\u4e86\u3002 RSA\u516c\u53f8\u4e3e\u529e\u8fc7\u7834\u6cfdDES\u5bc6\u94a5\u7684\u6bd4\u8d5b\uff08DESChallenge\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u770bRSA\u516c\u53f8\u5b98\u65b9\u516c\u5e03\u7684\u6bd4\u8d5b\u7ed3\u679c\uff1a 1997\u5e74\u7684DES Challenge1\u4e2d\u7528\u4e8696\u5929\u7834\u8bd1\u5bc6\u94a5 1998\u5e74\u7684DES ChallengeIl-I\u4e2d\u7528\u4e8641\u5929\u7834\u8bd1\u5bc6\u94a5 1998\u5e74\u7684DES ChallengeII-2\u4e2d\u7528\u4e8656\u5c0f\u65f6\u7834\u8bd1\u5bc6\u94a5 1999\u5e74\u7684DES ChallengeIll\u4e2d\u53ea\u7528\u4e8622\u5c0f\u65f615\u5206\u949f\u7834\u8bd1\u5bc6\u94a5 \u7531\u4e8eDES\u7684\u5bc6\u6587\u53ef\u4ee5\u5728\u77ed\u65f6\u95f4\u5185\u88ab\u7834\u8bd1\uff0c\u56e0\u6b64\u9664\u4e86\u7528\u5b83\u6765\u89e3\u5bc6\u4ee5\u524d\u7684\u5bc6\u6587\u4ee5\u5916\uff0c\u73b0\u5728\u6211\u4eec\u4e0d\u5e94\u8be5\u518d\u4f7f\u7528DES\u4e86\u3002 \u8865\u5145: DES\u7b97\u6cd5\u4e3a \u5bc6\u7801\u4f53\u5236 \u4e2d\u7684\u5bf9\u79f0\u5bc6\u7801\u4f53\u5236\uff0c\u53c8\u88ab\u79f0\u4e3a\u7f8e\u56fd \u6570\u636e\u52a0\u5bc6\u6807\u51c6 \uff0c\u662f1972\u5e74\u7f8e\u56fdIBM\u516c\u53f8\u7814\u5236\u7684\u5bf9\u79f0\u5bc6\u7801\u4f53\u5236 \u52a0\u5bc6\u7b97\u6cd5 \u3002 \u660e\u6587\u630964\u4f4d\u8fdb\u884c\u5206\u7ec4\uff0c \u5bc6\u94a5 \u957f64\u4f4d\uff0c\u5bc6\u94a5\u4e8b\u5b9e\u4e0a\u662f56\u4f4d\u53c2\u4e0eDES\u8fd0\u7b97\uff08\u7b2c8\u300116\u300124\u300132\u300140\u300148\u300156\u300164\u4f4d\u662f\u6821\u9a8c\u4f4d\uff0c \u4f7f\u5f97\u6bcf\u4e2a\u5bc6\u94a5\u90fd\u6709\u5947\u6570\u4e2a1\uff09\u5206\u7ec4\u540e\u7684\u660e\u6587\u7ec4\u548c56\u4f4d\u7684\u5bc6\u94a5\u6309\u4f4d\u66ff\u4ee3\u6216\u4ea4\u6362\u7684\u65b9\u6cd5\u5f62\u6210\u5bc6\u6587\u7ec4\u7684\u52a0\u5bc6\u65b9\u6cd5\u3002 \u52a0\u5bc6\u548c\u89e3\u5bc6 DES\u662f\u4e00\u79cd\u5c0664\u6bd4\u7279\u7684\u660e\u6587\u52a0\u5bc6\u621064\u6bd4\u7279\u7684\u5bc6\u6587\u7684\u5bf9\u79f0\u5bc6\u7801\u7b97\u6cd5\uff0c==\u5b83\u7684\u5bc6\u94a5\u957f\u5ea6\u662f56\u6bd4\u7279==\u3002\u5c3d\u7ba1 \u4ece\u89c4\u683c\u4e0a\u6765\u8bf4\uff0cDES\u7684\u5bc6\u94a5\u957f\u5ea6\u662f64\u6bd4\u7279\uff0c\u4f46\u7531\u4e8e\u6bcf\u96947\u6bd4\u7279\u4f1a\u8bbe\u7f6e\u4e00\u4e2a\u7528\u4e8e\u9519\u8bef\u68c0\u67e5\u7684\u6bd4\u7279\uff0c\u56e0\u6b64\u5b9e\u8d28\u4e0a\u5176\u5bc6\u94a5\u957f\u5ea6\u662f56\u6bd4\u7279 \u3002 DES\u662f\u4ee564\u6bd4\u7279\u7684\u660e\u6587\uff08\u6bd4\u7279\u5e8f\u5217\uff09\u4e3a\u4e00\u4e2a\u5355\u4f4d\u6765\u8fdb\u884c\u52a0\u5bc6\u7684 \uff0c \u8fd9\u4e2a64\u6bd4\u7279\u7684\u5355\u4f4d\u79f0\u4e3a\u5206\u7ec4 \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4ee5\u5206\u7ec4\u4e3a\u5355\u4f4d\u8fdb\u884c\u5904\u7406\u7684\u5bc6\u7801\u7b97\u6cd5\u79f0\u4e3a \u5206\u7ec4\u5bc6\u7801\uff08blockcipher\uff09 \uff0cDES\u5c31\u662f\u5206\u7ec4\u5bc6\u7801\u7684\u4e00\u79cd\u3002 DES\u6bcf\u6b21\u53ea\u80fd\u52a0\u5bc664\u6bd4\u7279\u7684\u6570\u636e\uff0c\u5982\u679c\u8981\u52a0\u5bc6\u7684\u660e\u6587\u6bd4\u8f83\u957f\uff0c\u5c31\u9700\u8981\u5bf9DES\u52a0\u5bc6\u8fdb\u884c\u8fed\u4ee3\uff08\u53cd\u590d\uff09\uff0c\u800c\u8fed\u4ee3\u7684\u5177\u4f53\u65b9\u5f0f\u5c31\u79f0\u4e3a\u6a21\u5f0f\uff08mode\uff09\u3002 \u7279\u70b9 \u4e0d\u5b89\u5168\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528 \u79d8\u94a5\uff1a8\u5b57\u8282\uff0864 - 8 = 56\u6bd4\u7279\uff0c\u6bcf\u4e03\u4e2abit\u5c31\u8bbe\u7f6e\u4e00\u4e2a\u6821\u9a8c\u4f4d\uff09 \u52a0\u5bc6\u65f6\uff0c\u4f1a\u5bf9\u660e\u6587\u8fdb\u884c\u5206\u7ec4\uff0c\u5206\u7ec4\u957f\u5ea6\u662f8bytes\uff0c\u5f97\u5230\u7684\u5bc6\u6587\u4e5f\u662f8bytes\u4e3a1\u7ec4 2. 3DES \uff1aTriple Data Encryption Standard \u6982\u8ff0 \u73b0\u5728DES\u5df2\u7ecf\u53ef\u4ee5\u5728\u73b0\u5b9e\u7684\u65f6\u95f4\u5185\u88ab\u66b4\u529b\u7834\u89e3\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u79cd\u7528\u6765\u66ff\u4ee3DES\u7684\u5206\u7ec4\u5bc6\u7801\uff0c\u4e09\u91cdDES\u5c31\u662f\u51fa\u4e8e\u8fd9\u4e2a\u76ee\u7684\u88ab\u5f00\u53d1\u51fa\u6765\u7684\u3002 \u4e09\u91cdDES\uff08triple-DES\uff09\u662f\u4e3a\u4e86\u589e\u52a0DES\u7684\u5f3a\u5ea6\uff0c==\u5c06DES\u91cd\u590d3\u6b21\u6240\u5f97\u5230\u7684\u4e00\u79cd\u5bc6\u7801\u7b97\u6cd5==\uff0c\u901a\u5e38\u7f29\u5199\u4e3a3DES \u3002 \u52a0\u5bc6\u4e0e\u89e3\u5bc6 \u4e09\u91cdDES\u7684\u52a0\u89e3\u5bc6\u673a\u5236\u5982\u56fe\u6240\u793a\uff1a \u660e\u6587\u7ecf\u8fc7\u4e09\u6b21DES\u5904\u7406\u624d\u80fd\u53d8\u6210\u6700\u540e\u7684\u5bc6\u6587\uff0c\u7531\u4e8e DES\u5bc6\u94a5\u7684\u957f\u5ea6\u5b9e\u8d28\u4e0a\u662f56\u6bd4\u7279 \uff0c\u56e0\u6b64 \u4e09\u91cdDES\u7684\u5bc6\u94a5\u957f\u5ea6\u5c31\u662f56\u00d73=168\u6bd4\u7279, \u52a0\u4e0a\u7528\u4e8e\u9519\u8bef\u68c0\u6d4b\u7684\u6807\u5fd7\u4f4d8x3, \u5171192bit \u3002 \u4ece\u4e0a\u56fe\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e09\u91cdDES\u5e76\u4e0d\u662f\u8fdb\u884c\u4e09\u6b21DES\u52a0\u5bc6\uff08\u52a0\u5bc6-->\u52a0\u5bc6-->\u52a0\u5bc6\uff09\uff0c\u800c\u662f \u52a0\u5bc6-->\u89e3\u5bc6-->\u52a0\u5bc6 \u7684\u8fc7\u7a0b\u3002\u5728\u52a0\u5bc6\u7b97\u6cd5\u4e2d\u52a0\u4eba\u89e3\u5bc6\u64cd\u4f5c\u8ba9\u4eba\u611f\u89c9\u5f88\u4e0d\u53ef\u601d\u8bae\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u65b9\u6cd5\u662fIBM\u516c\u53f8\u8bbe\u8ba1\u51fa\u6765\u7684\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u8ba9\u4e09\u91cdDES\u80fd\u591f\u517c\u5bb9\u666e\u901a\u7684DES\u3002 \u5f53\u4e09\u91cdDES\u4e2d\u6240\u6709\u7684\u5bc6\u94a5\u90fd\u76f8\u540c\u65f6\uff0c\u4e09\u91cdDES\u4e5f\u5c31\u7b49\u540c\u4e8e\u666e\u901a\u7684DES\u4e86 \u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u524d\u4e24\u6b65\u52a0\u5bc6-->\u89e3\u5bc6\u4e4b\u540e\uff0c\u5f97\u5230\u7684\u5c31\u662f\u6700\u521d\u7684\u660e\u6587\u3002\u56e0\u6b64\uff0c\u4ee5\u524d\u7528DES\u52a0\u5bc6\u7684\u5bc6\u6587\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u7528\u4e09\u91cdDES\u6765\u8fdb\u884c\u89e3\u5bc6\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e09\u91cdDES\u5bf9DES\u5177\u5907\u5411\u4e0b\u517c\u5bb9\u6027\u3002 \u5982\u679c\u5bc6\u94a51\u548c\u5bc6\u94a53\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u94a5\uff0c\u800c\u5bc6\u94a52\u4f7f\u7528\u4e0d\u540c\u7684\u5bc6\u94a5\uff08\u4e5f\u5c31\u662f\u53ea\u4f7f\u7528\u4e24\u4e2aDES\u5bc6\u94a5\uff09\uff0c\u8fd9\u79cd\u4e09\u91cdDES\u5c31\u79f0\u4e3aDES-EDE2\u3002EDE\u8868\u793a\u7684\u662f\u52a0\u5bc6\uff08Encryption) -->\u89e3\u5bc6\uff08Decryption)-->\u52a0\u5bc6\uff08Encryption\uff09\u8fd9\u4e2a\u6d41\u7a0b\u3002 \u5bc6\u94a51\u3001\u5bc6\u94a52\u3001\u5bc6\u94a53\u5168\u90e8\u4f7f\u7528\u4e0d\u540c\u7684\u6bd4\u7279\u5e8f\u5217\u7684\u4e09\u91cdDES\u79f0\u4e3aDES-EDE3\u3002 \u5c3d\u7ba1\u4e09\u91cdDES\u76ee\u524d\u8fd8\u88ab\u94f6\u884c\u7b49\u673a\u6784\u4f7f\u7528\uff0c\u4f46\u5176\u5904\u7406\u901f\u5ea6\u4e0d\u9ad8\uff0c\u800c\u4e14\u5728\u5b89\u5168\u6027\u65b9\u9762\u4e5f\u9010\u6e10\u663e\u73b0\u51fa\u4e86\u4e00\u4e9b\u95ee\u9898\u3002 \u7279\u70b9 \u52a0\u5bc6\u8fc7\u7a0b\uff1a \u52a0\u5bc6 -\u300b \u89e3\u5bc6-\u300b \u52a0\u5bc6 \u4e2d\u95f4\u4f7f\u7528\u89e3\u5bc6\u7684\u539f\u56e0\u662f\u4e3a\u4e86\u517c\u5bb9\u4ee5\u524d\u7684DES \u89e3\u5bc6\u8fc7\u7a0b\u662f\u4ee5\u89e3\u5bc6\u7684\u65b9\u5f0f\u8fdb\u884c\u52a0\u5bc6\uff0c\u6574\u4f53\u8fd8\u662f\u4e09\u6b21\u52a0\u5bc6 \u79d8\u94a5\uff1a8bytes * 3 = 24bytes\uff0c =\u300b24 * 8 = 192bit \u6570\u636e\u5206\u7ec4\u957f\u5ea6\uff1a\u4e0eDES\u76f8\u540c\uff0c8bytes\uff0864\u6bd4\u7279\uff09 \u52a0\u89e3\u5bc6\u6548\u7387\u4f4e\uff08\u8fc7\u6e21\u7684\u52a0\u5bc6\u7b97\u6cd5\uff09 \u5c11\u7528 \u89e3\u5bc6\u8fc7\u7a0b\uff1a\u89e3\u5bc6 -\u300b \u52a0\u5bc6 -\u300b \u89e3\u5bc6 3\u4e2a\u5bc6\u94a5 \u5982\u679c\u5bc6\u94a51\u4e0e\u5bc6\u94a52\u76f8\u540c\uff0c\u6216\u80052\u4e0e3\u76f8\u540c\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8eDES\uff0c\u4e0e\u524d\u9762\u517c\u5bb9 \u5982\u679c1\u4e0e3\u76f8\u540c\uff0c\u76f8\u5f53\u4e8e\u6709\u4e24\u4e2a\u5bc6\u94a5\uff0c\u4e13\u4e1a\u540d\u5b57\uff1a3DES-EDE2 \u5982\u679c\u4e09\u4e2a\u5bc6\u94a5\u90fd\u4e0d\u76f8\u540c\uff0c\u4e13\u4e1a\u540d\u5b57\uff1a3DES-EDE3 3. AES\uff1aAdvance Encryption Standard \u6982\u8ff0 AES\uff08Advanced Encryption Standard\uff09\u662f\u53d6\u4ee3\u5176\u524d\u4efb\u6807\u51c6\uff08DES\uff09\u800c\u6210\u4e3a\u65b0\u6807\u51c6\u7684\u4e00\u79cd\u5bf9\u79f0\u5bc6\u7801\u7b97\u6cd5\u3002\u5168\u4e16\u754c\u7684\u4f01\u4e1a\u548c\u5bc6\u7801\u5b66\u5bb6\u63d0\u4ea4\u4e86\u591a\u4e2a\u5bf9\u79f0\u5bc6\u7801\u7b97\u6cd5\u4f5c\u4e3aAES\u7684\u5019\u9009\uff0c\u6700\u7ec8\u57282000\u5e74\u4ece\u8fd9\u4e9b\u5019\u9009\u7b97\u6cd5\u4e2d\u9009\u51fa\u4e86\u4e00\u79cd\u540d\u4e3a== Rijndael ==\u7684\u5bf9\u79f0\u5bc6\u7801\u7b97\u6cd5\uff0c\u5e76\u5c06\u5176\u786e\u5b9a\u4e3a\u4e86AES\u3002 Rijndael\u662f\u7531\u6bd4\u5229\u65f6\u5bc6\u7801\u5b66\u5bb6Joan Daemen\u548cVincent Rijmen\u8bbe\u6c41\u7684\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\uff0c\u4eca\u540e\u4f1a\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u5bc6\u7801\u8f6f\u4ef6\u652f\u6301\u8fd9\u79cd\u7b97\u6cd5\u3002 ==Rijndael\u7684\u5206\u7ec4\u957f\u5ea6\u4e3a128\u6bd4\u7279== \uff0c\u5bc6\u94a5\u957f\u5ea6\u53ef\u4ee5\u4ee532\u6bd4\u7279\u4e3a\u5355\u4f4d\u5728128\u6bd4\u7279\u5230256\u6bd4\u7279\u7684\u8303\u56f4\u5185\u8fdb\u884c\u9009\u62e9\uff08\u4e0d\u8fc7== \u5728AES\u7684\u89c4\u683c\u4e2d\uff0c\u5bc6\u94a5\u957f\u5ea6\u53ea\u6709128\u3001192\u548c256\u6bd4\u7279\u4e09\u79cd ==\uff09\u3002 \u7279\u70b9\uff1a \u79d8\u94a5\u957f\u5ea6\uff1a\u53ef\u9009\u7684\uff0c16bytes, 24bytes, 32bytes\uff0c \uff08des\uff1a8bytes, 3des: 24bytes\uff09 \u5206\u7ec4\u957f\u5ea6\uff1a16bytes\uff0c \uff08des\u5408\u7ea63des:8bytes\uff09 \u52a0\u89e3\u5bc6\u6548\u7387\u9ad8\uff0c\u63a8\u8350\u4f7f\u7528 4. \u5c0f\u7ed3 1. \u5bf9\u79f0\u52a0\u5bc6\u7279\u70b9 \u52a0\u5bc6\u4e0e\u89e3\u5bc6\u4f7f\u7528\u7684\u5bc6\u94a5\u76f8\u540c\u3002 \u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5b9e\u73b0\u4e86\u6570\u636e\u7684\u673a\u5bc6\u6027\uff0c\u4e14\u7b80\u5355\u3001\u5feb\u901f\u3002 \u4f46\u662f\u7531\u4e8e\u7b97\u6cd5\u4e00\u822c\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64\u673a\u5bc6\u6027\u51e0\u4e4e\u5b8c\u5168\u4f9d\u8d56\u4e8e\u5bc6\u94a5\u3002 \u540c\u4e00\u53d1\u9001\u65b9\u4e0e\u4e0d\u540c\u63a5\u6536\u65b9\u8fdb\u884c\u901a\u4fe1\u65f6\u5e94\u4f7f\u7528\u4e0d\u540c\u7684\u5bc6\u94a5(1 -> n)\uff0c\u9632\u6b62\u6570\u636e\u88ab\u7a83\u542c\u6216\u62e6\u622a\u540e\u88ab\u89e3\u5bc6\u3002 2. \u7262\u8bb0\u77e5\u8bc6\u70b9 DES \uff1a key -\u300b8\u5b57\u8282\uff0c \u5206\u7ec4-\u300b8\u5b57\u8282 3DES\uff1akey-\u300b24\u5b57\u8282\uff0c \u5206\u7ec4-\u300b8\u5b57\u8282 AES\uff1akey-\u300b16\u5b57\u8282\uff08128\uff09\uff0c24\u5b57\u8282\uff08192\uff09\uff0c32\u5b57\u8282\uff08256\uff09\uff0c \u5206\u7ec4-\u300b16\u5b57\u8282 \u6a21\u5f0f\uff1a \u5bf9\u4e8e\u9700\u8981\u586b\u5145\u7684\u6a21\u5f0f\uff0c\u8981\u6309\u7167\u5206\u7ec4\u957f\u5ea6\u6765\u586b\u5145 \u5bf9\u4e8e\u9700\u8981iv\u5411\u91cf\u7684\uff0civ\u7684\u957f\u5ea6\u8981\u4e0e\u5206\u7ec4\u4e00\u81f4 3. \u5b58\u5728\u95ee\u9898 \u5f53\u9700\u8981\u52a0\u5bc6\u7684\u660e\u6587\u957f\u5ea6\u8d85\u8fc7\u5206\u7ec4\u957f\u5ea6\u65f6\uff0c\u5982\u4f55\u52a0\u5bc6\uff1f \u7528\u5bf9\u79f0\u5bc6\u7801\u8fdb\u884c\u901a\u4fe1\u65f6\uff0c\u8fd8\u4f1a\u51fa\u73b0\u5bc6\u94a5\u7684\u914d\u9001\u95ee\u9898\uff0c\u5373\u5982\u4f55\u5c06\u5bc6\u94a5\u5b89\u5168\u5730\u53d1\u9001\u7ed9\u63a5\u6536\u8005\uff1f \u5206\u7ec4\u6a21\u5f0f 1. \u57fa\u672c\u77e5\u8bc6 \u4e3a\u4ec0\u4e48\u8981\u5206\u7ec4\uff1f \u88ab\u52a0\u5bc6\u7684\u6570\u636e\u53ef\u4ee5\u5f88\u5927\uff0c\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u8fed\u4ee3\u7684\u52a0\u5bc6\uff0c\u6240\u4ee5\u7528\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7ec4 \u6982\u8ff0 \"\u5206\u7ec4\u5bc6\u7801\u7684\u6a21\u5f0f -- \u5206\u7ec4\u5bc6\u7801\u662f\u5982\u4f55\u8fed\u4ee3\u7684\" \u672c\u7ae0\u4e2d\u6211\u4eec\u5c06\u63a2\u8ba8\u4e00\u4e0b\u5206\u7ec4\u5bc6\u7801\u7684\u6a21\u5f0f \u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u7684DES\u548cAES\u90fd\u5c5e\u4e8e\u5206\u7ec4\u5bc6\u7801\uff0c\u5b83\u4eec\u53ea\u80fd\u52a0\u5bc6\u56fa\u5b9a\u957f\u5ea6\u7684\u660e\u6587\u3002\u5982\u679c\u9700\u8981\u52a0\u5bc6\u4efb\u610f\u957f\u5ea6\u7684\u660e\u6587\uff0c\u5c31\u9700\u8981\u5bf9\u5206\u7ec4\u5bc6\u7801\u8fdb\u884c\u8fed\u4ee3\uff0c\u800c\u5206\u7ec4\u5bc6\u7801\u7684\u8fed\u4ee3\u65b9\u6cd5\u5c31\u79f0\u4e3a\u5206\u7ec4\u5bc6\u7801\u7684\u201c\u6a21\u5f0f\u201d\u3002 \u5206\u7ec4\u5bc6\u7801\u6709\u5f88\u591a\u79cd\u6a21\u5f0f\uff0c\u5982\u679c\u6a21\u5f0f\u7684\u9009\u62e9\u4e0d\u6070\u5f53\uff0c\u5c31\u65e0\u6cd5\u4fdd\u8bc1\u673a\u5bc6\u6027\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f7f\u7528ECB\u6a21\u5f0f\uff0c\u660e\u6587\u4e2d\u7684\u4e00\u4e9b\u89c4\u5f8b\u5c31\u53ef\u4ee5\u901a\u8fc7\u5bc6\u6587\u88ab\u8bc6\u522b\u51fa\u6765\u3002 \u5206\u7ec4\u5bc6\u7801\u7684\u4e3b\u8981\u6a21\u5f0f\uff08ECB\u3001CBC\u3001CFB\u3001OFB\u3001CTR\uff09\uff0c\u6700\u540e\u518d\u6765\u8003\u5bdf\u4e00\u4e0b\u5230\u5e95\u5e94\u8be5\u4f7f\u7528\u54ea\u4e00\u79cd\u6a21\u5f0f\u3002 \u5206\u7ec4\u5bc6\u7801 \u5206\u7ec4\u5bc6\u7801\uff08blockcipher\uff09 \u662f\u6bcf\u6b21\u53ea\u80fd\u5904\u7406\u7279\u5b9a\u957f\u5ea6\u7684\u4e00\u5757\u6570\u636e\u7684\u4e00\u7c7b\u5bc6\u7801\u7b97\u6cd5\uff0c\u8fd9\u91cc\u7684\u4e00\u5757\"\u5c31\u79f0\u4e3a\u5206\u7ec4\uff08block\uff09\u3002\u6b64\u5916\uff0c\u4e00\u4e2a\u5206\u7ec4\u7684\u6bd4\u7279\u6570\u5c31\u79f0\u4e3a\u5206\u7ec4\u957f\u5ea6\uff08blocklength\uff09\u3002 \u4f8b\u5982\uff0c DES\u548c\u4e09\u91cdDES\u7684\u5206\u7ec4\u957f\u5ea6\u90fd\u662f64\u6bd4\u7279 \u3002\u8fd9\u4e9b\u5bc6\u7801\u7b97\u6cd5\u4e00\u6b21\u53ea\u80fd\u52a0\u5bc664\u6bd4\u7279\u7684\u660e\u6587\uff0e\u5e76\u751f\u621064\u6bd4\u7279\u7684\u5bc6\u6587\u3002 AES\u7684\u5206\u7ec4\u957f\u5ea6\u53ef\u4ee5\u4ece128\u6bd4\u7279\u3001192\u6bd4\u7279\u548c256\u6bd4\u7279\u4e2d\u8fdb\u884c\u9009\u62e9\u3002\u5f53\u9009\u62e9128\u6bd4\u7279\u7684\u5206\u7ec4\u957f\u5ea6\u65f6\uff0cAES\u4e00\u6b21\u53ef\u52a0\u5bc6128\u6bd4\u7279\u7684\u660e\u6587\uff0c\u5e76\u751f\u6210128\u6bd4\u7279\u7684\u5bc6\u6587\u3002 \u6a21\u5f0f \u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u53ea\u80fd\u52a0\u5bc6\u56fa\u5b9a\u957f\u5ea6\u7684\u5206\u7ec4\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u52a0\u5bc6\u7684\u660e\u6587\u957f\u5ea6\u53ef\u80fd\u4f1a\u8d85\u8fc7\u5206\u7ec4\u5bc6\u7801\u7684\u5206\u7ec4\u957f\u5ea6\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u5bf9\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u8fdb\u884c\u8fed\u4ee3\uff0c\u4ee5\u4fbf\u5c06\u4e00\u6bb5\u5f88\u957f\u7684\u660e\u6587\u5168\u90e8\u52a0\u5bc6\u3002\u800c\u8fed\u4ee3\u7684\u65b9\u6cd5\u5c31\u79f0\u4e3a\u5206\u7ec4\u5bc6\u7801\u7684\u6a21\u5f0f\uff08mode\uff09 \u3002 \u8bdd\u8bf4\u5230\u8fd9\u91cc\uff0c\u5f88\u591a\u8bfb\u8005\u53ef\u80fd\u4f1a\u8bf4\uff1a\u201c\u5982\u679c\u660e\u6587\u5f88\u957f\u7684\u8bdd\uff0c\u5c06\u660e\u6587\u5206\u5272\u6210\u82e5\u5e72\u4e2a\u5206\u7ec4\u518d\u9010\u4e2a\u52a0\u5bc6\u4e0d\u5c31\u597d\u4e86\u5417\uff1f\u201d\u4e8b\u5b9e\u4e0a\u53ef\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\u3002\u5c06\u660e\u6587\u5206\u5272\u6210\u591a\u4e2a\u5206\u7ec4\u5e76\u9010\u4e2a\u52a0\u5bc6\u7684\u65b9\u6cd5\u79f0\u4e3aECB\u6a21\u5f0f\uff0c\u8fd9\u79cd\u6a21\u5f0f\u5177\u6709\u5f88\u5927\u7684\u5f31\u70b9\uff08\u7a0d\u540e\u8bb2\u89e3\uff09\u3002\u5bf9\u5bc6\u7801\u4e0d\u662f\u5f88\u4e86\u89e3\u7684\u7a0b\u5e8f\u5458\u5728\u7f16\u5199\u52a0\u5bc6\u8f6f\u4ef6\u65f6\u7ecf\u5e38\u4f1a\u4f7f\u7528ECB\u6a21\u5f0f\uff0c\u4f46\u8fd9\u6837\u505a\u4f1a\u5728\u4e0d\u7ecf\u610f\u95f4\u4ea7\u751f\u5b89\u5168\u6f0f\u6d1e\uff0c \u56e0\u6b64\u5927\u5bb6\u8981\u8bb0\u4f4f\u5343\u4e07\u4e0d\u80fd\u4f7f\u7528ECB\u6a21\u5f0f \u3002 \u6a21\u5f0f\u6709\u5f88\u591a\u79cd\u7c7b\uff0c\u5206\u7ec4\u5bc6\u7801\u7684\u4e3b\u8981\u6a21\u5f0f\u6709\u4ee5\u4e0b5\u79cd\uff1a ECB\u6a21\u5f0f \uff1aElectronic Code Book mode\uff08\u7535\u5b50\u5bc6\u7801\u672c\u6a21\u5f0f\uff09 \u4e0d\u9002\u7528 \u6dd8\u6c70 CBC\u6a21\u5f0f \uff1aCipher Block Chaining mode\uff08\u5bc6\u6587\u5206\u7ec4\u94fe\u63a5\u6a21\u5f0f\uff09 \u5e38\u7528 CFB\u6a21\u5f0f \uff1aCipher FeedBack mode\uff08\u5bc6\u6587\u53cd\u9988\u6a21\u5f0f\uff09 \u652f\u6301\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528 OFB\u6a21\u5f0f \uff1aOutput FeedBack mode\uff08\u8f93\u51fa\u53cd\u9988\u6a21\u5f0f\uff09 \u652f\u6301\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528 CTR\u6a21\u5f0f \uff1aCounTeR mode\uff08\u8ba1\u6570\u5668\u6a21\u5f0f\uff09 \u5e38\u7528 \u660e\u6587\u5206\u7ec4\u548c\u5bc6\u6587\u5206\u7ec4 \u5728\u4ecb\u7ecd\u6a21\u5f0f\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u5b66\u4e60\u4e24\u4e2a\u672f\u8bed\u3002 \u660e\u6587\u5206\u7ec4: \u662f\u6307\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u4e2d\u4f5c\u4e3a\u52a0\u5bc6\u5bf9\u8c61\u7684\u660e\u6587\u3002\u660e\u6587\u5206\u7ec4\u7684\u957f\u5ea6\u4e0e\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u7684\u5206\u7ec4\u957f\u5ea6\u662f\u76f8\u7b49\u7684\u3002 \u5bc6\u6587\u5206\u7ec4: \u662f\u6307\u4f7f\u7528\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u5c06\u660e\u6587\u5206\u7ec4\u52a0\u5bc6\u4e4b\u540e\u6240\u751f\u6210\u7684\u5bc6\u6587\u3002 \u5bc6\u6587\u5206\u7ec4\u7684\u957f\u5ea6\u4e0e\u660e\u6587\u5206\u7ec4\u4e00\u81f4 \u52a0\u5bc6\u7b97\u6cd5\u548c\u5206\u7ec4\u6a21\u5f0f\u7684\u5173\u7cfb 2. ECB\u6a21\u5f0f ECB(Electronic Code Book, \u7535\u5b50\u5bc6\u7801\u672c)\u6a21\u5f0f\u662f\u6700\u7b80\u5355\u7684\u52a0\u5bc6\u6a21\u5f0f\uff0c \u660e\u6587\u6d88\u606f\u88ab\u5206\u6210\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\uff08\u5206\u7ec4\uff09\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5757\u88ab\u5355\u72ec\u52a0\u5bc6\u3002 \u6bcf\u4e2a\u5757\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u4e14\u4f7f\u7528\u76f8\u540c\u7684\u65b9\u6cd5\u8fdb\u884c\u52a0\u5bc6\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u884c\u5e76\u884c\u8ba1\u7b97\uff0c==\u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u4e00\u65e6\u6709\u4e00\u4e2a\u5757\u88ab\u7834\u89e3\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u5bc6\u6240\u6709\u7684\u660e\u6587\u6570\u636e==\uff0c \u7279\u70b9\uff1a \u5b89\u5168\u6027\u6bd4\u8f83\u5dee\u3002 \u9002\u7528\u4e8e\u6570\u636e\u8f83\u5c11\u7684\u60c5\u5f62\uff0c\u52a0\u5bc6\u524d\u9700\u8981\u628a\u660e\u6587\u6570\u636e\u586b\u5145\u5230\u5757\u5927\u5c0f\u7684\u6574\u500d\u6570\u3002 \u52a0\u5bc6\u6548\u679c \u7279\u70b9\uff1a \u52a0\u5bc6\u6548\u7387\u9ad8\uff0c\u4f46\u662f\u4e0d\u5b89\u5168\uff0c\u52a0\u5bc6\u4e0d\u5f7b\u5e95 \u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7ec4\u540e\u505a\u6570\u636e\u586b\u5145 \u6bcf\u4e00\u4e2a\u5206\u7ec4\u72ec\u7acb\u7684\u8fdb\u884c\u52a0\u89e3\u5bc6 \u53ea\u8981\u6709\u4e00\u4e2a\u5206\u7ec4\u88ab\u7834\u89e3\uff0c\u6240\u6709\u7684\u5206\u7ec4\u90fd\u88ab\u7834\u89e3 \u4e0d\u7528\u4f7f\u7528\uff0cgo\u8bed\u8a00\u6ca1\u6709\u652f\u6301\u8fd9\u79cd\u5206\u7ec4\u6a21\u5f0f \u5206\u7ec4\u957f\u5ea6\u7531\u52a0\u5bc6\u7b97\u6cd5\u51b3\u5b9a\uff08DES\uff1a8bytes, AES: 16bytes\uff09 3. CBC\u6a21\u5f0f \u57fa\u7840\u8865\u5145 \u6309\u4f4d\u64cd\u4f5c\u7b26\u53f7 \u903b\u8f91\u64cd\u4f5c\u7b26\u53f7 \u4e0e & && \u6216 | || \u975e ~ \uff01 \u5f02\u6216 ^ \u65e0 A & B\uff0c \u6309\u4f4d\u4e0e 0000\uff0c 1000 => 8 0000\uff0c 1001 =>9 & \u6709\u4e00\u4e2a\u4e3a0\u5219\u4e3a0 0000\uff0c 1000 => 8 \u903b\u8f91\u4e0e\uff1aA && B ==> AND if (c == 0 && a == b) { fmt.print(\"hello world\") } \u6216 A | B\uff0c \u6309\u4f4d\u6216 0000\uff0c 1000 => 8 0000\uff0c 1001 => 9 | \u6709\u4e00\u4e2a\u4e3a1\u5219\u4e3a1 0000\uff0c 1001 => 9 \u903b\u8f91\u6216\uff1aA || B ==> OR if (c == 0 || a == b) { } \u5f02\u6216\uff1a==\u89c4\u5219\uff1a\u76f8\u540c\u4e3a0\uff0c\u4e0d\u540c\u4e3a1\uff0c \uff08\u540c\u9f84\u4eba\uff09== A\u2295B\uff0c \u5f02\u6216\u64cd\u4f5c 0000\uff0c 1000 =\u300b 8 0000\uff0c 1001 =\u300b9 \u2295 0000\uff0c 0001 =\u300b 1 \u5f02\u6216\u52a0\u5bc6\u89e3\u5bc6 \u52a0\u5bc6\u8fc7\u7a0b\uff1a 0000\uff0c 1000 =\u300b 8 ====> \u660e\u6587 0000\uff0c 1001 =\u300b9 ====> \u79d8\u94a5 \u200b \u2295 =\u300b \u7b97\u6cd5 0000\uff0c 0001 =\u300b 1 =\u300b\u5bc6\u6587 \u89e3\u5bc6\u8fc7\u7a0b\uff1a 0000\uff0c 0001 =\u300b 1 =\u300b\u5bc6\u6587 0000\uff0c 1001 =\u300b9 ====> \u79d8\u94a5 \u200b \u2295 =\u300b \u7b97\u6cd5 0000\uff0c1000 =\u300b8 =\u300b\u660e\u6587 CBC-\u5bc6\u6587\u5206\u7ec4\u94fe\u63a5\u6a21\u5f0f \uff08\u5148\u5f02\u6216\u518d\u52a0\u5bc6\uff09 CBC(Cipher Block Chaining, \u5bc6\u6587\u5206\u7ec4\u94fe\u63a5) \u6a21\u5f0f\u4e2d\u6bcf\u4e00\u4e2a\u5206\u7ec4\u8981\u5148\u548c\u524d\u4e00\u4e2a\u5206\u7ec4\u52a0\u5bc6\u540e\u7684\u6570\u636e\u8fdb\u884cXOR\u5f02\u6216\u64cd\u4f5c\uff0c\u7136\u540e\u518d\u8fdb\u884c\u52a0\u5bc6 \u3002 \u8fd9\u6837\u6bcf\u4e2a\u5bc6\u6587\u5757\u4f9d\u8d56\u8be5\u5757\u4e4b\u524d\u7684\u6240\u6709\u660e\u6587\u5757\uff0c\u4e3a\u4e86\u4fdd\u6301\u6bcf\u6761\u6d88\u606f\u90fd\u5177\u6709\u552f\u4e00\u6027\uff0c \u7b2c\u4e00\u4e2a\u6570\u636e\u5757\u8fdb\u884c\u52a0\u5bc6\u4e4b\u524d\u9700\u8981\u7528\u521d\u59cb\u5316\u5411\u91cfIV\u8fdb\u884c\u5f02\u6216\u64cd\u4f5c \u3002 CBC\u6a21\u5f0f\u662f\u4e00\u79cd\u6700\u5e38\u7528\u7684\u52a0\u5bc6\u6a21\u5f0f\uff0c\u5b83\u4e3b\u8981\u7f3a\u70b9\u662f\u52a0\u5bc6\u662f\u8fde\u7eed\u7684\uff0c\u4e0d\u80fd\u5e76\u884c\u5904\u7406\uff0c\u5e76\u4e14\u4e0eECB\u4e00\u6837\u6d88\u606f\u5757\u5fc5\u987b\u586b\u5145\u5230\u5757\u5927\u5c0f\u7684\u6574\u500d\u6570\u3002 \u7279\u70b9\uff1a \u6570\u636e\u5206\u7ec4\u957f\u5ea6\u6839\u636e\u7b97\u6cd5\u800c\u5b9a \u9700\u8981\u63d0\u4f9b\u521d\u59cb\u5316\u5411\u91cf\uff08Initialize Vector\uff09\uff0c\u8981\u6c42\u957f\u5ea6\u5fc5\u987b\u4e0e\u5206\u7ec4\u957f\u5ea6\u76f8\u540c \u6bcf\u4e00\u4e2a\u5bc6\u6587\u90fd\u662f\u4e0b\u4e00\u6b21\u52a0\u5bc6\u64cd\u4f5c\u7684\u8f93\u5165 \u4e0d\u80fd\u591f\u5e76\u884c\u52a0\u5bc6\uff0c\u53ef\u4ee5\u5e76\u884c\u89e3\u5bc6 \u52a0\u5bc6\u5f3a\u5ea6\u9ad8 \u5982\u679c\u6570\u636e\u5207\u5272\u540e\u957f\u5ea6\u4e0d\u6ee1\u8db3\u9700\u6c42\uff0c\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u586b\u5145\u3002 ECB\u4e0eCBC\u6a21\u5f0f\u7684\u6bd4\u8f83 4. CFB \u6a21\u5f0f\uff08\u5148\u52a0\u5bc6\u518d\u5f02\u6216\uff09 CFB\u6a21\u5f0f\u7684\u5168\u79f0\u662fCipher FeedBack\u6a21\u5f0f\uff08\u5bc6\u6587\u53cd\u9988\u6a21\u5f0f\uff09\u3002\u5728CFB\u6a21\u5f0f\u4e2d\uff0c \u524d\u4e00\u4e2a\u5206\u7ec4\u7684\u5bc6\u6587\u52a0\u5bc6\u540e\u548c\u5f53\u524d\u5206\u7ec4\u7684\u660e\u6587XOR\u5f02\u6216\u64cd\u4f5c\u751f\u6210\u5f53\u524d\u5206\u7ec4\u7684\u5bc6\u6587 \u3002 \u6240\u8c13\u53cd\u9988\uff0c\u8fd9\u91cc\u6307\u7684\u5c31\u662f\u8fd4\u56de\u8f93\u5165\u7aef\u7684\u610f\u601d\uff0c\u5373\u524d\u4e00\u4e2a\u5bc6\u6587\u5206\u7ec4\u4f1a\u88ab\u9001\u56de\u5230\u5bc6\u7801\u7b97\u6cd5\u7684\u8f93\u5165\u7aef\u3002 CFB\u6a21\u5f0f\u7684\u89e3\u5bc6\u548cCBC\u6a21\u5f0f\u7684\u52a0\u5bc6\u5728\u6d41\u7a0b\u4e0a\u5176\u5b9e\u662f\u975e\u5e38\u76f8\u4f3c\u7684\u3002 \u7279\u70b9\uff1a \u5206\u7ec4\u957f\u5ea6\u53d6\u51b3\u4e8e\u52a0\u5bc6\u7b97\u6cd5\u3002 \u9700\u8981\u521d\u59cb\u5316\u5411\u91cf\uff0c\u957f\u5ea6\u5fc5\u987b\u4e0e\u660e\u6587\u5206\u7ec4\u76f8\u540c\u3002 \u5148\u5bf9\u5bc6\u6587\u8fdb\u884c\u52a0\u5bc6\uff0c\u7136\u540e\u518d\u4e0e\u660e\u6587\u5206\u7ec4\u8fdb\u884c\u5f02\u6216\u3002\uff08CBC\u662f\u5148\u5f02\u6216\uff0c\u518d\u52a0\u5bc6\uff09 ==\u7531\u4e8e\u6ca1\u6709\u76f4\u63a5\u5bf9\u660e\u6587\u5206\u7ec4\u8fdb\u884c\u52a0\u5bc6\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u586b\u5145== \u6ce8\u610f\uff0c\u89e3\u5bc6\u7684\u65f6\u5019\uff0c\u662f\u5bf9\u521d\u59cb\u5411\u91cf\u8fdb\u884c\u52a0\u5bc6\u64cd\u4f5c\uff0c\u8fd9\u6837\u624d\u80fd\u5f97\u5230\u540c\u6837\u7684\u6570\u636e CBC\u4e0eCFB\u6bd4\u8f83 5. OFB OFB\u5f0f\u7684\u5168\u79f0\u662fOutput-Feedback\u6a21\u5f0f\uff08\u8f93\u51fa\u53cd\u9988\u6a21\u5f0f\uff09\u3002\u5728OFB\u6a21\u5f0f\u4e2d\uff0c\u5bc6\u7801\u7b97\u6cd5\u7684\u8f93\u51fa\u4f1a\u53cd\u9988\u5230\u5bc6\u7801\u7b97\u6cd5\u7684\u8f93\u5165\u4e2d\uff0c \u5373\u4e0a\u4e00\u4e2a\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u7684\u8f93\u51fa\u662f\u5f53\u524d\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u7684\u8f93\u5165\uff08\u4e0b\u56fe\uff09\u3002 OFB\u6a21\u5f0f\u5e76\u4e0d\u662f\u901a\u8fc7\u5bc6\u7801\u7b97\u6cd5\u5bf9\u660e\u6587\u76f4\u63a5\u8fdb\u884c\u52a0\u5bc6\u7684\uff0c\u800c\u662f\u901a\u8fc7\u5c06 \u201c\u660e\u6587\u5206\u7ec4\" \u548c \u201c\u5bc6\u7801\u7b97\u6cd5\u7684\u8f93\u51fa\u201d \u8fdb\u884cXOR\u6765\u4ea7\u751f \u201c\u5bc6\u6587\u5206\u7ec4\u201d \u7684\uff0c\u5728\u8fd9\u4e00\u70b9\u4e0aOFB\u6a21\u5f0f\u548cCFB\u6a21\u5f0f\u975e\u5e38\u76f8\u4f3c\u3002 \u7279\u70b9\uff1a \u5206\u7ec4\u957f\u5ea6\u53d6\u51b3\u4e8e\u52a0\u5bc6\u7b97\u6cd5 \u4e0d\u65ad\u5bf9\u521d\u59cb\u5411\u91cf\u7684\u8f93\u51fa\u8fdb\u884c\u52a0\u5bc6\uff0c\u4ece\u800c\u5f97\u5230\u6570\u636e\u6765\u6e90 \u4e0d\u9700\u8981\u8fdb\u884c\u6570\u636e\u586b\u5145 CFB\u4e0eOFB\u5bf9\u6bd4 6. CTR CTR\u6a21\u5f0f\u7684\u5168\u79f0\u662fCounTeR\u6a21\u5f0f\uff08\u8ba1\u6570\u5668\u6a21\u5f0f\uff09\u3002 CTR\u6478\u5f0f\u662f\u4e00\u79cd\u901a\u8fc7\u5c06\u9010\u6b21\u7d2f\u52a0\u7684\u8ba1\u6570\u5668\u8fdb\u884c\u52a0\u5bc6\u6765\u751f\u6210\u5bc6\u94a5\u6d41\u7684\u6d41\u5bc6\u7801 \uff08\u4e0b\u56fe\uff09\u3002 CTR\u6a21\u5f0f\u4e2d\uff0c\u6bcf\u4e2a\u5206\u7ec4\u5bf9\u5e94\u4e00\u4e2a\u9010\u6b21\u7d2f\u52a0\u7684\u8ba1\u6570\u5668\uff0c\u5e76\u901a\u8fc7\u5bf9\u8ba1\u6570\u5668\u8fdb\u884c\u52a0\u5bc6\u6765\u751f\u6210\u5bc6\u94a5\u6d41\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6700\u7ec8\u7684\u5bc6\u6587\u5206\u7ec4\u662f\u901a\u8fc7\u5c06\u8ba1\u6570\u5668\u52a0\u5bc6\u5f97\u5230\u7684\u6bd4\u7279\u5e8f\u5217\uff0c\u4e0e\u660e\u6587\u5206\u7ec4\u8fdb\u884cXOR\u800c\u5f97\u5230\u7684\u3002 \u7279\u70b9\uff1a \u5206\u7ec4\u957f\u5ea6\u53d6\u51b3\u4e8e\u52a0\u5bc6\u7b97\u6cd5 \u4e0d\u9700\u8981\u586b\u5145 \u53ef\u4ee5\u5e76\u884c\u52a0\u5bc6\u548c\u5e76\u884c\u89e3\u5bc6\uff0c\u6548\u7387\u9ad8\uff0c\u63a8\u8350\u4f7f\u7528 \u8ba1\u6570\u5668\u7684\u751f\u6210\u65b9\u6cd5 \u6bcf\u6b21\u52a0\u5bc6\u65f6\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\uff08nonce\uff09\u6765\u4f5c\u4e3a\u8ba1\u6570\u5668\u7684\u521d\u59cb\u503c\u3002\u5f53\u5206\u7ec4\u957f\u5ea6\u4e3a128\u6bd4\u7279\uff0816\u5b57\u8282\uff09\u65f6\uff0c\u8ba1\u6570\u5668\u7684\u521d\u59cb\u503c\u53ef\u80fd\u662f\u50cf\u4e0b\u9762\u8fd9\u6837\u7684\u5f62\u5f0f\u3002 \u5176\u4e2d \u524d8\u4e2a\u5b57\u8282\u4e3anonce\uff08\u968f\u673a\u6570\uff09 \uff0c\u8fd9\u4e2a\u503c\u5728\u6bcf\u6b21\u52a0\u5bc6\u65f6\u5fc5\u987b\u90fd\u662f\u4e0d\u540c\u7684\uff0c\u540e8\u4e2a\u5b57\u8282\u4e3a\u5206\u7ec4\u5e8f\u53f7\uff0c\u8fd9\u4e2a\u90e8\u5206\u662f\u4f1a\u9010\u6b21\u7d2f\u52a0\u7684\u3002\u5728\u52a0\u5bc6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8ba1\u6570\u5668\u7684\u503c\u4f1a\u4ea7\u751f\u5982\u4e0b\u53d8\u5316\uff1a \u6309\u7167\u4e0a\u8ff0\u751f\u6210\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u8ba1\u6570\u5668\u7684\u503c\u6bcf\u6b21\u90fd\u4e0d\u540c\u3002\u7531\u4e8e\u8ba1\u6570\u5668\u7684\u503c\u6bcf\u6b21\u90fd\u4e0d\u540c\uff0c\u56e0\u6b64\u6bcf\u4e2a\u5206\u7ec4\u4e2d\u5c06\u8ba1\u6570\u5668\u8fdb\u884c\u52a0\u5bc6\u6240\u5f97\u5230\u7684\u5bc6\u94a5\u6d41\u4e5f\u662f\u4e0d\u540c\u7684\u3002\u4e5f\u662f\u8bf4\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5c31\u662f\u7528\u5206\u7ec4\u5bc6\u7801\u6765\u6a21\u62df\u751f\u6210\u968f\u673a\u7684\u6bd4\u7279\u5e8f\u5217\u3002 OFB\u4e0eCTR\u5bf9\u6bd4 7. \u5c0f\u7ed3 \u9700\u8981\u586b\u5145\uff1aECB CBC \u4e0d\u9700\u8981\u586b\u5145\uff1aCFB OFB CTR 8. \u4ee3\u7801\u5b9e\u73b0 des + CBC \u624b\u518c: https://studygolang.com/pkgdoc 1. \u6b65\u9aa4\u5206\u6790 package main import \"fmt\" /* \u9700\u6c42\uff1a\u7b97\u6cd5\uff1ades \uff0c \u5206\u7ec4\u6a21\u5f0f\uff1aCBC des : \u79d8\u94a5\uff1a8bytes \u5206\u7ec4\u957f\u5ea6\uff1a8bytes cbc: 1. \u63d0\u4f9b\u521d\u59cb\u5316\u5411\u91cf\uff0c\u957f\u5ea6\u4e0e\u5206\u7ec4\u957f\u5ea6\u76f8\u540c\uff0c8bytes 2. \u9700\u8981\u586b\u5145 \u52a0\u5bc6\u5206\u6790 1. \u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u4f7f\u7528DES\u7b97\u6cd5\u7684cipher.Block\u63a5\u53e3\u3002 func NewCipher(key []byte) (cipher.Block, error) - \u5305\u540d\uff1ades - \u53c2\u6570\uff1a\u79d8\u94a5\uff0c8bytes - \u8fd4\u56de\u503c\uff1a\u4e00\u4e2acipher.Block\u63a5\u53e3 type Block interface { // \u8fd4\u56de\u52a0\u5bc6\u5b57\u8282\u5757\u7684\u5927\u5c0f BlockSize() int // \u52a0\u5bc6src\u7684\u7b2c\u4e00\u5757\u6570\u636e\u5e76\u5199\u5165dst\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 Encrypt(dst, src []byte) // \u89e3\u5bc6src\u7684\u7b2c\u4e00\u5757\u6570\u636e\u5e76\u5199\u5165dst\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 Decrypt(dst, src []byte) } 2. \u8fdb\u884c\u6570\u636e\u586b\u5145 //TODO 3. \u5f15\u5165CBC\u6a21\u5f0f, \u8fd4\u56de\u4e00\u4e2a\u5bc6\u7801\u5206\u7ec4\u94fe\u63a5\u6a21\u5f0f\u7684\u3001\u5e95\u5c42\u7528b\u52a0\u5bc6\u7684BlockMode\u63a5\u53e3\uff0c\u521d\u59cb\u5411\u91cfiv\u7684\u957f\u5ea6\u5fc5\u987b\u7b49\u4e8eb\u7684\u5757\u5c3a\u5bf8\u3002 func NewCBCEncrypter(b Block, iv []byte) BlockMode - \u5305\u540d\uff1acipher - \u53c2\u65701\uff1acipher.Block - \u53c2\u65702\uff1aiv\uff0c initialize vector - \u8fd4\u56de\u503c\uff1a\u5206\u7ec4\u6a21\u5f0f\uff0c\u91cc\u9762\u63d0\u4f9b\u52a0\u89e3\u5bc6\u65b9\u6cd5 type BlockMode interface { // \u8fd4\u56de\u52a0\u5bc6\u5b57\u8282\u5757\u7684\u5927\u5c0f BlockSize() int // \u52a0\u5bc6\u6216\u89e3\u5bc6\u8fde\u7eed\u7684\u6570\u636e\u5757\uff0csrc\u7684\u5c3a\u5bf8\u5fc5\u987b\u662f\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 CryptBlocks(dst, src []byte) } \u89e3\u5bc6\u5206\u6790 */ 2. \u6d4b\u8bd5\u6846\u67b6 //\u8f93\u5165\u660e\u6587\uff0c\u79d8\u94a5\uff0c\u8f93\u51fa\u5bc6\u6587 func desCBCEncrypt(src, key []byte) []byte { //TODO fmt.Printf(\"\u52a0\u5bc6\u5f00\u59cb\uff0c\u8f93\u5165\u7684\u6570\u636e\u4e3a\uff1a%s\\n\", src) fmt.Printf(\"\u52a0\u5bc6\u7ed3\u675f\uff0c\u52a0\u5bc6\u6570\u636e\u4e3a%x\\n\", src) return []byte{} } func main() { src := []byte(\"12345678\") key := []byte(\"12345678\") cipherData := desCBCEncrypt(src, key) fmt.Printf(\"cipherData : %x\\n\", cipherData) } 3. \u5b9e\u73b0\u52a0\u5bc6\u51fd\u6570-\u65e0\u586b\u5145 //\u8f93\u5165\u660e\u6587\uff0c\u79d8\u94a5\uff0c\u8f93\u51fa\u5bc6\u6587 func desCBCEncrypt(src, key []byte) []byte { fmt.Printf(\"\u52a0\u5bc6\u5f00\u59cb\uff0c\u8f93\u5165\u7684\u6570\u636e\u4e3a\uff1a%s\\n\", src) //1. \u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u4f7f\u7528DES\u7b97\u6cd5\u7684cipher.Block\u63a5\u53e3\u3002 //NewCipher(key []byte) (cipher.Block, error) block, err := des.NewCipher(key) fmt.Printf(\"block size : %d\\n\", block.BlockSize()) if err != nil { panic(err) } //2. \u8fdb\u884c\u6570\u636e\u586b\u5145 //TODO //3. \u5f15\u5165CBC\u6a21\u5f0f, \u8fd4\u56de\u4e00\u4e2a\u5bc6\u7801\u5206\u7ec4\u94fe\u63a5\u6a21\u5f0f\u7684\u3001\u5e95\u5c42\u7528b\u52a0\u5bc6\u7684BlockMode\u63a5\u53e3\uff0c\u521d\u59cb\u5411\u91cfiv\u7684\u957f\u5ea6\u5fc5\u987b\u7b49\u4e8eb\u7684\u5757\u5c3a\u5bf8\u3002 //func NewCBCEncrypter(b Block, iv []byte) BlockMode iv := bytes.Repeat([]byte(\"1\"), block.BlockSize()) blockMode := cipher.NewCBCEncrypter(block, iv) //4. \u52a0\u5bc6\u64cd\u4f5c blockMode.CryptBlocks(src /*\u52a0\u5bc6\u540e\u7684\u5bc6\u6587*/ , src /*\u660e\u6587*/) fmt.Printf(\"\u52a0\u5bc6\u7ed3\u675f\uff0c\u52a0\u5bc6\u6570\u636e\u4e3a%x\\n\", src) return src } 4.\u586b\u5145\u51fd\u6570\u5b9e\u73b0 \u586b\u5145\u903b\u8f91\u5206\u6790 //\u586b\u5145\u51fd\u6570, \u8f93\u5165\u660e\u6587, \u5206\u7ec4\u957f\u5ea6, \u8f93\u51fa\uff1a\u586b\u5145\u540e\u7684\u6570\u636e func paddingInfo(src []byte, blockSize int) []byte { //1. \u5f97\u5230\u660e\u6587\u7684\u957f\u5ea6 length := len(src) //2. \u9700\u8981\u586b\u5145\u7684\u6570\u91cf remains := length % blockSize //3 paddingNumber := blockSize - remains //5 //3. \u628a\u586b\u5145\u7684\u6570\u503c\u8f6c\u6362\u4e3a\u5b57\u7b26 s1 := byte(paddingNumber) // '5' //4. \u628a\u5b57\u7b26\u62fc\u6210\u6570\u7ec4 s2 := bytes.Repeat([]byte{s1}, paddingNumber) //[]byte{'5', '5', '5', '5, '5'} //5. \u628a\u62fc\u6210\u7684\u6570\u7ec4\u8ffd\u52a0\u5230src\u540e\u9762 srcNew := append(src, s2...) //6. \u8fd4\u56de\u65b0\u7684\u6570\u7ec4 return srcNew } \u51fd\u6570\u8c03\u7528 \u8fd0\u884c\u7ed3\u679c 5. \u89e3\u5bc6\u6b65\u9aa4\u5206\u6790 \u89e3\u5bc6\u5206\u6790 1. \u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u4f7f\u7528DES\u7b97\u6cd5\u7684cipher.Block\u63a5\u53e3\u3002 func NewCipher(key []byte) (cipher.Block, error) - \u5305\u540d\uff1ades - \u53c2\u6570\uff1a\u79d8\u94a5\uff0c8bytes - \u8fd4\u56de\u503c\uff1a\u4e00\u4e2acipher.Block\u63a5\u53e3 type Block interface { // \u8fd4\u56de\u52a0\u5bc6\u5b57\u8282\u5757\u7684\u5927\u5c0f BlockSize() int // \u52a0\u5bc6src\u7684\u7b2c\u4e00\u5757\u6570\u636e\u5e76\u5199\u5165dst\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 Encrypt(dst, src []byte) // \u89e3\u5bc6src\u7684\u7b2c\u4e00\u5757\u6570\u636e\u5e76\u5199\u5165dst\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 Decrypt(dst, src []byte) } 2. \u8fd4\u56de\u4e00\u4e2a\u5bc6\u7801\u5206\u7ec4\u94fe\u63a5\u6a21\u5f0f\u7684\u3001\u5e95\u5c42\u7528b\u89e3\u5bc6\u7684BlockMode\u63a5\u53e3\uff0c\u521d\u59cb\u5411\u91cfiv\u5fc5\u987b\u548c\u52a0\u5bc6\u65f6\u4f7f\u7528\u7684iv\u76f8\u540c\u3002 func NewCBCDecrypter(b Block, iv []byte) BlockMode - \u5305\u540d\uff1acipher - \u53c2\u65701\uff1acipher.Block - \u53c2\u65702\uff1aiv\uff0c initialize vector - \u8fd4\u56de\u503c\uff1a\u5206\u7ec4\u6a21\u5f0f\uff0c\u91cc\u9762\u63d0\u4f9b\u52a0\u89e3\u5bc6\u65b9\u6cd5 type BlockMode interface { // \u8fd4\u56de\u52a0\u5bc6\u5b57\u8282\u5757\u7684\u5927\u5c0f BlockSize() int // \u52a0\u5bc6\u6216\u89e3\u5bc6\u8fde\u7eed\u7684\u6570\u636e\u5757\uff0csrc\u7684\u5c3a\u5bf8\u5fc5\u987b\u662f\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 CryptBlocks(dst, src []byte) } 3. \u89e3\u5bc6\u64cd\u4f5c 4. \u53bb\u9664\u586b\u5145 //TODO */ 6. \u89e3\u5bc6\u51fd\u6570-\u672a\u53bb\u9664\u586b\u5145 //\u8f93\u5165\u5bc6\u6587\uff0c\u79d8\u94a5\uff0c\u5f97\u5230\u660e\u6587 func desCBCDecrypt(cipherData, key []byte) []byte { fmt.Printf(\"\u89e3\u5bc6\u5f00\u59cb\uff0c\u8f93\u5165\u7684\u6570\u636e\u4e3a\uff1a%x\\n\", cipherData) //1. \u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u4f7f\u7528DES\u7b97\u6cd5\u7684cipher.Block\u63a5\u53e3\u3002 //NewCipher(key []byte) (cipher.Block, error) block, err := des.NewCipher(key) fmt.Printf(\"block size : %d\\n\", block.BlockSize()) if err != nil { panic(err) } //3. \u5f15\u5165CBC\u6a21\u5f0f iv := bytes.Repeat([]byte(\"1\"), block.BlockSize()) blockMode := cipher.NewCBCDecrypter(block, iv) //4. \u89e3\u5bc6\u64cd\u4f5c blockMode.CryptBlocks(cipherData /*\u89e3\u5bc6\u540e\u7684\u660e\u6587*/ , cipherData /*\u5bc6\u6587*/) fmt.Printf(\"\u89e3\u5bc6\u7ed3\u675f\uff0c\u89e3\u5bc6\u6570\u636e\u4e3a%s\\n\", cipherData) //5. \u53bb\u9664\u586b\u5145 //TODO return cipherData } func main() { src := []byte(\"123456789123123123\") key := []byte(\"12345678\") cipherData := desCBCEncrypt(src, key) fmt.Printf(\"cipherData : %x\\n\", cipherData) plainText := desCBCDecrypt(cipherData, key) fmt.Printf(\"plainText str: %s\\n\", plainText) fmt.Printf(\"plainText hex: %x\\n\", plainText) } 7.\u53bb\u9664\u586b\u5145\u51fd\u6570 //\u53bb\u9664\u586b\u5145 func unpaddingInfo(plainText []byte) []byte { //1. \u83b7\u53d6\u957f\u5ea6 length := len(plainText) if length == 0 { return []byte{} } //2. \u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u5b57\u7b26 lastByte := plainText[length-1] //3. \u5c06\u5b57\u7b26\u8f6c\u6362\u6210\u6570\u5b57 unpaddingNumber := int(lastByte) //4. \u5207\u7247\u83b7\u53d6\u9700\u8981\u7684\u6570\u636e return plainText[:length-unpaddingNumber] } \u8c03\u7528\u8fc7\u7a0b func main() { src := []byte(\"\u4e0d\u662f\u4e00\u756a\u5bd2\u5f7b\u9aa8\uff0c\u54ea\u5f97\u6885\u82b1\u6251\u9f3b\u9999!!!\") key := []byte(\"12345678\") cipherData := desCBCEncrypt(src, key) fmt.Printf(\"cipherData : %x\\n\", cipherData) fmt.Printf(\"+++++++++++++++++++++++++\\n\") plainText := desCBCDecrypt(cipherData, key) fmt.Printf(\"plainText str: %s\\n\", plainText) fmt.Printf(\"plainText hex: %x\\n\", plainText) } \u8fd0\u884c\u7ed3\u679c aes + CTR 1. \u52a0\u5bc6\u5206\u6790 /* \u9700\u6c42\uff1a \u4f7f\u7528aes\uff0c ctr aes : - \u5206\u7ec4\u957f\u5ea6\uff1a 16 - \u79d8\u94a5\uff1a16 ctr: - \u4e0d\u9700\u8981\u586b\u5145 - \u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u6570\u5b57 1. \u521b\u5efa\u4e00\u4e2acipher.Block\u63a5\u53e3\u3002\u53c2\u6570key\u4e3a\u5bc6\u94a5\uff0c\u957f\u5ea6\u53ea\u80fd\u662f16\u300124\u300132\u5b57\u8282\uff0c\u7528\u4ee5\u9009\u62e9AES-128\u3001AES-192\u3001AES-256\u3002 func NewCipher(key []byte) (cipher.Block, error) - \u5305\uff1aaes - \u79d8\u94a5 - cipher.Block\u63a5\u53e3 2. \u9009\u62e9\u5206\u7ec4\u6a21\u5f0f\uff1actr \u8fd4\u56de\u4e00\u4e2a\u8ba1\u6570\u5668\u6a21\u5f0f\u7684\u3001\u5e95\u5c42\u91c7\u7528block\u751f\u6210key\u6d41\u7684Stream\u63a5\u53e3\uff0c\u521d\u59cb\u5411\u91cfiv\u7684\u957f\u5ea6\u5fc5\u987b\u7b49\u4e8eblock\u7684\u5757\u5c3a\u5bf8\u3002 func NewCTR(block Block, iv []byte) Stream - block - iv - \u79d8\u94a5\u6d41 3. \u52a0\u5bc6\u64cd\u4f5c type Stream interface { // \u4ece\u52a0\u5bc6\u5668\u7684key\u6d41\u548csrc\u4e2d\u4f9d\u6b21\u53d6\u51fa\u5b57\u8282\u4e8c\u8005xor\u540e\u5199\u5165dst\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 XORKeyStream(dst, src []byte) } */ 2. \u52a0\u5bc6\u6d4b\u8bd5\u4ee3\u7801 package main import ( \"crypto/aes\" \"crypto/cipher\" \"bytes\" \"fmt\" ) func aesCTREncrypt(src, key []byte) []byte { //1. \u521b\u5efa\u4e00\u4e2acipher.Block\u63a5\u53e3\u3002 block, err := aes.NewCipher(key) if err != nil { panic(err) } fmt.Print(\"aes block size : \", block.BlockSize()) iv := bytes.Repeat([]byte(\"1\"), block.BlockSize()) //2. \u9009\u62e9\u5206\u7ec4\u6a21\u5f0f\uff1actr stream := cipher.NewCTR(block, iv) //3. \u52a0\u5bc6\u64cd\u4f5c stream.XORKeyStream(src /*\u5bc6\u6587*/ , src /*\u660e\u6587*/) return src } func main() { src := []byte(\"\u4e0d\u662f\u4e00\u756a\u5bd2\u5f7b\u9aa8\uff0c\u54ea\u5f97\u6885\u82b1\u6251\u9f3b\u9999!!! 123456734523452345 \") key := []byte(\"1234567887654321\") cipherData := aesCTREncrypt(src, key) fmt.Printf(\"cipherData : %x\\n\", cipherData) } 3. \u89e3\u5bc6\u5206\u6790 func aesCTRDecrypt(cipherData, key []byte) []byte { //1. \u521b\u5efa\u4e00\u4e2acipher.Block\u63a5\u53e3\u3002 block, err := aes.NewCipher(key) if err != nil { panic(err) } iv := bytes.Repeat([]byte(\"1\"), block.BlockSize()) //2. \u9009\u62e9\u5206\u7ec4\u6a21\u5f0f\uff1actr stream := cipher.NewCTR(block, iv) //3. \u89e3\u5bc6\u64cd\u4f5c stream.XORKeyStream(cipherData /*\u660e\u6587*/ , cipherData) return cipherData } 4.\u5b8c\u6574\u4ee3\u7801 package main import ( \"crypto/aes\" \"crypto/cipher\" \"bytes\" \"fmt\" ) /* \u9700\u6c42\uff1a \u4f7f\u7528aes\uff0c ctr aes : - \u5206\u7ec4\u957f\u5ea6\uff1a 16 - \u79d8\u94a5\uff1a16 ctr: - \u4e0d\u9700\u8981\u586b\u5145 - \u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u6570\u5b57 1. \u521b\u5efa\u4e00\u4e2acipher.Block\u63a5\u53e3\u3002\u53c2\u6570key\u4e3a\u5bc6\u94a5\uff0c\u957f\u5ea6\u53ea\u80fd\u662f16\u300124\u300132\u5b57\u8282\uff0c\u7528\u4ee5\u9009\u62e9AES-128\u3001AES-192\u3001AES-256\u3002 func NewCipher(key []byte) (cipher.Block, error) - \u5305\uff1aaes - \u79d8\u94a5 - cipher.Block\u63a5\u53e3 2. \u9009\u62e9\u5206\u7ec4\u6a21\u5f0f\uff1actr \u8fd4\u56de\u4e00\u4e2a\u8ba1\u6570\u5668\u6a21\u5f0f\u7684\u3001\u5e95\u5c42\u91c7\u7528block\u751f\u6210key\u6d41\u7684Stream\u63a5\u53e3\uff0c\u521d\u59cb\u5411\u91cfiv\u7684\u957f\u5ea6\u5fc5\u987b\u7b49\u4e8eblock\u7684\u5757\u5c3a\u5bf8\u3002 func NewCTR(block Block, iv []byte) Stream - block - iv - \u79d8\u94a5\u6d41 3. \u52a0\u5bc6\u64cd\u4f5c type Stream interface { // \u4ece\u52a0\u5bc6\u5668\u7684key\u6d41\u548csrc\u4e2d\u4f9d\u6b21\u53d6\u51fa\u5b57\u8282\u4e8c\u8005xor\u540e\u5199\u5165dst\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 XORKeyStream(dst, src []byte) } */ func aesCTREncrypt(src, key []byte) []byte { fmt.Printf(\"\u660e\u6587\uff1a %s\\n\", src) //1. \u521b\u5efa\u4e00\u4e2acipher.Block\u63a5\u53e3\u3002 block, err := aes.NewCipher(key) if err != nil { panic(err) } fmt.Println(\"aes block size : \", block.BlockSize()) iv := bytes.Repeat([]byte(\"1\"), block.BlockSize()) //2. \u9009\u62e9\u5206\u7ec4\u6a21\u5f0f\uff1actr stream := cipher.NewCTR(block, iv) //3. \u52a0\u5bc6\u64cd\u4f5c stream.XORKeyStream(src /*\u5bc6\u6587*/ , src /*\u660e\u6587*/) return src } func aesCTRDecrypt(cipherData, key []byte) []byte { //1. \u521b\u5efa\u4e00\u4e2acipher.Block\u63a5\u53e3\u3002 block, err := aes.NewCipher(key) if err != nil { panic(err) } iv := bytes.Repeat([]byte(\"1\"), block.BlockSize()) //2. \u9009\u62e9\u5206\u7ec4\u6a21\u5f0f\uff1actr stream := cipher.NewCTR(block, iv) //3. \u89e3\u5bc6\u64cd\u4f5c stream.XORKeyStream(cipherData /*\u660e\u6587*/ , cipherData) return cipherData } func main() { src := []byte(\"\u4e0d\u662f\u4e00\u756a\u5bd2\u5f7b\u9aa8\uff0c\u54ea\u5f97\u6885\u82b1\u6251\u9f3b\u9999!!! 123456734523452345 \") key := []byte(\"1234567887654321\") cipherData := aesCTREncrypt(src, key) fmt.Printf(\"cipherData : %x\\n\", cipherData) fmt.Printf(\"+++++++++++++++++++++++++\\n\") plainText := aesCTRDecrypt(cipherData, key) fmt.Printf(\"plainText \uff1a %s\\n\", plainText) } \u8fd0\u884c\u622a\u56fe \u5bf9\u79f0\u52a0\u5bc6\u5b58\u5728\u7684\u95ee\u9898 \u79d8\u94a5\u7ba1\u7406\u56f0\u96be\u2014\u2014\u5f53\u901a\u4fe1\u5bf9\u8c61\u5f88\u591a\u65f6\u4f1a\u9762\u4e34\u4f17\u591a\u79d8\u94a5\u7684\u6709\u6548\u7ba1\u7406\u95ee\u9898\u3002 \u79d8\u94a5\u5206\u53d1\u56f0\u96be\u2014\u2014\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u901a\u4fe1\u5bf9\u8c61\uff0c\u5bc6\u94a5\u600e\u6837\u8fdb\u884c\u4f20\u8f93\u7684\u95ee\u9898\u3002\u4e24\u4e2a\u4eba\u5982\u4f55\u4fdd\u8bc1\u79d8\u94a5\u4e0d\u88ab\u7a83\u53d6\uff1f \u975e\u5bf9\u79f0\u52a0\u5bc6 #### RSA 1.\u57fa\u672c\u77e5\u8bc6 \u79c1\u94a5\uff1a\u4f7f\u7528\u968f\u673a\u6570\u6309\u7167\u4e00\u5b9a\u89c4\u5219\u751f\u6210\u7684 \u516c\u94a5\uff1a\u7531\u79c1\u94a5\u63a8\u5bfc\u800c\u6765\u3002 \u968f\u673a\u6570\u636e =\u300b\u7b97\u6cd5 =\u300b \u79c1\u94a5 =\u300b \u516c\u94a5 \u79c1\u94a5\uff1a\u53ea\u6709\u81ea\u5df1\u6301\u6709\uff0c\u4e0d\u53ef\u4ee5\u5411\u4efb\u4f55\u4eba\u4f20\u64ad \u516c\u94a5\uff1a\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u6301\u6709\uff0c\u516c\u94a5\u52a0\u5bc6\u7684\u6570\u636e\u53ea\u80fd\u88ab\u914d\u5957\u7684\u79c1\u94a5\u89e3\u5f00\u3002 \u751f\u6210RSA\u7684\u79d8\u94a5\u5bf9\u51e0\u4e2a\u6982\u5ff5 x509:https://baike.baidu.com/item/x509/1240109 pem:https://blog.csdn.net/crjmail/article/details/79095385 base64: x509\u8bc1\u4e66\u89c4\u8303\u3001pem\u3001base64 pem\u7f16\u7801\u89c4\u8303 - \u6570\u636e\u52a0\u5bc6 base64 - \u5bf9\u6570\u636e\u7f16\u7801, \u53ef\u9006 \u4e0d\u7ba1\u539f\u59cb\u6570\u636e\u662f\u4ec0\u4e48, \u5c06\u539f\u59cb\u6570\u636e\u4f7f\u752864\u4e2a\u5b57\u7b26\u6765\u66ff\u4ee3 a-z A-Z 0-9 + / ASN.1\u62bd\u8c61\u8bed\u6cd5\u6807\u8bb0 PKCS1\u6807\u51c6 2.openssl\u751f\u6210\u65b9\u5f0f #\u76ee\u524d\u4e3b\u6d41\u5bc6\u94a5\u957f\u5ea6\u81f3\u5c11\u90fd\u662f1024bits\u4ee5\u4e0a\uff0c\u4f4e\u4e8e1024bit\u7684\u5bc6\u94a5\u5df2\u7ecf\u4e0d\u5efa\u8bae\u4f7f\u7528\uff08\u5b89\u5168\u95ee\u9898\uff09 OpenSSL> genrsa -out rsa_private_key.pem 1024 #\u751f\u6210\u79c1\u94a5, 1024\u662f\u5bc6\u94a5\u957f\u5ea6 #\u53ef\u4ee5\u4e0d\u6307\u5b9a\u79c1\u94a5\u957f\u5ea6\uff0c\u9ed8\u8ba4\u662f2048\u4f4d\uff0c\u957f\u5ea6\u5efa\u8bae1024\u4ee5\u4e0a\uff0c\u8fd9\u6837\u5b89\u5168\uff01\uff01 OpenSSL> rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem #\u751f\u6210\u516c\u94a5 OpenSSL> exit #\u9000\u51faOpenSSL\u7a0b\u5e8f \u5e38\u89c1\u4f7f\u7528\u573a\u666f 1. \u901a\u4fe1\u52a0\u5bc6 \u516c\u94a5\u52a0\u5bc6\uff0c\u79c1\u94a5\u89e3\u5bc6 2. HTTPS \u9a8c\u8bc1\u670d\u52a1\u5668\uff0c\u6570\u5b57\u8bc1\u4e66\uff0c\u4f7f\u7528ca\u8ba4\u8bc1\u516c\u94a5 3. \u7b7e\u540d\uff08\u9632\u6b62\u7be1\u6539\uff09 \u54c8\u5e0c+\u975e\u5bf9\u79f0\u52a0\u5bc6 4. \u7f51\u94f6U\u76fe \u9a8c\u8bc1client\uff0cU\u76fe\u76f8\u5f53\u4e8e\u79c1\u94a5\uff0c\u516c\u94a5\u5728\u670d\u52a1\u7aef 5. github ssh(secure shell)\u767b\u5f55 ssh: https://blog.csdn.net/PeipeiQ/article/details/80702514 ssh: https://www.cnblogs.com/yyds/p/6992125.html ssh\u662f\u4e00\u79cd\u7f51\u7edc\u534f\u8bae\uff0c\u4e3b\u8981\u7528\u4e8e\u8ba1\u7b97\u673a\u4e4b\u95f4\u7684\u52a0\u5bc6\u767b\u5f55\u4e0e\u6570\u636e\u4f20\u8f93 ssh\u767b\u5f55\u7684\u65f6\u5019\u6ca1\u6709ca\u8ba4\u8bc1\uff0c\u9700\u8981\u7528\u6237\u81ea\u5df1\u786e\u8ba4\u767b\u5f55\u4e3b\u673a\u7684\u6307\u7eb9\uff0c\u70b9\u51fbyes\u540e\u628a\u8fdc\u7a0b\u4e3b\u673a\u7684\u6307\u7eb9\u5b58\u653e\u5230\u672c\u5730\u7684know_hosts\u4e2d\uff0c\u540e\u7eed\u767b\u5f55\u4f1a\u8df3\u8fc7\u8b66\u544a\u3002 ssh-keygen -t rsa\uff0c\u6f14\u793a RSA\u751f\u6210\u89c4\u5219 1. \u89c4\u5219\u63cf\u8ff0 \u53c2\u8003\u94fe\u63a5\uff1ahttps://www.cnblogs.com/jiftle/p/7903762.html \u7b97\u6cd5\u63cf\u8ff0\uff1a \uff081\uff09\u9009\u62e9\u4e00\u5bf9\u4e0d\u540c\u7684\u3001\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff0cq\u3002 \uff082\uff09\u8ba1\u7b97n=pq\u3002 \uff083\uff09\u8ba1\u7b97f(n)=(p-1)(q-1)\uff0c\u540c\u65f6\u5bf9p, q\u4e25\u52a0\u4fdd\u5bc6\uff0c\u4e0d\u8ba9\u4efb\u4f55\u4eba\u77e5\u9053\u3002 \uff084\uff09\u627e\u4e00\u4e2a\u4e0ef(n)\u4e92\u8d28\u7684\u6570e\uff0c\u4e141<e<f(n)\u3002 \uff085\uff09\u8ba1\u7b97d\uff0c\u4f7f\u5f97de\u22611 mod f(n)\u3002\u8fd9\u4e2a\u516c\u5f0f\u4e5f\u53ef\u4ee5\u8868\u8fbe\u4e3ad \u2261e-1 mod f(n) \u8fd9\u91cc\u8981\u89e3\u91ca\u4e00\u4e0b\uff0c\u2261\u662f\u6570\u8bba\u4e2d\u8868\u793a\u540c\u4f59\u7684\u7b26\u53f7\u3002\u516c\u5f0f\u4e2d\uff0c\u2261\u7b26\u53f7\u7684\u5de6\u8fb9\u5fc5\u987b\u548c\u7b26\u53f7\u53f3\u8fb9\u540c\u4f59\uff0c\u4e5f\u5c31\u662f\u4e24\u8fb9\u6a21\u8fd0\u7b97\u7ed3\u679c\u76f8\u540c\u3002\u663e\u800c\u6613\u89c1\uff0c\u4e0d\u7ba1f(n)\u53d6\u4ec0\u4e48\u503c\uff0c\u7b26\u53f7\u53f3\u8fb91 mod f(n)\u7684\u7ed3\u679c\u90fd\u7b49\u4e8e1\uff1b\u7b26\u53f7\u7684\u5de6\u8fb9d\u4e0ee\u7684\u4e58\u79ef\u505a\u6a21\u8fd0\u7b97\u540e\u7684\u7ed3\u679c\u4e5f\u5fc5\u987b\u7b49\u4e8e1\u3002\u8fd9\u5c31\u9700\u8981\u8ba1\u7b97\u51fad\u7684\u503c\uff0c\u8ba9\u8fd9\u4e2a\u540c\u4f59\u7b49\u5f0f\u80fd\u591f\u6210\u7acb\u3002 \uff086\uff09\u516c\u94a5KU=(e,n)\uff0c\u79c1\u94a5KR=(d,n)\u3002 \uff087\uff09\u52a0\u5bc6\u65f6\uff0c\u5148\u5c06\u660e\u6587\u53d8\u6362\u62100\u81f3n-1\u7684\u4e00\u4e2a\u6574\u6570M\u3002\u82e5\u660e\u6587\u8f83\u957f\uff0c\u53ef\u5148\u5206\u5272\u6210\u9002\u5f53\u7684\u7ec4\uff0c\u7136\u540e\u518d\u8fdb\u884c\u4ea4\u6362\u3002\u8bbe\u5bc6\u6587\u4e3aC\uff0c\u5219\u52a0\u5bc6\u8fc7\u7a0b\u4e3a\uff1a \u3002 \uff088\uff09\u89e3\u5bc6\u8fc7\u7a0b\u4e3a\uff1a \u3002 \u9009\u62e9P\uff0cQ\uff1a100~200\u4f4d\u7684\u5927\u7d20\u6570 N: P * Q F(n) = (P -1 )(Q - 1) \u9009\u62e9E: 1 < E < F(n) D*E === 1 mod F(n)\uff0c \u540c\u4f59\u8fd0\u7b97\u7b26 =\u300b \u9000\u51faD 2. demo P:3, Q:11 N : 3 * 11 = 33 F(n) = (3 -1)(11-1) = 2 * 10 = 20 E: 1 < E < 20 ==> \u9009 3 ( D * E ) %F(n) = 1 ( D * 3 ) %20 = 1 => D\u9009\u62e97 \u516c\u94a5\uff1a {E, N} => {3, 33} \u79c1\u94a5\uff1a {D, N} => {7, 33} \u52a0\u5bc6\u65f6\uff0c\u5148\u5bf9\u660e\u6587\u8fdb\u884c\u8f6c\u6362\uff0c\u5bf9\u6570\u503c\u8fdb\u884c\u52a0\u5bc6 \u89e3\u5bc6\u65f6\uff0c\u5148\u6839\u636e\u89c4\u5219\u89e3\u5bc6\uff0c\u6839\u636e\u5b57\u7b26\u8868\u8f6c\u6362\u4e3a\u660e\u6587 GO\u521b\u5efaRSA\u79c1\u94a5 1. \u5206\u6790 /* \u9700\u6c42: \u751f\u6210\u5e76\u4fdd\u5b58\u79c1\u94a5\uff0c\u516c\u94a5 \u751f\u6210\u79c1\u94a5\u5206\u6790\uff1a 1. GenerateKey\u51fd\u6570\u4f7f\u7528\u968f\u673a\u6570\u636e\u751f\u6210\u5668random\u751f\u6210\u4e00\u5bf9\u5177\u6709\u6307\u5b9a\u5b57\u4f4d\u6570\u7684RSA\u5bc6\u94a5\u3002 func GenerateKey(random io.Reader, bits int) (priv *PrivateKey, err error) - \u53c2\u65701\uff1a\u968f\u673a\u6570 - \u53c2\u65702\uff1a\u79d8\u94a5\u957f\u5ea6 - \u8fd4\u56de\u503c\uff1a\u79c1\u94a5 2. \u8981\u5bf9\u751f\u6210\u7684\u79c1\u94a5\u8fdb\u884c\u7f16\u7801\u5904\u7406\uff0c x509\uff0c \u6309\u7167\u89c4\u5219\uff0c\u8fdb\u884c\u5e8f\u5217\u5316\u5904\u7406, \u751f\u6210der\u7f16\u7801\u7684\u6570\u636e MarshalPKCSPv1ublicKey\u5c06\u516c\u94a5\u5e8f\u5217\u5316\u4e3aPKCS\u683c\u5f0fDER\u7f16\u7801\u3002 func MarshalPKCSPublicKey(pub *PrivateKey) ([]byte, error) 3. \u521b\u5efaBlock\u4ee3\u8868PEM\u7f16\u7801\u7684\u7ed3\u6784, \u5e76\u586b\u5165der\u7f16\u7801\u7684\u6570\u636e type Block struct { Type string // \u5f97\u81ea\u524d\u8a00\u7684\u7c7b\u578b\uff08\u5982\"RSA PRIVATE KEY\"\uff09 Headers map[string]string // \u53ef\u9009\u7684\u5934\u9879 Bytes []byte // \u5185\u5bb9\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c\u4e00\u822c\u662fDER\u7f16\u7801\u7684ASN.1\u7ed3\u6784 } 4. \u5c06Pem Block\u6570\u636e\u5199\u5165\u5230\u78c1\u76d8\u6587\u4ef6 func Encode(out io.Writer, b *Block) error */ \u79c1\u94a5\uff1a type PrivateKey struct { PublicKey // public part. D *big.Int // private exponent Primes []*big.Int // prime factors of N, has >= 2 elements. // Precomputed contains precomputed values that speed up private // operations, if available. Precomputed PrecomputedValues } \u516c\u94a5\uff1a type PublicKey struct { N *big.Int // modulus E int // public exponent } 2. \u751f\u6210\u79c1\u94a5\u4ee3\u7801 package main import ( \"crypto/rsa\" \"crypto/rand\" \"crypto/x509\" \"encoding/pem\" \"os\" \"fmt\" ) const privateKeyFile = \"./privateRsaKey.pem\" //\u9700\u6c42: \u751f\u6210\u5e76\u4fdd\u5b58\u79c1\u94a5\uff0c\u516c\u94a5 func generateKeyPair(bits int) error { //\u751f\u6210\u79c1\u94a5\u5206\u6790\uff1a //1. GenerateKey\u51fd\u6570\u4f7f\u7528\u968f\u673a\u6570\u636e\u751f\u6210\u5668random\u751f\u6210\u4e00\u5bf9\u5177\u6709\u6307\u5b9a\u5b57\u4f4d\u6570\u7684RSA\u5bc6\u94a5\u3002 //func GenerateKey(random io.Reader, bits int) (priv *PrivateKey, err error) //\u5305\uff1a rsa //- \u53c2\u65701\uff1a\u968f\u673a\u6570, crypto/rand, \u968f\u673a\u6570\u751f\u6210\u5668 //- \u53c2\u65702\uff1a\u79d8\u94a5\u957f\u5ea6 //- \u8fd4\u56de\u503c\uff1a\u79c1\u94a5 privateKey, err := rsa.GenerateKey(rand.Reader, bits) if err != nil { return err } // //2. \u8981\u5bf9\u751f\u6210\u7684\u79c1\u94a5\u8fdb\u884c\u7f16\u7801\u5904\u7406\uff0c x509\uff0c \u6309\u7167\u89c4\u5219\uff0c\u8fdb\u884c\u5e8f\u5217\u5316\u5904\u7406, \u751f\u6210der\u7f16\u7801\u7684\u6570\u636e //MarshalPKCS1PrivateKey\u5c06\u516c\u94a5\u5e8f\u5217\u5316\u4e3aPKCS\u683c\u5f0fDER\u7f16\u7801\u3002 // MarshalPKCS1PrivateKey converts a private key to ASN.1 DER encoded form. //func MarshalPKCS1PrivateKey(key *rsa.PrivateKey) []byte { priDerText := x509.MarshalPKCS1PrivateKey(privateKey) //3. \u521b\u5efaBlock\u4ee3\u8868PEM\u7f16\u7801\u7684\u7ed3\u6784, \u5e76\u586b\u5165der\u7f16\u7801\u7684\u6570\u636e //type Block struct { // Type string // \u5f97\u81ea\u524d\u8a00\u7684\u7c7b\u578b\uff08\u5982\"RSA PRIVATE KEY\"\uff09 // Headers map[string]string // \u53ef\u9009\u7684\u5934\u9879 // Bytes []byte // \u5185\u5bb9\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c\u4e00\u822c\u662fDER\u7f16\u7801\u7684ASN.1\u7ed3\u6784 //} block := pem.Block{ Type: \"SZ RSA PRIVATE KEY\", //\u968f\u4fbf\u586b\u5199 Headers: nil, //\u53ef\u9009\u4fe1\u606f\uff0c\u5305\u62ec\u79c1\u94a5\u52a0\u5bc6\u65b9\u5f0f\u7b49 Bytes: priDerText, //\u79c1\u94a5\u7f16\u7801\u540e\u7684\u6570\u636e } //4. \u5c06Pem Block\u6570\u636e\u5199\u5165\u5230\u78c1\u76d8\u6587\u4ef6 fileHandler1, err := os.Create(privateKeyFile) if err != nil { return err } //func Encode(out io.Writer, b *Block) error err = pem.Encode(fileHandler1, &block) if err != nil { return err } return nil } func main() { fmt.Printf(\"generate rsa private key ...\\n\") err := generateKeyPair(1024) if err != nil { fmt.Printf(\"generate rsa private failed, err : %v\", err) } fmt.Printf(\"generate rsa private key successfully!\\n\") } 3. \u516c\u94a5\u751f\u6210\u4ee3\u7801 fmt.Println(\"++++++++++++++ \u751f\u6210\u516c\u94a5 +++++++++++\") /* 1. \u83b7\u53d6\u516c\u94a5\uff0c \u901a\u8fc7\u79c1\u94a5\u83b7\u53d6 2. \u8981\u5bf9\u751f\u6210\u7684\u79c1\u94a5\u8fdb\u884c\u7f16\u7801\u5904\u7406\uff0c x509\uff0c \u6309\u7167\u89c4\u5219\uff0c\u8fdb\u884c\u5e8f\u5217\u5316\u5904\u7406, \u751f\u6210der\u7f16\u7801\u7684\u6570\u636e 3. \u521b\u5efaBlock\u4ee3\u8868PEM\u7f16\u7801\u7684\u7ed3\u6784, \u5e76\u586b\u5165der\u7f16\u7801\u7684\u6570\u636e 4. \u5c06Pem Block\u6570\u636e\u5199\u5165\u5230\u78c1\u76d8\u6587\u4ef6 */ //1. \u83b7\u53d6\u516c\u94a5\uff0c \u901a\u8fc7\u79c1\u94a5\u83b7\u53d6 pubKey := privateKey.PublicKey //\u6ce8\u610f\u662f\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u5730\u5740 //2. \u8981\u5bf9\u751f\u6210\u7684\u79c1\u94a5\u8fdb\u884c\u7f16\u7801\u5904\u7406\uff0c x509\uff0c \u6309\u7167\u89c4\u5219\uff0c\u8fdb\u884c\u5e8f\u5217\u5316\u5904\u7406, \u751f\u6210der\u7f16\u7801\u7684\u6570\u636e pubKeyDerText := x509.MarshalPKCS1PublicKey(&pubKey) //3. \u521b\u5efaBlock\u4ee3\u8868PEM\u7f16\u7801\u7684\u7ed3\u6784, \u5e76\u586b\u5165der\u7f16\u7801\u7684\u6570\u636e block1 := pem.Block{ Type: \"SZ RSA Public Key\", Headers: nil, Bytes: pubKeyDerText, } //4. \u5c06Pem Block\u6570\u636e\u5199\u5165\u5230\u78c1\u76d8\u6587\u4ef6 fileHandler2, err := os.Create(publicKeyFile) if err != nil { return err } RSA\u52a0\u89e3\u5bc6 1. \u516c\u94a5\u52a0\u5bc6 1. \u901a\u8fc7\u516c\u94a5\u6587\u4ef6\uff0c\u8bfb\u53d6\u516c\u94a5\u4fe1\u606f ==\u300b pem encode \u7684\u6570\u636e 2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e 3. \u89e3\u7801der\uff0c\u5f97\u5230\u516c\u94a5 4. \u516c\u94a5\u52a0\u5bc6 package main import ( \"io/ioutil\" \"encoding/pem\" \"crypto/x509\" \"crypto/rsa\" \"crypto/rand\" \"fmt\" ) const privateKeyFile = \"./RsaPrivateKey.pem\" const publicKeyFile = \"./RsaPublicKey.pem\" func rsaPubEncrypt(filename string, plainText []byte) (error, []byte) { //1. \u901a\u8fc7\u516c\u94a5\u6587\u4ef6\uff0c\u8bfb\u53d6\u516c\u94a5\u4fe1\u606f ==\u300b pem encode \u7684\u6570\u636e info, err := ioutil.ReadFile(filename) if err != nil { return err, nil } //2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e block, _ := pem.Decode(info) //\u8fd4\u56de\u503c1 \uff1apem.block //\u8fd4\u56de\u503c2\uff1arest\u53c2\u52a0\u662f\u672a\u89e3\u7801\u5b8c\u7684\u6570\u636e\uff0c\u5b58\u50a8\u5728\u8fd9\u91cc //type Block struct { // Type string // \u5f97\u81ea\u524d\u8a00\u7684\u7c7b\u578b\uff08\u5982\"RSA PRIVATE KEY\"\uff09 // Headers map[string]string // \u53ef\u9009\u7684\u5934\u9879 // Bytes []byte // \u5185\u5bb9\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c\u4e00\u822c\u662fDER\u7f16\u7801\u7684ASN.1\u7ed3\u6784 //} //3. \u89e3\u7801der\uff0c\u5f97\u5230\u516c\u94a5 //derText := block.Bytes derText := block.Bytes publicKey, err := x509.ParsePKCS1PublicKey(derText) if err != nil { return err, nil } //4. \u516c\u94a5\u52a0\u5bc6 //EncryptPKCS1v15\u4f7f\u7528PKCS#1 v1.5\u89c4\u5b9a\u7684\u586b\u5145\u65b9\u6848\u548cRSA\u7b97\u6cd5\u52a0\u5bc6msg\u3002 //func EncryptPKCS1v15(rand io.Reader, pub *PublicKey, msg []byte) (out []byte, err error) cipherData, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, plainText) if err != nil { return err, nil } return nil, cipherData } func main() { src := []byte(\"\u795d\u73ed\u4e3b\u4efb\u8282\u65e5\u5feb\u4e50!\") err, cipherData := rsaPubEncrypt(publicKeyFile, src) if err != nil { fmt.Println(\"\u516c\u94a5\u52a0\u5bc6\u5931\u8d25!\") } fmt.Printf(\"cipherData : %x\\n\", cipherData) } 2. \u79c1\u94a5\u89e3\u5bc6 \u601d\u8def\u5206\u6790\u540c\u4e0a \u4ee3\u7801\u5b9e\u73b0: func rsaPriKeyDecrypt(filename string, cipherData []byte) (error, []byte) { //1. \u901a\u8fc7\u79c1\u94a5\u6587\u4ef6\uff0c\u8bfb\u53d6\u79c1\u94a5\u4fe1\u606f ==\u300b pem encode \u7684\u6570\u636e info, err := ioutil.ReadFile(filename) if err != nil { return err, nil } //2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e block, _ := pem.Decode(info) //\u8fd4\u56de\u503c1 \uff1apem.block //\u8fd4\u56de\u503c2\uff1arest\u53c2\u52a0\u662f\u672a\u89e3\u7801\u5b8c\u7684\u6570\u636e\uff0c\u5b58\u50a8\u5728\u8fd9\u91cc //type Block struct { // Type string // \u5f97\u81ea\u524d\u8a00\u7684\u7c7b\u578b\uff08\u5982\"RSA PRIVATE KEY\"\uff09 // Headers map[string]string // \u53ef\u9009\u7684\u5934\u9879 // Bytes []byte // \u5185\u5bb9\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c\u4e00\u822c\u662fDER\u7f16\u7801\u7684ASN.1\u7ed3\u6784 //} //3. \u89e3\u7801der\uff0c\u5f97\u5230\u79c1\u94a5 //derText := block.Bytes derText := block.Bytes privateKey, err := x509.ParsePKCS1PrivateKey(derText) if err != nil { return err, nil } //4. \u79c1\u94a5\u89e3\u5bc6 //DecryptPKCS1v15\u4f7f\u7528PKCS#1 v1.5\u89c4\u5b9a\u7684\u586b\u5145\u65b9\u6848\u548cRSA\u7b97\u6cd5\u89e3\u5bc6\u5bc6\u6587\u3002\u5982\u679crandom\u4e0d\u662fnil\uff0c\u51fd\u6570\u4f1a\u6ce8\u610f\u89c4\u907f\u65f6\u95f4\u4fa7\u4fe1\u9053\u653b\u51fb\u3002 //func DecryptPKCS1v15(rand io.Reader, priv *PrivateKey, ciphertext []byte) (out []byte, err error) plainText, err := rsa.DecryptPKCS1v15(rand.Reader, privateKey, cipherData) if err != nil { return err, nil } return nil, plainText } main: func main() { src := []byte(\"\u795d\u73ed\u4e3b\u4efb\u8282\u65e5\u5feb\u4e50!\") err, cipherData := rsaPubEncrypt(publicKeyFile, src) if err != nil { fmt.Println(\"\u516c\u94a5\u52a0\u5bc6\u5931\u8d25!, err :\", err) } fmt.Printf(\"cipherData : %x\\n\", cipherData) fmt.Println(\"++++++++++++++++++++++++++++++\") err, plainText := rsaPriKeyDecrypt(privateKeyFile, cipherData) if err != nil { fmt.Println(\"\u79c1\u94a5\u89e3\u5bc6\u5931\u8d25!, err : \", err) } fmt.Printf(\"plainText : %s\\n\", plainText) } \u8fd0\u884c\u7ed3\u679c \u56db\u3001Base64 \u6982\u8ff0 Base64\u7f16\u7801\uff0c\u662f\u6211\u4eec\u7a0b\u5e8f\u5f00\u53d1\u4e2d\u7ecf\u5e38\u4f7f\u7528\u5230\u7684\u7f16\u7801\u65b9\u6cd5\u3002\u56e0\u4e3abase64\u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u66f4\u9002\u5408\u4e0d\u540c\u5e73\u53f0\u3001\u4e0d\u540c\u8bed\u8a00\u7684\u4f20\u8f93\uff08\u4e00\u4e2a\u5b57\u7b26\u53ef\u80fd\u5176\u4ed6\u7684\u7cfb\u7edf\u6ca1\u6709\uff09\u3002\u5b83\u662f\u4e00\u79cd\u57fa\u4e8e\u752864\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u6765\u8868\u793a\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u8868\u793a\u65b9\u6cd5\u3002\u5b83\u901a\u5e38\u7528\u4f5c\u5b58\u50a8\u3001\u4f20\u8f93\u4e00\u4e9b\u4e8c\u8fdb\u5236\u6570\u636e\u7f16\u7801\u65b9\u6cd5\uff0c\u4e00\u53e5\uff1a\u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u6587\u672c\u5316\uff08\u8f6c\u6210ASCII\uff09\u3002 \u4f5c\u7528 \u7531\u4e8e\u67d0\u4e9b\u7cfb\u7edf\u4e2d\u53ea\u80fd\u4f7f\u7528ASCII\u5b57\u7b26\u3002Base64\u5c31\u662f\u7528\u6765\u5c06\u975eASCII\u5b57\u7b26\u7684\u6570\u636e\u8f6c\u6362\u6210ASCII\u5b57\u7b26\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u6587\u672c\u5316\u540e\u7684\u4f20\u8f93 \u524d\u540e\u53f0\u4ea4\u4e92\u65f6\uff0c\u7ecf\u5e38\u4f7f\u7528base64\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u7279\u6b8a\u5b57\u7b26\u4f20\u8f93\u9519\u8bef \u4f7f\u7528\u547d\u4ee4\u6d4b\u8bd5\u6b65\u9aa4\uff1a 1. cp /bin/ls . 2. base64 ls > 1.txt 3. \u67e5\u770b1.txt =\u300b \u53ef\u8bfb\u7684\u6587\u672c\u6570\u636e 4. base64 -D 1.txt > myls ==> \u5c06\u6587\u672c\u6570\u636e\u89e3\u7801\u4e3a\u539f\u6765\u7684ls\u6570\u636e\uff0c -D decode 5. ls -al 1.txt ./ls ./myls ===== duke ~$ ls -al 1.txt ./ls ./myls -rwxr-xr-x 1 duke staff 38704 3 6 14:49 ./ls -rwxr-xr-x 1 duke staff 38704 3 6 14:49 ./myls -rw-r--r-- 1 duke staff 51609 3 6 14:49 1.txt ===== 6. chmod +x myls => \u6dfb\u52a0\u6267\u884c\u6743\u9650 7. ./myls ==\u300b \u4e0els\u529f\u80fd\u76f8\u540c 2. \u5b57\u7b26\u96c6 \u666e\u901a\u7684base64\u5b57\u7b26\u96c6 #\u5e38\u7528 A-Z : 26 a-z : 26 0-9: 10 +, / : 2 64\u4e2a ======== URL\u4e13\u7528\u7684base64\u5b57\u7b26\u96c6 A-Z : 26 a-z : 26 0-9: 10 -\uff0c_ : 2 64\u4e2a 3. \u7f16\u7801\u89c4\u5219 MAn => 3 * 8 = 24 / 6 = 4 M => 77 = 64 + 8 + 4 + 1 => 0100, 1101 Base64\u7f16\u7801\u7684\u6570\u636e\u6bd4\u539f\u6765\u7684\u5b57\u8282\u6570\u5927\u3002 \u75313\u5b57\u8282 => 4\u5b57\u8282 man =>twfu ========== \u5f53\u9700\u8981\u7f16\u7801\u7684\u6570\u636e\u4e0d\u8db3\u65f6\uff0c\u4f7f\u7528\u7b49\u53f7\uff08=\uff09\u586b\u5145\uff0c\u89e3\u7801\u65f6\uff0c\u4f1a\u81ea\u52a8\u5254\u9664 base64\u5c31\u662f\u4e00\u79cd\u57fa\u4e8e64\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u6765\u8868\u793a\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u65b9\u6cd5\u3002 \u7f16\u7801\u540e\u4fbf\u4e8e\u4f20\u8f93\uff0c\u5c24\u5176\u662f\u4e0d\u53ef\u89c1\u5b57\u7b26\u6216\u7279\u6b8a\u5b57\u7b26\uff0c\u5bf9\u7aef\u63a5\u6536\u540e\u89e3\u7801\u5373\u53ef\u590d\u539f\u3002 base64\u53ea\u662f\u7f16\u7801\uff0c\u5e76\u4e0d\u5177\u6709\u52a0\u5bc6\u4f5c\u7528\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u6240\u8f93\u51fa\u7684\u7f16\u7801\u4f4d\u53ef\u8bfb\u5b57\u7b26\uff0cBase64\u5236\u5b9a\u4e86\u4e00\u4e2a\u7f16\u7801\u8868\uff0c\u4ee5\u4fbf\u8fdb\u884c\u7edf\u4e00\u8f6c\u6362\u3002\u7f16\u7801\u8868\u7684\u5927\u5c0f\u4e3a2^6=64\uff0c\u8fd9\u4e5f\u662fBase64\u540d\u79f0\u7684\u7531\u6765\u3002 Base64\u7f16\u7801\u8868 \u6070\u597d\u4e09\u4e2a\u5b57\u8282\u60c5\u51b5 \u4e0d\u8db3\u4e09\u4e2a\u5b57\u8282\u60c5\u51b5 4. go\u4ee3\u7801\u6d4b\u8bd5base64 package main import ( \"fmt\" \"encoding/base64\" ) func main() { fmt.Printf(\"\u6807\u51c6base64\u7f16\u7801...\\n\") //info := []byte(\"\u56fd\u8db3\u5b87\u5b99\u7b2c\u4e00!!!\") info := []byte(\"https://studygolang.com/pkgdoc&hell?/?=\") encodeInfo := base64.StdEncoding.EncodeToString(info) fmt.Printf(\"encode info 1 : %s\\n\", encodeInfo) fmt.Printf(\"URL base64\u7f16\u7801...\\n\") urlEncodeInfo := base64.URLEncoding.EncodeToString(info) fmt.Printf(\"url encode info : %s\\n\", urlEncodeInfo) } \u8fd0\u884c\u7ed3\u679c duke ~/go/src/01_\u6388\u8bfe\u4ee3\u7801/05-shenzhen-term3/01-\u5bc6\u7801\u5b66$ go run 06-base64-test.go \u6807\u51c6base64\u7f16\u7801... encode info 1 : aHR0cHM6Ly9zdHVkeWdvbGFuZy5jb20vcGtnZG9jJmhlbGw/Lz89 URL base64\u7f16\u7801... url encode info : aHR0cHM6Ly9zdHVkeWdvbGFuZy5jb20vcGtnZG9jJmhlbGw_Lz89 duke ~/go/src/01_\u6388\u8bfe\u4ee3\u7801/05-shenzhen-term3/01-\u5bc6\u7801\u5b66$ \u4e94\u3001Hash(\u54c8\u5e0c) \u57fa\u7840\u77e5\u8bc6 1. \u547d\u4ee4\uff1a mac : shasum -a 256 <\u6587\u4ef6\u540d> linux : sha256Sum <\u6587\u4ef6\u540d> sha256\u54c8\u5e0c\u8fd0\u7b97\uff0c\u662f\u4e00\u4e2ahash\u7b97\u6cd5 //sha256\u8fd0\u7b97\u540e\uff0c\u5f97\u5230256\u4f4d\u7684\u54c8\u5e0c\u6570\u503c\uff0c \u4f7f\u752816\u8fdb\u5236\u6253\u5370\u5982\u4e0b\uff1a 46a546cfdc716cd3d7e49795a3b77428470778126b2b0e004932adb7844a5a54 64 * 4 = 256bit 2. \u7279\u6027\uff1a Hash: \u53ef\u4ee5\u5bf9\u8f93\u5165\u7684\u6570\u636e\u5185\u5bb9\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u6570\u503c \u552f\u4e00\u6807\u8bc6 \u5bf9\u4e8e#\u540c\u4e00\u4e2a\u7b97\u6cd5\uff0c\u6709\u5982\u4e0b\u7279\u6027\uff1a 1. \u8f93\u5165\u5185\u5bb9\u4e0d\u53d8\uff0c\u8f93\u51fa\u5185\u5bb9\u4e0d\u53d8 2. \u8f93\u5165\u5185\u5bb9\u6539\u53d8\uff0c\u54ea\u6015\u662f\u4e00\u70b9\u70b9\u6539\u53d8\uff0c\u8f93\u51fa\u7684\u5185\u5bb9\u5343\u5dee\u4e07\u522b 3. \u65e0\u8bba\u8f93\u5165\u7684\u5185\u5bb9\u5927\u5c0f\u5982\u4f55\uff0c\uff081M, 1K, 1G\uff09\uff0c \u751f\u6210\u7684\u54c8\u5e0c\u957f\u5ea6\u76f8\u540c 4. \u54c8\u5e0c\u8fd0\u7b97\u662f\u5bf9\u8f93\u5165\u5185\u5bb9\u505a\u6458\u8981\uff08\u6307\u7eb9\uff09\uff0c\u65e0\u6cd5\u6839\u636e\u54c8\u5e0c\u503c\u53cd\u63a8\u4f1a\u539f\u6587\u3002 \u8f93\u5165\uff1a\u539f\u50cf \u8f93\u51fa\uff1a\u6458\u8981\uff0c\u6307\u7eb9\uff0c\u54c8\u5e0c\u503c \u7b97\u6cd5\uff1a\u54c8\u5e0c\u51fd\u6570\uff0c\u6458\u8981\u51fd\u6570\uff0c\u6d88\u606f\u6458\u8981\u51fd\u6570\uff0c\u6742\u51d1\u51fd\u6570 \u5173\u4e8e\u672f\u8bed \u5355\u5411\u6563\u5217\u51fd\u6570\u7684\u76f8\u5173\u672f\u8bed\u6709\u5f88\u591a\u53d8\u4f53\uff0c\u4e0d\u540c\u53c2\u8003\u8d44\u6599\u4e2d\u6240\u4f7f\u7528\u7684\u672f\u8bed\u4e5f\u4e0d\u540c\uff0c\u4e0b\u9762\u6211\u4eec\u5c31\u4ecb\u7ecd\u5176\u4e2d\u7684\u513f\u4e2a\u3002 \u5355\u5411\u6563\u5217\u51fd\u6570\u4e5f\u79f0\u4e3a \u6d88\u606f\u6458\u8981\u51fd\u6570 \uff08message digest function\uff09\u3001 \u54c8\u5e0c\u51fd\u6570 \u6216\u8005 \u6742\u51d1\u51fd\u6570 \u3002 \u8f93\u5165\u5355\u5411\u6563\u5217\u51fd\u6570\u7684\u6d88\u606f\u4e5f\u79f0\u4e3a \u539f\u50cf \uff08pre-image\uff09\u3002 \u5355\u5411\u6563\u5217\u51fd\u6570\u8f93\u51fa\u7684\u6563\u5217\u503c\u4e5f\u79f0\u4e3a \u6d88\u606f\u6458\u8981 \uff08message digest\uff09\u6216\u8005 \u6307\u7eb9 \uff08fingerprint\uff09\u3002 \u5b8c\u6574\u6027 \u4e5f\u79f0\u4e3a\u4e00\u81f4\u6027\u3002 \u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u5355\u5411\u6563\u5217\u51fd\u6570\u4e2d\u7684\u201c\u6563\u5217\u201d\u7684\u82f1\u6587\"hash\u4e00\u8bcd\uff0c\u539f\u610f\u662f\u53e4\u6cd5\u8bed\u4e2d\u7684\u201c\u65a7\u5b50\u201d\uff0c\u540e\u6765\u88ab\u5f15\u7533\u4e3a\u201c\u5241\u788e\u7684\u8089\u672b\"\uff0c\u4e5f\u8bb8\u662f\u7528\u65a7\u5b50\u4e00\u901a\u4e71\u5241\u518d\u6405\u5728\u4e00\u8d77\u7684\u90a3\u79cd\u611f\u89c9\u5427\u3002\u5355\u5411\u6563\u5217\u51fd\u6570\u7684\u4f5c\u7528\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5c06\u5f88\u957f\u7684\u6d88\u606f\u5241\u788e\uff0c\u7136\u540e\u518d\u6df7\u5408\u6210\u56fa\u5b9a\u957f\u5ea6\u7684\u6563\u5217\u503c\u3002 \u6839\u636e\u4efb\u610f\u957f\u5ea6\u7684\u6d88\u606f\u8ba1\u7b97\u51fa\u56fa\u5b9a\u957f\u5ea6\u7684\u6563\u5217\u503c \u80fd\u591f\u5feb\u901f\u8ba1\u7b97\u51fa\u6563\u5217\u503c \u6d88\u606f\u4e0d\u540c\u6563\u5217\u503c\u4e5f\u4e0d\u540c ==\u91cd\u8981\u7279\u6027\uff1a== \u539f\u50cf\u4e0d\u53ef\u9006\uff1a sh \u5177\u5907\u5355\u5411\u6027\uff0c 1k => 10G\u5185\u5bb9, \u4e0d\u53ef\u80fd \u6297\u78b0\u649e\u6027\uff1a ```sh 2^256 \u53ef\u80fd =\u300b\u5168\u5b87\u5b99\u53ef\u89c2\u6d4b\u539f\u5b50\u603b\u6570 \u7ed9\u4e00\u4e2a\u54c8\u5e0c\u503c\uff1a46a546cfdc716cd3d7e49795a3b77428470778126b2b0e004932adb7844a5a54 \u4f60\u53bb\u62fc\u88c5\u4e00\u6bb5\u5185\u5bb9\uff0c\u4f7f\u5f97\u8fd0\u884c\u540c\u6837\u7684\u7b97\u6cd5\uff0c\u540c\u6837\u7684\u54c8\u5e0c\u503c\u3002\u4e0d\u53ef\u80fd\u5b8c\u6210\u7684 ``` \u54c8\u5e0c\u5e94\u7528 1. \u68c0\u6d4b\u8f6f\u4ef6\u662f\u5426\u88ab\u7be1\u6539 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u6765\u786e\u8ba4\u81ea\u5df1\u4e0b\u8f7d\u7684\u8f6f\u4ef6\u662f\u5426\u88ab\u7be1\u6539\u3002 \u5f88\u591a\u8f6f\u4ef6\uff0c\u5c24\u5176\u662f\u5b89\u5168\u76f8\u5173\u7684\u8f6f\u4ef6\u90fd\u4f1a\u628a\u901a\u8fc7\u5355\u5411\u6563\u5217\u51fd\u6570\u8ba1\u7b97\u51fa\u7684\u6563\u5217\u503c\u516c\u5e03\u5728\u81ea\u5df1\u7684\u5b98\u65b9\u7f51\u7ad9\u4e0a\u3002\u7528\u6237\u5728\u4e0b\u8f7d\u5230\u8f6f\u4ef6\u4e4b\u540e\uff0c\u53ef\u4ee5\u81ea\u884c\u8ba1\u7b97\u6563\u5217\u503c\uff0c\u7136\u540e\u4e0e\u5b98\u65b9\u7f51\u7ad9\u4e0a\u516c\u5e03\u7684\u6563\u5217\u503c\u8fdb\u884c\u5bf9\u6bd4\u3002\u901a\u8fc7\u6563\u5217\u503c\uff0c\u7528\u6237\u53ef\u4ee5\u786e\u8ba4\u81ea\u5df1\u6240\u4e0b\u8f7d\u5230\u7684\u6587\u4ef6\u4e0e\u8f6f\u4ef6\u4f5c\u8005\u6240\u63d0\u4f9b\u7684\u6587\u4ef6\u662f\u5426\u4e00\u81f4\u3002 \u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u5728\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u9014\u5f84\u5f97\u5230\u8f6f\u4ef6\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u6709\u7528\u3002\u4e3a\u4e86\u51cf\u8f7b\u670d\u52a1\u5668\u7684\u538b\u529b\uff0c\u5f88\u591a\u8f6f\u4ef6\u4f5c\u8005\u90fd\u4f1a\u501f\u52a9\u591a\u4e2a\u7f51\u7ad9\uff08\u955c\u50cf\u7ad9\u70b9\uff09\u6765\u53d1\u5e03\u8f6f\u4ef6\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5355\u5411\u6563\u5217\u51fd\u6570\u5c31\u4f1a\u5728\u68c0\u6d4b\u8f6f\u4ef6\u662f\u5426\u88ab\u7be1\u6539\u65b9\u9762\u53d1\u6325\u91cd\u8981\u4f5c\u7528\u3002 2. \u6d88\u606f\u8ba4\u8bc1\u7801 \u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u53ef\u4ee5\u6784\u9020\u6d88\u606f\u8ba4\u8bc1\u7801\u3002 \u6d88\u606f\u8ba4\u8bc1\u7801\u662f\u5c06\u201c\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u4e4b\u95f4\u7684\u5171\u4eab\u5bc6\u94a5\u201d\u548c\u201c\u6d88\u606f\uff0c\u8fdb\u884c\u6df7\u5408\u540e\u8ba1\u7b97\u51fa\u7684\u6563\u5217\u503c\u3002\u4f7f\u7528\u6d88\u606f\u8ba4\u8bc1\u7801\u53ef\u4ee5\u68c0\u6d4b\u5e76\u9632\u6b62\u901a\u4fe1\u8fc7\u7a0b\u4e2d\u7684\u9519\u8bef\u3001\u7be1\u6539\u4ee5\u53ca\u4f2a\u88c5\u3002 3. \u4f2a\u968f\u673a\u6570\u751f\u6210\u5668 \u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u53ef\u4ee5\u6784\u9020\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002 \u5bc6\u7801\u6280\u672f\u4e2d\u6240\u4f7f\u7528\u7684\u968f\u673a\u6570\u9700\u8981\u5177\u5907\u201c\u4e8b\u5b9e\u4e0a\u4e0d\u53ef\u80fd\u6839\u636e\u8fc7\u53bb\u7684\u968f\u673a\u6570\u5217\u9884\u6d4b\u672a\u6765\u7684\u968f\u673a\u6570\u5217\u201d\u8fd9\u6837\u7684\u6027\u8d28\u3002\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u53ef\u9884\u6d4b\u6027\uff0c\u53ef\u4ee5\u5229\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u7684\u5355\u5411\u6027\u3002 4. \u4e00\u6b21\u6027\u53e3\u4ee4 \u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u53ef\u4ee5\u6784\u9020\u4e00\u6b21\u6027\u53e3\u4ee4\uff08one-time password\uff09\u3002 \u4e00\u6b21\u6027\u53e3\u4ee4\u7ecf\u5e38\u88ab\u7528\u4e8e\u670d\u52a1\u5668\u5bf9\u5ba2\u6237\u7aef\u7684\u5408\u6cd5\u6027\u8ba4\u8bc1\u3002\u5728\u8fd9\u79cd\u65b9\u5f0f\u4e2d\uff0c\u901a\u8fc7\u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u53ef\u4ee5\u4fdd\u8bc1\u53e3\u4ee4\u53ea\u5728\u901a\u4fe1\u94fe\u8def\u4e0a\u4f20\u9001\u4e00\u6b21\uff08one-time\uff09\uff0c\u56e0\u6b64\u5373\u4f7f\u7a83\u542c\u8005\u7a83\u53d6\u4e86\u53e3\u4ee4\uff0c\u4e5f\u65e0\u6cd5\u4f7f\u7528\u3002 5. \u5bc6\u7801\u5b58\u50a8 \u7f51\u7ad9\u6570\u636e\u5e93\u4e2d\uff0c\u5bf9\u5bc6\u7801\u7684\u5b58\u50a8\u5e76\u4e0d\u662f\u5bc6\u7801\u7684\u660e\u6587\uff0c\u800c\u662f\u5bc6\u7801\u7684\u54c8\u5e0c\u503c\uff0c \u6bcf\u6b21\u767b\u5f55\u65f6\uff0c\u4f1a\u5bf9\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\u5904\u7406\uff0c\u7136\u540e\u4e0e\u6570\u636e\u5e93\u5bf9\u6bd4\u3002 \u5373\u4f7f\u6570\u636e\u5e93\u88ab\u76d7\uff0c\u9ed1\u5ba2\u4e5f\u65e0\u6cd5\u62ff\u5230\u7528\u6237\u7684\u5bc6\u7801\uff0c\u4fdd\u8bc1\u7528\u6237\u8d26\u6237\u5b89\u5168 6. \u6570\u5b57\u7b7e\u540d ==\u79c1\u94a5\u5bf9\u6587\u4ef6\u7b7e\u540d\u65f6\uff0c\u5e76\u4e0d\u4f1a\u5bf9\u6587\u4ef6\u672c\u8eab\u505a\u7b7e\u540d\uff0c\u800c\u662f\u5bf9\u8fd9\u4e2a\u6587\u4ef6\u7684\u54c8\u5e0c\u503c\u8fdb\u884c\u7b7e\u540d== \u5728\u8fdb\u884c\u6570\u5b57\u7b7e\u540d\u65f6\u4e5f\u4f1a\u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u3002 \u6570\u5b57\u7b7e\u540d\u662f\u73b0\u5b9e\u793e\u4f1a\u4e2d\u7684\u7b7e\u540d\uff08sign\uff09\u548c\u76d6\u7ae0\u8fd9\u6837\u7684\u884c\u4e3a\u5728\u6570\u5b57\u4e16\u754c\u4e2d\u7684\u5b9e\u73b0\u3002\u6570\u5b57\u7b7e\u540d\u7684\u5904\u7406\u8fc7\u7a0b\u975e\u5e38\u8017\u65f6\uff0c\u56e0\u6b64\u4e00\u822c\u4e0d\u4f1a\u5bf9\u6574\u4e2a\u6d88\u606f\u5185\u5bb9\u76f4\u63a5\u65bd\u52a0\u6570\u5b57\u7b7e\u540d\uff0c\u800c\u662f\u5148\u901a\u8fc7\u5355\u5411\u6563\u5217\u51fd\u6570\u8ba1\u7b97\u51fa\u6d88\u606f\u7684\u6563\u5217\u503c\uff0c\u7136\u540e\u518d\u5bf9\u8fd9\u4e2a\u6563\u5217\u503c\u65bd\u52a0\u6570\u5b57\u7b7e\u540d\u3002 \u5e38\u7528\u7684Hash\u7b97\u6cd5 1. md4, md5 MD4\u662f\u7531Rivest\u4e8e1990\u5e74\u8bbe\u8ba1\u7684\u5355\u5411\u6563\u5217\u51fd\u6570\uff0c\u80fd\u591f\u4ea7\u751f128\u6bd4\u7279\u7684\u6563\u5217\u503c\uff08RFC1186\uff0c\u4fee\u8ba2\u7248RFC1320\uff09\u3002\u4e0d\u8fc7\uff0c\u968f\u7740Dobbertin\u63d0\u51fa\u5bfb\u627eMD4\u6563\u5217\u78b0\u649e\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u73b0\u5728\u5b83\u5df2\u7ecf\u4e0d\u5b89\u5168\u4e86\u3002 MD5\u662f\u7531Rwest\u4e8e1991\u5e74\u8bbe\u8ba1\u7684\u5355\u9879\u6563\u5217\u51fd\u6570\uff0c\u80fd\u591f\u4ea7\u751f128\u6bd4\u7279\u7684\u6563\u5217\u503c\uff08RFC1321\uff09\u3002 MD5\u7684\u5f3a\u6297\u78b0\u649e\u6027\u5df2\u7ecf\u88ab\u653b\u7834\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u73b0\u5728\u5df2\u7ecf\u80fd\u591f\u4ea7\u751f\u5177\u5907\u76f8\u540c\u6563\u5217\u503c\u7684\u4e24\u6761\u4e0d\u540c\u7684\u6d88\u606f\uff0c\u56e0\u6b64\u5b83\u4e5f\u5df2\u7ecf\u4e0d\u5b89\u5168\u4e86\u3002 MD4\u548cMD5\u4e2d\u7684MD\u662f\u6d88\u606f\u6458\u8981\uff08Message Digest\uff09\u7684\u7f29\u5199\u3002 md5: \u751f\u6210hash\u957f\u5ea6\u7684\u957f\u5ea6\uff1a128\u4f4d(32\u5b57\u8282)\u3002sha256: 256\u4f4d(64\u5b57\u8282) - \u65b9\u5f0f\u4e00 //16bytes, 128bit func md5Test1(info []byte) []byte { //\u5bf9\u591a\u91cf\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u8fd0\u7b97 //1. \u521b\u5efa\u4e00\u4e2a\u54c8\u5e0c\u5668 hasher := md5.New() io.WriteString(hasher, \"hello \") io.WriteString(hasher, \"world \") //2. \u6267\u884cSum\u64cd\u4f5c\uff0c\u5f97\u5230\u54c8\u5e0c\u503c //hash := hasher.Sum(nil) //sum(b), \u5982\u679cb\u4e0d\u662fnil\uff0c \u90a3\u4e48\u8fd4\u56de\u7684\u503c\u4e3ab+hash\u503c\uff0c b\u7684ascii\u503c\u540e\u8ffd\u52a0hello world\u7684\u54c8\u5e0c\u503c hash := hasher.Sum([]byte(\"0x\")) return hash } - \u65b9\u5f0f\u4e8c package main import ( \"crypto/md5\" \"io\" \"fmt\" ) //\u54c8\u5e0c\u8fd0\u7b97\uff0c\u4f7f\u7528go\u5305\uff0c\u6709\u4e24\u79cd\u8c03\u7528\u65b9\u5f0f //\u65b9\u5f0f\u4e00 //16bytes, 128bit func md5Test1(info []byte) []byte { //\u5bf9\u591a\u91cf\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u8fd0\u7b97 //1. \u521b\u5efa\u4e00\u4e2a\u54c8\u5e0c\u5668 hasher := md5.New() io.WriteString(hasher, \"hello \") io.WriteString(hasher, \"world!\") //2. \u6267\u884cSum\u64cd\u4f5c\uff0c\u5f97\u5230\u54c8\u5e0c\u503c //hash := hasher.Sum(nil) //sum(b), \u5982\u679cb\u4e0d\u662fnil\uff0c \u90a3\u4e48\u8fd4\u56de\u7684\u503c\u4e3ab+hash\u503c hash := hasher.Sum([]byte(\"0x\")) return hash } //\u65b9\u5f0f\u4e8c func md5Test2(info []byte) []byte { hash := md5.Sum(info) //\u5c06\u6570\u7ec4\u8f6c\u6362\u4e3a\u5207\u7247 return hash[:] } func main() { hash := md5Test1(nil) fmt.Printf(\"hash : %x\\n\", hash) fmt.Printf(\"+++++++++++++++\\n\") src := []byte(\"hello world!\") hash2 := md5Test2(src) fmt.Printf(\"hash2 : %x\\n\", hash2) } 2. sha1, sha2 SHA-1 SHA-224 ==SHA-256== SHA-384 SHA-512 SHA-1\u662f\u7531NIST\uff08NationalInstituteOfStandardsandTechnology\uff0c\u7f8e\u56fd\u56fd\u5bb6\u6807\u51c6\u6280\u672f\u7814\u7a76\u6240\uff09\u8bbe\u8ba1\u7684\u4e00\u79cd\u80fd\u591f\u4ea7\u751f160\u6bd4\u7279\u7684\u6563\u5217\u503c\u7684\u5355\u5411\u6563\u5217\u51fd\u6570\u30021993\u5e74\u88ab\u4f5c\u4e3a\u7f8e\u56fd\u8054\u90a6\u4fe1\u606f\u5904\u7406\u6807\u51c6\u89c4\u683c\uff08FIPS PUB 180\uff09\u53d1\u5e03\u7684\u662fSHA,1995\u5e74\u53d1\u5e03\u7684\u4fee\u8ba2\u7248FIPS PUB 180-1\u79f0\u4e3aSHA-1\u3002 SHA-1\u7684\u6d88\u606f\u957f\u5ea6\u5b58\u5728\u4e0a\u9650\uff0c\u4f46\u8fd9\u4e2a\u503c\u63a5\u8fd1\u4e8e2^64^\u6bd4\u7279\uff0c\u662f\u4e2a\u975e\u5e38\u5de8\u5927\u7684\u6570\u503c\uff0c\u56e0\u6b64\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u6ca1\u6709\u95ee\u9898\u3002 SHA-256\u3001SHA-384\u548cSHA-512\u90fd\u662f\u7531NIST\u8bbe\u8ba1\u7684\u5355\u5411\u6563\u5217\u51fd\u6570\uff0c\u5b83\u4eec\u7684\u6563\u5217\u503c\u957f\u5ea6\u5206\u522b\u4e3a256\u6bd4\u7279\u3001384\u6bd4\u7279\u548c512\u6bd4\u7279\u3002\u8fd9\u4e9b\u5355\u5411\u6563\u5217\u51fd\u6570\u5408\u8d77\u6765\u7edf\u79f0SHA-2\uff0c\u5b83\u4eec\u7684\u6d88\u606f\u957f\u5ea6\u4e5f\u5b58\u5728\u4e0a\u9650\uff08SHA-256\u7684\u4e0a\u9650\u63a5\u8fd1\u4e8e 2^64^ \u6bd4\u7279\uff0cSHA-384 \u548c SHA-512\u7684\u4e0a\u9650\u63a5\u8fd1\u4e8e 2^128^ \u6bd4\u7279\uff09\u3002\u8fd9\u4e9b\u5355\u5411\u6563\u5217\u51fd\u6570\u662f\u4e8e2002\u5e74\u548c SHA-1 \u4e00\u8d77\u4f5c\u4e3a FIPS PUB 180-2\u53d1\u5e03\u7684 SHA-1 \u7684\u5f3a\u6297\u78b0\u649e\u6027\u5df2\u4e8e2005\u5e74\u88ab\u653b\u7834, \u4e5f\u5c31\u662f\u8bf4\uff0c\u73b0\u5728\u5df2\u7ecf\u80fd\u591f\u4ea7\u751f\u5177\u5907\u76f8\u540c\u6563\u5217\u503c\u7684\u4e24\u6761\u4e0d\u540c\u7684\u6d88\u606f\u3002\u4e0d\u8fc7\uff0cSHA-2\u8fd8\u5c1a\u672a\u88ab\u653b\u7834\u3002 sha1 sha2: \uff08\u4e00\u7cfb\u5217\u54c8\u5e0c\u7b97\u6cd5\uff0c\u66f4\u53ef\u9760\uff0c\u66f4\u5b89\u5168\uff09 - SHA-224 - SHA-256 ===> \u6bd4\u7279\u5e01\uff0c \u4ee5\u592a\u574a\uff0c\u90fd\u4f7f\u7528 - SHA-384 - SHA-512 \u6bd4\u7279\u6570 \u5b57\u8282\u6570 MD4 128bit 16byte ==MD5== ==128bit== ==16byte== SHA-1 160bit 20byte SHA-224 224bit 28byte ==SHA-256== ==256bit== ==32byte== SHA-384 384bit 48byte SHA-512 512bit 64byte sha256 package main import ( \"os\" \"crypto/sha256\" \"io\" \"fmt\" ) //\u4f7f\u7528\u6253\u5f00\u6587\u4ef6\u65b9\u5f0f\u83b7\u53d6\u54c8\u5e0c const filename = \"\u586b\u5165\u81ea\u5df1\u7684\u6587\u4ef6\" func main() { //1. open \u6587\u4ef6 file, err := os.Open(filename) defer file.Close() if err != nil { panic(err) } //2. \u521b\u5efahash hasher := sha256.New() /* type Hash interface { io.Writer Sum(b []byte) []byte Reset() Size() int BlockSize() int } */ //3. copy\u53e5\u67c4 //func Copy(dst Writer, src Reader) (written int64, err error) { length, err := io.Copy(hasher, file) if err != nil { panic(err) } fmt.Printf(\"length : %d\\n\", length) //4. hash sum\u64cd\u4f5c hash := hasher.Sum(nil) fmt.Printf(\"hash : %x\\n\", hash) } \u8fd0\u884c\u7ed3\u679c \u516d\u3001\u6d88\u606f\u8ba4\u8bc1 \u4f7f\u7528\u6d88\u606f\u8ba4\u8bc1\u7801\u7684\u539f\u56e0 \u5bf9\u79f0\u52a0\u5bc6\u7684\u95ee\u9898\uff1a \u80cc\u666f\uff1a Alice \u5411 Bob\u8bf4\uff0c \u4f60\u597d\uff01 \u5bf9\u79f0\u52a0\u5bc6\uff1apassword A\uff1a\u4f60\u597d =\u300b \u52a0\u5bc6 =\u300b *&*\u2026\u2026*\uff08\u2026\u2026TUGG =====\u300b \u4f20\u8f93 B\uff1a\u5bc6\u6587\uff08 *&*\u2026\u2026*\uff08\u2026\u2026TUGG =====\u300b\uff09 =\u300b \u89e3\u5bc6 =\u300b \u4f60\u597d\uff01\uff01 ++++++++++++++++++++++ \u5047\u5982A\u53d1\u7684\u6d88\u606f\u5c31\u662f\u4e0d\u53ef\u8bfb\uff08&*\u2026\u2026%\uffe5\uffe5\u2026\u2026&*&%\uffe5#@\uff09 \u52a0\u5bc6\uff0c\u89e3\u5bc6 B\u6536\u5230\u5bc6\u6587\u540e\u89e3\u5bc6\uff1a\uff08&*\u2026\u2026%\uffe5\uffe5\u2026\u2026&*&%\uffe5#@\uff09 \u95ee\u9898\uff1aB\u89e3\u51fa\u6765\u7684\u662f\u4e71\u7801\uff0cB\u65e0\u6cd5\u5224\u65ad\u8fd9\u4e2a\u6d88\u606f\u5c31\u662fA\u53d1\u7684\u539f\u6587\uff01\uff01 \u89e3\u51b3\u529e\u6cd5\uff1a\u5f15\u5165\u6d88\u606f\u8ba4\u8bc1\u7801 \u6f14\u793a func main() { src := []byte(\"\u4e0d\u662f\u4e00\u756a\u5bd2\u5f7b\u9aa8\uff0c\u54ea\u5f97\u6885\u82b1\u6251\u9f3b\u9999!!! 123456734523452345 \") key := []byte(\"1234567887654321\") cipherData := aesCTREncrypt(src, key) fmt.Printf(\"cipherData : %x\\n\", cipherData) fmt.Printf(\"+++++++++++++++++++++++++\\n\") cipherData = append(cipherData, []byte(\"hello\")...) plainText := aesCTRDecrypt(cipherData, key) fmt.Printf(\"plainText \uff1a %x\\n\", plainText) } ==\u5bc6\u6587\u88ab\u6539\u53d8\uff0c\u4f9d\u7136\u53ef\u4ee5\u89e3\u51fa\u6570\u636e\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u6570\u636e\u662f\u5426\u53ef\u9760== duke ~/go/src/01_\u6388\u8bfe\u4ee3\u7801/05-shenzhen-term3/01-\u5bc6\u7801\u5b66$ go run 02-aes-ctr.go \u660e\u6587\uff1a \u4e0d\u662f\u4e00\u756a\u5bd2\u5f7b\u9aa8\uff0c\u54ea\u5f97\u6885\u82b1\u6251\u9f3b\u9999!!! 123456734523452345 aes block size : 16 cipherData : d8d1cfb975e7c16451a9d7fda95ea6782cc5133d42c19e3f63cb4d82e494889eac4b756e0b427b263a07a527811c16b80f3d49a4240b66fb6ae21afffa114c5e8a17f9fa +++++++++++++++++++++++++ plainText \uff1a e4b88de698afe4b880e795aae5af92e5bdbbe9aaa8efbc8ce593aae5be97e6a285e88ab1e68991e9bcbbe9a699212121203132333435367333435323334353233343509e9364ebf0b \u6d88\u606f\u8ba4\u8bc1\u7801\uff08MAC\uff09 \u6d88\u606f\u8ba4\u8bc1\u7801\uff08message authentication code\uff09\u662f\u4e00\u79cd\u786e\u8ba4\u5b8c\u6574\u6027\u5e76\u8fdb\u884c\u8ba4\u8bc1\u7684\u6280\u672f\uff0c\u53d6\u4e09\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\uff0c\u7b80\u79f0\u4e3aMAC\u3002 \u4fdd\u8bc1\u6570\u636e\u672a\u88ab\u7be1\u6539 \u5bf9\u53d1\u9001\u8005\u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1 \u53d1\u9001\u8005Alice\u4e0e\u63a5\u6536\u8005Bob\u4e8b\u5148\u5171\u4eab\u5bc6\u94a5\u3002 \u53d1\u9001\u8005Alice\u6839\u636e\u6c47\u6b3e\u8bf7\u6c42\u6d88\u606f\u8ba1\u7b97MAC\u503c\uff08\u4f7f\u7528\u5171\u4eab\u5bc6\u94a5\uff09\u3002 \u53d1\u9001\u8005Alice\u5c06\u6c47\u6b3e\u8bf7\u6c42\u6d88\u606f\u548cMAC\u503c\u4e24\u8005\u53d1\u9001\u7ed9\u63a5\u6536\u8005Bob\u3002 \u63a5\u6536\u8005Bob\u6839\u636e\u63a5\u6536\u5230\u7684\u6c47\u6b3e\u8bf7\u6c42\u6d88\u606f\u8ba1\u7b97MAC\u503c\uff08\u4f7f\u7528\u5171\u4eab\u5bc6\u94a5\uff09\u3002 \u63a5\u6536\u8005Bob\u5c06\u81ea\u5df1\u8ba1\u7b97\u7684MAC\u503c\u4e0e\u4eceAlice\u5904\u6536\u5230\u7684MAC\u503c\u8fdb\u884c\u5bf9\u6bd4\u3002 \u5982\u679c\u4e24\u4e2aMAC\u503c\u4e00\u81f4\uff0c\u5219\u63a5\u6536\u8005Bob\u5c31\u53ef\u4ee5\u65ad\u5b9a\u6c47\u6b3e\u8bf7\u6c42\u7684\u786e\u6765\u81eaAlice\uff08\u8ba4\u8bc1\u6210\u529f\uff09\uff1b\u5982\u679c\u4e0d\u4e00\u81f4\uff0c\u5219\u53ef\u4ee5\u65ad\u5b9a\u6d88\u606f\u4e0d\u662f\u6765\u81eaAlice\uff08\u8ba4\u8bc1\u5931\u8d25\uff09\u3002 MAC\u4f7f\u7528\u573a\u666f 1. SWIFT \u73af\u7403\u94f6\u884c\u91d1\u878d\u7535\u4fe1\u534f\u4f1a\uff0c\u662f\u4e00\u4e2a\u7ec4\u7ec7\uff0c\u4e3a\u94f6\u884c\u95f4\u7684\u4ea4\u6613\u62a5\u4ef7\u62a4\u822a\u3002\u94f6\u884c\u95f4\u4ea4\u4e92\u4f7f\u7528\u4e86SWIFT\u8fdb\u884c\u4ea4\u4e92\uff0c\u8fd9\u91cc\u9762\u5bf9\u6d88\u606f\u7684\u5b8c\u6210\u6027\u548c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5c31\u662f\u4f7f\u7528\u4e86\u6d88\u606f\u8ba4\u8bc1\u7801\u3002 \u6700\u521d\u4f7f\u7528\u6d88\u606f\u8ba4\u8bc1\u7801\uff0c\u7531\u4eba\u5de5\u914d\u9001\u79d8\u94a5 \u540e\u6765\u4f7f\u7528\u516c\u94a5 2. https ssl/tls\u534f\u8bae\uff0c\u91cc\u9762\u7684\u63e1\u624b\u534f\u8bae\u4f7f\u7528\u4e86\u6d88\u606f\u8ba4\u8bc1\u7801 https = http + ssl/tls(security socket layer) 3. IPSec IP\u534f\u8bae\u7684\u589e\u5f3a\u7248\uff0c\u4f7f\u7528\u4e86\u6d88\u606f\u8ba4\u8bc1\u7801 HMAC 1. ==H\u4ee3\u8868\u54c8\u5e0c== HMAC\u662f\u4e00\u79cd\u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u6765\u6784\u9020\u6d88\u606f\u8ba4\u8bc1\u7801\u7684\u65b9\u6cd5\uff08RFC2104\uff09\uff0c\u5176\u4e2dHMAC\u7684H\u5c31\u662fHash\u7684\u610f\u601d\u3002 HMAC\u4e2d\u6240\u4f7f\u7528\u7684\u5355\u5411\u6563\u5217\u51fd\u6570\u5e76\u4e0d\u4ec5\u9650\u4e8e\u4e00\u79cd\uff0c\u4efb\u4f55\u9ad8\u5f3a\u5ea6\u7684\u5355\u5411\u6563\u5217\u51fd\u6570\u90fd\u53ef\u4ee5\u88ab\u7528\u4e8eHMAC,\u5982\u679c\u5c06\u6765\u8bbe\u8ba1\u51fa\u65b0\u7684\u5355\u5411\u6563\u5217\u51fd\u6570\uff0c\u4e5f\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u3002 \u4f7f\u7528SHA-I\u3001MD5\u3001RIPEMD-160\u6240\u6784\u9020\u7684HMAC\uff0c\u5206\u522b\u79f0\u4e3aHMAC-SHA-1\u3001HMAC-MD5\u548cHMAC-RlPEMD\u3002 2. \u4f7f\u7528\u5206\u6790\uff1a //\u63a5\u6536\u7aef\u548c\u9a8c\u8bc1\u7aef\u90fd\u8981\u6267\u884c //New\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u91c7\u7528hash.Hash\u4f5c\u4e3a\u5e95\u5c42hash\u63a5\u53e3\u3001key\u4f5c\u4e3a\u5bc6\u94a5\u7684HMAC\u7b97\u6cd5\u7684hash\u63a5\u53e3\u3002 func New(h func() hash.Hash, key []byte) hash.Hash - \u53c2\u65701\uff1a\u81ea\u5df1\u6307\u5b9a\u54c8\u5e0c\u7b97\u6cd5\uff0c \u662f\u4e00\u4e2a\u51fd\u6570 - md5.New - sha1.New - sha256.New - \u53c2\u65702\uff1a\u79d8\u94a5 - \u8fd4\u56de\u503c\uff1a\u54c8\u5e0c\u51fd\u6570\u5bf9\u8c61 //\u4ec5\u5728\u9a8c\u8bc1\u7aef\u6267\u884c //\u6bd4\u8f83\u4e24\u4e2aMAC\u662f\u5426\u76f8\u540c\uff0c\u800c\u4e0d\u4f1a\u6cc4\u9732\u5bf9\u6bd4\u65f6\u95f4\u4fe1\u606f\u3002\uff08\u4ee5\u89c4\u907f\u65f6\u95f4\u4fa7\u4fe1\u9053\u653b\u51fb\uff1a\u6307\u901a\u8fc7\u8ba1\u7b97\u6bd4\u8f83\u65f6\u82b1\u8d39\u7684\u65f6\u95f4\u7684\u957f\u77ed\u6765\u83b7\u53d6\u5bc6\u7801\u7684\u4fe1\u606f\uff0c\u7528\u4e8e\u5bc6\u7801\u7834\u89e3\uff09 func Equal(mac1, mac2 []byte) bool - \u53c2\u65701\uff1a\u81ea\u5df1\u8ba1\u7b97\u7684\u54c8\u5e0c\u503c - \u53c2\u65702\uff1a\u63a5\u6536\u5230\u7684\u54c8\u5e0c\u503c - \u8fd4\u56de\u503c\uff1a\u5bf9\u6bd4\u7ed3\u679c 3. \u4ee3\u7801 package main import ( \"crypto/hmac\" \"crypto/sha256\" \"fmt\" ) /* //\u63a5\u6536\u7aef\u548c\u9a8c\u8bc1\u7aef\u90fd\u8981\u6267\u884c //New\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u91c7\u7528hash.Hash\u4f5c\u4e3a\u5e95\u5c42hash\u63a5\u53e3\u3001key\u4f5c\u4e3a\u5bc6\u94a5\u7684HMAC\u7b97\u6cd5\u7684hash\u63a5\u53e3\u3002 func New(h func() hash.Hash, key []byte) hash.Hash - \u53c2\u65701\uff1a\u81ea\u5df1\u6307\u5b9a\u54c8\u5e0c\u7b97\u6cd5\uff0c \u662f\u4e00\u4e2a\u51fd\u6570 - md5.New - sha1.New - sha256.New - \u53c2\u65702\uff1a\u79d8\u94a5 - \u8fd4\u56de\u503c\uff1a\u54c8\u5e0c\u51fd\u6570\u5bf9\u8c61 //\u4ec5\u5728\u9a8c\u8bc1\u7aef\u6267\u884c //\u6bd4\u8f83\u4e24\u4e2aMAC\u662f\u5426\u76f8\u540c\uff0c\u800c\u4e0d\u4f1a\u6cc4\u9732\u5bf9\u6bd4\u65f6\u95f4\u4fe1\u606f\u3002\uff08\u4ee5\u89c4\u907f\u65f6\u95f4\u4fa7\u4fe1\u9053\u653b\u51fb\uff1a\u6307\u901a\u8fc7\u8ba1\u7b97\u6bd4\u8f83\u65f6\u82b1\u8d39\u7684\u65f6\u95f4\u7684\u957f\u77ed\u6765\u83b7\u53d6\u5bc6\u7801\u7684\u4fe1\u606f\uff0c\u7528\u4e8e\u5bc6\u7801\u7834\u89e3\uff09 func Equal(mac1, mac2 []byte) bool - \u53c2\u65701\uff1a\u81ea\u5df1\u8ba1\u7b97\u7684\u54c8\u5e0c\u503c - \u53c2\u65702\uff1a\u63a5\u6536\u5230\u7684\u54c8\u5e0c\u503c - \u8fd4\u56de\u503c\uff1a\u5bf9\u6bd4\u7ed3\u679c */ //\u751f\u6210hmac\uff08\u6d88\u606f\u8ba4\u8bc1\u7801\uff09 func generateHMAC(src []byte, key []byte) []byte { //1. \u521b\u5efa\u54c8\u5e0c\u5668 hasher := hmac.New(sha256.New, key) //2. \u751f\u6210mac\u503c //mac := hasher.Sum(src) hasher.Write(src) mac := hasher.Sum(nil) return mac } //\u8ba4\u8bc1mac func verifyHMAC(src, key, mac1 []byte) bool { //1. \u5bf9\u7aef\u63a5\u6536\u5230\u7684\u6e90\u6570\u636e //2. \u5bf9\u7aef\u63a5\u6536\u5230\u7684mac1 //3. \u5bf9\u7aef\u8ba1\u7b97\u672c\u5730\u7684mac2 mac2 := generateHMAC(src, key) //4. \u5bf9\u6bd4mac1\u4e0emac2 return hmac.Equal(mac1, mac2) } func main() { src := []byte(\"hello world\") key := []byte(\"1234567890\") mac1 := generateHMAC(src, key) fmt.Printf(\"mac1 : %x\\n\", mac1) isEqual := verifyHMAC(src, key, mac1) fmt.Printf(\"isEqual : %v\\n\", isEqual) srcChanged := []byte(\"hello world!!!!!\") isEqual = verifyHMAC(srcChanged, key, mac1) fmt.Printf(\"after changed, isEqual : %v\\n\", isEqual) } \u6d88\u606f\u8ba4\u8bc1\u5b58\u5728\u7684\u95ee\u9898 \u65e0\u6cd5\u6709\u6548\u7684\u914d\u9001\u79d8\u94a5 \u65e0\u6cd5\u8fdb\u884c\u7b2c\u4e09\u65b9\u8bc1\u660e \u65e0\u6cd5\u9632\u6b62\u53d1\u9001\u65b9\u5426\u8ba4 ==\u89e3\u51b3\u529e\u6cd5\uff1a\u975e\u5bf9\u79f0\u52a0\u5bc6\u6570\u5b57\u7b7e\u540d\uff01\uff01== \u4e03\u3001\u6570\u5b57\u7b7e\u540d \u57fa\u7840\u77e5\u8bc6 \"\u6570\u5b57\u7b7e\u540d --- \u6d88\u606f\u5230\u5e95\u662f\u8c01\u5199\u7684\" \u79c1\u94a5 \u516c\u94a5 \u975e\u5bf9\u79f0\u52a0\u5bc6 \u63a5\u6536\u8005\u89e3\u5bc6\u65f6\u4f7f\u7528 \u53d1\u9001\u8005\u52a0\u5bc6\u65f6\u4f7f\u7528 \u6570\u5b57\u7b7e\u540d \u7b7e\u540d\u8005\u751f\u6210\u7b7e\u540d\u65f6\u4f7f\u7528 \u9a8c\u8bc1\u8005\u9a8c\u8bc1\u7b7e\u540d\u65f6\u4f7f\u7528 \u8c01\u6301\u6709\u79d8\u94a5\uff1f \u4e2a\u4eba\u6301\u6709 \u53ea\u8981\u9700\u8981\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u6301\u6709 \u516c\u94a5\uff0c\u79c1\u94a5 \u516c\u94a5\uff1a\u52a0\u5bc6 \u79c1\u94a5\uff1a\u6570\u5b57\u7b7e\u540d \u7b7e\u540d\u8ba4\u8bc1\u6d41\u7a0b \u6ce8\u610f\uff1a ==\u7b7e\u540d\u7684\u6570\u636e\u4e0d\u662f\u6570\u636e\u672c\u8eab\uff0c\u800c\u662f\u6570\u636e\u7684\u54c8\u5e0c\u503c== \u6d88\u606f\u8ba4\u8bc1\u95ee\u9898\u7684\u89e3\u51b3 \u65e0\u6cd5\u6709\u6548\u7684\u914d\u9001\u79d8\u94a5 ===\u300b \u6570\u5b57\u7b7e\u540d\u4e2d\uff0c\u4e0d\u9700\u8981\u534f\u5546\u79d8\u94a5\uff0c\u6ca1\u6709\u914d\u9001\u9700\u6c42 \u65e0\u6cd5\u8fdb\u884c\u7b2c\u4e09\u65b9\u8bc1\u660e ===\u300b \u4efb\u4f55\u4eba\u90fd\u6301\u6709\u516c\u94a5\uff0c\u90fd\u53ef\u4ee5\u5e2e\u52a9\u8ba4\u8bc1 \u65e0\u6cd5\u9632\u6b62\u53d1\u9001\u65b9\u5426\u8ba4 ===\u300b \u79c1\u94a5\u53ea\u6709\u53d1\u9001\u65b9\u6301\u6709\uff0c\u65e0\u6cd5\u8fdb\u884c\u62b5\u8d56 RSA\u6570\u5b57\u7b7e\u540d\u4e0e\u8ba4\u8bc1 package main import ( \"io/ioutil\" \"encoding/pem\" \"crypto/x509\" \"crypto/sha256\" \"crypto/rsa\" \"crypto/rand\" \"crypto\" \"fmt\" ) /* \u79c1\u94a5\u7b7e\u540d: 1. \u63d0\u4f9b\u79c1\u94a5\u6587\u4ef6\uff0c \u89e3\u6790\u51fa\u79c1\u94a5\u5185\u5bb9\uff08decode, parse....\uff09 2. \u4f7f\u7528\u79c1\u94a5\u8fdb\u884c\u6570\u5b57\u7b7e\u540d \u516c\u94a5\u8ba4\u8bc1 1. \u63d0\u4f9b\u516c\u94a5\u6587\u4ef6\uff0c \u89e3\u6790\u51fa\u516c\u94a5\u5185\u5bb9\uff08decode, parse....\uff09 2. \u4f7f\u7528\u516c\u94a5\u8fdb\u884c\u6570\u5b57\u7b7e\u540d\u8ba4\u8bc1 */ //\u79c1\u94a5\u7b7e\u540d: \u63d0\u4f9b\u79c1\u94a5\uff0c\u7b7e\u540d\u6570\u636e\uff0c\u5f97\u5230\u6570\u5b57\u7b7e\u540d func rsaSignData(filename string, src []byte) ([]byte, error) { //\u4e00\u3001 \u63d0\u4f9b\u79c1\u94a5\u6587\u4ef6\uff0c \u89e3\u6790\u51fa\u79c1\u94a5\u5185\u5bb9\uff08decode, parse....\uff09 //1. \u901a\u8fc7\u79c1\u94a5\u6587\u4ef6\uff0c\u8bfb\u53d6\u79c1\u94a5\u4fe1\u606f ==\u300b pem encode \u7684\u6570\u636e info, err := ioutil.ReadFile(filename) if err != nil { return nil, err } //2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e block, _ := pem.Decode(info) //\u8fd4\u56de\u503c1 \uff1apem.block //\u8fd4\u56de\u503c2\uff1arest\u53c2\u52a0\u662f\u672a\u89e3\u7801\u5b8c\u7684\u6570\u636e\uff0c\u5b58\u50a8\u5728\u8fd9\u91cc //type Block struct { // Type string // \u5f97\u81ea\u524d\u8a00\u7684\u7c7b\u578b\uff08\u5982\"RSA PRIVATE KEY\"\uff09 // Headers map[string]string // \u53ef\u9009\u7684\u5934\u9879 // Bytes []byte // \u5185\u5bb9\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c\u4e00\u822c\u662fDER\u7f16\u7801\u7684ASN.1\u7ed3\u6784 //} //3. \u89e3\u7801der\uff0c\u5f97\u5230\u79c1\u94a5 //derText := block.Bytes derText := block.Bytes privateKey, err := x509.ParsePKCS1PrivateKey(derText) if err != nil { return nil, err } //\u4e8c. \u4f7f\u7528\u79c1\u94a5\u8fdb\u884c\u6570\u5b57\u7b7e\u540d //1. \u83b7\u53d6\u539f\u6587\u7684\u54c8\u5e0c\u503c hash := sha256.Sum256(src) //\u8fd4\u56de\u503c\u662f[32]byte\uff0c \u4e00\u4e2a\u6570\u7ec4 //SignPKCS1v15\u4f7f\u7528RSA PKCS#1 v1.5\u89c4\u5b9a\u7684RSASSA-PKCS1-V1_5-SIGN\u7b7e\u540d\u65b9\u6848\u8ba1\u7b97\u7b7e\u540d //func SignPKCS1v15(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte) (s []byte, err error) //2. \u6267\u884c\u7b7e\u540d\u64cd\u4f5c signature, err := rsa.SignPKCS1v15(rand.Reader, privateKey, crypto.SHA256, hash[:]) if err != nil { return nil, err } return signature, nil } //\u516c\u94a5\u8ba4\u8bc1 func rsaVerifySignature(sig []byte, src []byte, filename string) error { //\u4e00. \u63d0\u4f9b\u516c\u94a5\u6587\u4ef6\uff0c \u89e3\u6790\u51fa\u516c\u94a5\u5185\u5bb9\uff08decode, parse....\uff09 //1. \u901a\u8fc7\u516c\u94a5\u6587\u4ef6\uff0c\u8bfb\u53d6\u516c\u94a5\u4fe1\u606f ==\u300b pem encode \u7684\u6570\u636e info, err := ioutil.ReadFile(filename) if err != nil { return err } //2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e block, _ := pem.Decode(info) //3. \u89e3\u7801der\uff0c\u5f97\u5230\u516c\u94a5 //derText := block.Bytes derText := block.Bytes publicKey, err := x509.ParsePKCS1PublicKey(derText) if err != nil { return err } //\u4e8c. \u4f7f\u7528\u516c\u94a5\u8fdb\u884c\u6570\u5b57\u7b7e\u540d\u8ba4\u8bc1 //1. \u83b7\u53d6\u539f\u6587\u7684\u54c8\u5e0c\u503c hash := sha256.Sum256(src) //\u8fd4\u56de\u503c\u662f[32]byte\uff0c \u4e00\u4e2a\u6570\u7ec4 //VerifyPKCS1v15\u8ba4\u8bc1RSA PKCS#1 v1.5\u7b7e\u540d\u3002hashed\u662f\u4f7f\u7528\u63d0\u4f9b\u7684hash\u53c2\u6570\u5bf9\uff08\u8981\u7b7e\u540d\u7684\uff09\u539f\u59cb\u6570\u636e\u8fdb\u884chash\u7684\u7ed3\u679c\u3002\u5408\u6cd5\u7684\u7b7e\u540d\u4f1a\u8fd4\u56denil\uff0c\u5426\u5219\u8868\u793a\u7b7e\u540d\u4e0d\u5408\u6cd5\u3002 //func VerifyPKCS1v15(pub *PublicKey, hash crypto.Hash, hashed []byte, sig []byte) error { err = rsa.VerifyPKCS1v15(publicKey, crypto.SHA256, hash[:], sig) return err } func main() { src := []byte(\"hello world!!!!\") signature, err := rsaSignData(PrivateKeyFile, src) if err != nil { fmt.Printf(\"\u7b7e\u540d\u5931\u8d25!, err: %s\\n\", err) } fmt.Printf(\"signature \uff1a %x\\n\", signature) //fmt.Printf(\"signature \uff1a %s\\n\", signature) fmt.Printf(\"++++++++++\\n\") src1 := []byte(\"hello world!!!!=======\") err = rsaVerifySignature(signature, src1, PublicKeyFile) if err != nil { fmt.Printf(\"\u7b7e\u540d\u6821\u9a8c\u5931\u8d25!, err: %s\\n\", err) return } fmt.Printf(\"\u7b7e\u540d\u6821\u9a8c\u6210\u529f!\\n\") } \u692d\u5706\u66f2\u7ebf\u4ecb\u7ecd \u6982\u5ff5 \u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u5b66\uff08\u82f1\u8bed\uff1aElliptic curve cryptography\uff0c\u7f29\u5199\u4e3a ECC\uff09\uff0c\u4e00\u79cd\u5efa\u7acb\u516c\u5f00\u5bc6\u94a5\u52a0\u5bc6\u7684\u7b97\u6cd5\uff0c\u57fa\u4e8e\u692d\u5706\u66f2\u7ebf\u6570\u5b66\u3002\u692d\u5706\u66f2\u7ebf\u5728\u5bc6\u7801\u5b66\u4e2d\u7684\u4f7f\u7528\u662f\u57281985\u5e74\u7531Neal Koblitz\u548cVictor Miller\u5206\u522b\u72ec\u7acb\u63d0\u51fa\u7684\u3002 ECC\u7684\u4e3b\u8981\u4f18\u52bf\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5b83\u6bd4\u5176\u4ed6\u7684\u65b9\u6cd5\u4f7f\u7528\u66f4\u5c0f\u7684\u5bc6\u94a5\u2014\u2014\u6bd4\u5982RSA\u52a0\u5bc6\u7b97\u6cd5\u2014\u2014\u63d0\u4f9b\u76f8\u5f53\u7684\u6216\u66f4\u9ad8\u7b49\u7ea7\u7684\u5b89\u5168\u3002 \u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u5b66\u7684\u8bb8\u591a\u5f62\u5f0f\u6709\u7a0d\u5fae\u7684\u4e0d\u540c\uff0c\u6240\u6709\u7684\u90fd\u4f9d\u8d56\u4e8e\u88ab\u5e7f\u6cdb\u627f\u8ba4\u7684\u89e3\u51b3\u692d\u5706\u66f2\u7ebf\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\u4e0a\u3002\u4e0e\u4f20\u7edf\u7684\u57fa\u4e8e\u5927\u8d28\u6570\u56e0\u5b50\u5206\u89e3\u56f0\u96be\u6027\u7684\u52a0\u5bc6\u65b9\u6cd5\u4e0d\u540c\uff0cECC\u901a\u8fc7\u692d\u5706\u66f2\u7ebf\u65b9\u7a0b\u5f0f\u7684\u6027\u8d28\u4ea7\u751f\u5bc6\u94a5\u3002 ECC 164\u4f4d\u7684\u5bc6\u94a5\u4ea7\u751f\u7684\u4e00\u4e2a\u5b89\u5168\u7ea7\u76f8\u5f53\u4e8eRSA 1024\u4f4d\u5bc6\u94a5\u63d0\u4f9b\u7684\u4fdd\u5bc6\u5f3a\u5ea6\uff0c\u800c\u4e14\u8ba1\u7b97\u91cf\u8f83\u5c0f\uff0c\u5904\u7406\u901f\u5ea6\u66f4\u5feb\uff0c\u5b58\u50a8\u7a7a\u95f4\u548c\u4f20\u8f93\u5e26\u5bbd\u5360\u7528\u8f83\u5c11\u3002==\u76ee\u524d\u6211\u56fd\u5c45\u6c11\u4e8c\u4ee3\u8eab\u4efd\u8bc1\u6b63\u5728\u4f7f\u7528 256 \u4f4d\u7684\u692d\u5706\u66f2\u7ebf\u5bc6\u7801\uff0c\u865a\u62df\u8d27\u5e01 \u6bd4\u7279\u5e01 \u4e5f\u9009\u62e9ECC\u4f5c\u4e3a\u52a0\u5bc6\u7b97\u6cd5\u3002== \u751f\u6210\u79c1\u94a5\u516c\u94a5 // PublicKey represents an ECDSA public key. type PublicKey struct { elliptic.Curve X, Y *big.Int } // PrivateKey represents an ECDSA private key. type PrivateKey struct { PublicKey D *big.Int } \u6ce8\u610f\u70b9\uff1a //1. - \u9009\u62e9\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\uff08\u5728elliptic\u5305\uff09//rsa\u9700\u8981\u4f20\u5165\u79d8\u94a5\u4f4d\u6570 //type Curve //func P224() Curve //func P256() Curve //func P384() Curve //func P521() Curve //2.\u79c1\u94a5\u7f16\u7801\u7684\u51fd\u6570 derText, err := x509.MarshalECPrivateKey(privateKey) //3. \u516c\u94a5\u7f16\u7801\u51fd\u6570\uff0c \u4e00\u5b9a\u8981\u4f20\u9012\u5730\u5740\uff0c\u5426\u5219\u51fa\u9519 derText2, err := x509.MarshalPKIXPublicKey(&publicKey) package main import ( \"crypto/elliptic\" \"crypto/ecdsa\" \"crypto/rand\" \"crypto/x509\" \"encoding/pem\" \"os\" \"fmt\" ) //\u751f\u6210\u79c1\u94a5\u516c\u94a5 func generateEccKeypair() { //- \u9009\u62e9\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\uff08\u5728elliptic\u5305\uff09 //type Curve //func P224() Curve //func P256() Curve //func P384() Curve //func P521() Curve curve := elliptic.P521() //- \u4f7f\u7528ecdsa\u5305\uff0c\u521b\u5efa\u79c1\u94a5 //ecdsa\u692d\u5706\u66f2\u7ebf\u6570\u5b57\u7b7e\u540d //GenerateKey\u51fd\u6570\u751f\u6210\u79d8\u94a5\u5bf9 //func GenerateKey(c elliptic.Curve, rand io.Reader) (priv *PrivateKey, err error) privateKey, err := ecdsa.GenerateKey(curve, rand.Reader) checkErr(\"generate key failed!\", err) //- \u4f7f\u7528x509\u8fdb\u884c\u7f16\u7801 //MarshalECPrivateKey\u5c06ecdsa\u79c1\u94a5\u5e8f\u5217\u5316\u4e3aASN.1 DER\u7f16\u7801\u3002 //func MarshalECPrivateKey(key *ecdsa.PrivateKey) ([]byte, error) derText, err := x509.MarshalECPrivateKey(privateKey) checkErr(\"MarshalECPrivateKey\", err) //- \u5199\u5165pem.Block\u4e2d block1 := pem.Block{ Type: \"ECC PRIVATE KEY\", Headers: nil, Bytes: derText, } //- pem.Encode fileHander, err := os.Create(EccPrivateKeyFile) checkErr(\"os.Create Failed\", err) defer fileHander.Close() err = pem.Encode(fileHander, &block1) checkErr(\"pem Encode failed\", err) fmt.Printf(\"++++++++++++++++++++++\\n\") //\u83b7\u53d6\u516c\u94a5 publicKey := privateKey.PublicKey //- \u4f7f\u7528x509\u8fdb\u884c\u7f16\u7801 //\u901a\u7528\u7684\u5e8f\u5217\u5316\u65b9\u5f0f //derText2, err := x509.MarshalPKIXPublicKey(publicKey) derText2, err := x509.MarshalPKIXPublicKey(&publicKey) //\u4f20\u9012\u5730\u5740 checkErr(\"MarshalPKIXPublicKey\", err) //- \u5199\u5165pem.Block\u4e2d block2 := pem.Block{ Type: \"ECC PUBLICK KEY\", Headers: nil, Bytes: derText2, } //- pem.Encode fileHander2, err := os.Create(EccPublicKeyFile) checkErr(\"public key os.Create Failed\", err) defer fileHander2.Close() err = pem.Encode(fileHander2, &block2) checkErr(\"public key pem Encode failed\", err) } func main() { generateEccKeypair() } ==Golang\uff0c\u4e0d\u652f\u6301\u52a0\u89e3\u5bc6\uff0c\u652f\u6301ECC\u7b7e\u540d== \u79c1\u94a5\u7b7e\u540d package main import ( \"io/ioutil\" \"encoding/pem\" \"crypto/x509\" \"crypto/sha256\" \"crypto/ecdsa\" \"crypto/rand\" \"math/big\" \"fmt\" ) //\u81ea\u5df1\u5b9a\u4e49\u7684\u7b7e\u540d\u7ed3\u6784 type Signature struct { r *big.Int s *big.Int } //\u4f7f\u7528\u79c1\u94a5\u7b7e\u540d func eccSignData(filename string, src []byte) (Signature, error) { //1. \u8bfb\u53d6\u79c1\u94a5\uff0c\u89e3\u7801 info, err := ioutil.ReadFile(filename) if err != nil { return Signature{}, err } //2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e block, _ := pem.Decode(info) //\u8fd4\u56de\u503c1 \uff1apem.block //\u8fd4\u56de\u503c2\uff1arest\u53c2\u52a0\u662f\u672a\u89e3\u7801\u5b8c\u7684\u6570\u636e\uff0c\u5b58\u50a8\u5728\u8fd9\u91cc //3. \u89e3\u7801der\uff0c\u5f97\u5230\u79c1\u94a5 //derText := block.Bytes derText := block.Bytes privateKey, err := x509.ParseECPrivateKey(derText) if err != nil { return Signature{}, err } //2. \u5bf9\u539f\u6587\u751f\u6210\u54c8\u5e0c hash /*[32]byte*/ := sha256.Sum256(src) //3. \u4f7f\u7528\u79c1\u94a5\u7b7e\u540d //\u4f7f\u7528\u79c1\u94a5\u5bf9\u4efb\u610f\u957f\u5ea6\u7684hash\u503c\uff08\u5fc5\u987b\u662f\u8f83\u5927\u4fe1\u606f\u7684hash\u7ed3\u679c\uff09\u8fdb\u884c\u7b7e\u540d\uff0c\u8fd4\u56de\u7b7e\u540d\u7ed3\u679c\uff08\u4e00\u5bf9\u5927\u6574\u6570\uff09\u3002\u79c1\u94a5\u7684\u5b89\u5168\u6027\u53d6\u51b3\u4e8e\u5bc6\u7801\u8bfb\u53d6\u5668 //func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err error) r, s, err := ecdsa.Sign(rand.Reader, privateKey, hash[:]) if err != nil { return Signature{}, err } sig := Signature{r, s} return sig, nil } //\u4f7f\u7528\u516c\u94a5\u6821\u9a8c func eccVerifySig(filename string, src []byte, sig []byte) bool { //1. \u8bfb\u53d6\u516c\u94a5\uff0c\u89e3\u7801 //2. \u5bf9\u539f\u6587\u751f\u6210\u54c8\u5e0c //3. \u4f7f\u7528\u516c\u94a5\u9a8c\u8bc1 //TODO return true } func main() { src := []byte(\"Golang\uff0c\u4e0d\u652f\u6301\u52a0\u89e3\u5bc6\uff0c\u652f\u6301ECC\u7b7e\u540d\") sig, err := eccSignData(EccPrivateKeyFile, src) if err != nil { fmt.Printf(\"err : %s\\n\", err) } fmt.Printf(\"signature : %s\\n\", sig) fmt.Printf(\"signature hex : %x\\n\", sig) } \u516c\u94a5\u9a8c\u8bc1 //\u4f7f\u7528\u516c\u94a5\u6821\u9a8c func eccVerifySig(filename string, src []byte, sig Signature) error { //1. \u8bfb\u53d6\u516c\u94a5\uff0c\u89e3\u7801 info, err := ioutil.ReadFile(filename) if err != nil { return err } //2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e block, _ := pem.Decode(info) //3. \u89e3\u7801der\uff0c\u5f97\u5230\u516c\u94a5 //derText := block.Bytes derText := block.Bytes //publicKey, err := x509.ParsePKCS1PublicKey(derText) publicKeyInterface, err := x509.ParsePKIXPublicKey(derText) if err != nil { return err } publicKey, ok := publicKeyInterface.(*ecdsa.PublicKey) if !ok { return errors.New(\"\u65ad\u8a00\u5931\u8d25\uff0c\u975eecds\u516c\u94a5!\\n\") } //2. \u5bf9\u539f\u6587\u751f\u6210\u54c8\u5e0c hash := sha256.Sum256(src) //3. \u4f7f\u7528\u516c\u94a5\u9a8c\u8bc1 //\u4f7f\u7528\u516c\u94a5\u9a8c\u8bc1hash\u503c\u548c\u4e24\u4e2a\u5927\u6574\u6570r\u3001s\u6784\u6210\u7684\u7b7e\u540d\uff0c\u5e76\u8fd4\u56de\u7b7e\u540d\u662f\u5426\u5408\u6cd5\u3002 //func Verify(pub *PublicKey, hash []byte, r, s *big.Int) bool isValid := ecdsa.Verify(publicKey, hash[:], sig.r, sig.s) if !isValid { return errors.New(\"\u6821\u9a8c\u5931\u8d25!\") } return nil } main.go func main() { src := []byte(\"Golang\uff0c\u4e0d\u652f\u6301\u52a0\u89e3\u5bc6\uff0c\u652f\u6301ECC\u7b7e\u540d\") sig, err := eccSignData(EccPrivateKeyFile, src) if err != nil { fmt.Printf(\"err : %s\\n\", err) } fmt.Printf(\"signature : %s\\n\", sig) fmt.Printf(\"signature hex : %x\\n\", sig) fmt.Printf(\"++++++++++++++++++=\\n\") src1 := []byte(\"Golang\uff0c\u4e0d\u652f\u6301\u52a0\u89e3\u5bc6\uff0c\u652f\u6301ECC\u7b7e\u540d!!!!!!!!!!!\") err = eccVerifySig(EccPublicKeyFile, src1, sig) if err != nil { fmt.Println(err) return } fmt.Printf(\"\u7b7e\u540d\u6821\u9a8c\u6210\u529f!\\n\") } bigint\u4ecb\u7ecd bytes() setBytes() setString() Lsh()\u5de6\u79fb Rsh\uff08\uff09\u53f3\u79fb Cmp\uff08\uff09\u5bf9\u6bd4 package main import ( \"math/big\" \"fmt\" ) func main() { var b1 big.Int var b2 big.Int var b3 big.Int var b4 big.Int b1.SetString(\"10000\", 10) b2.SetString(\"20000\", 10) fmt.Printf(\"b2 bytes : %v\\n\", b2.Bytes()) b4.Add(&b1, &b2) fmt.Printf(\"b4 : %d\\n\", b4.Int64()) s1 := []byte(\"4000\") b3.SetBytes(s1) b3.Add(&b1, &b2) fmt.Printf(\"b3 : %v\\n\", b3) fmt.Printf(\"b3 : %v\\n\", b3.Int64()) } \u5c06r,s\u62fc\u63a5\u6210bytes\u8fd4\u56de r,s \u90fd\u662fbig.int\u7c7b\u578b\uff0c\u5b83\u4eec\u7684\u957f\u5ea6\u76f8\u540c \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7bigint\u7684bytes\uff08\uff09\u65b9\u6cd5\uff0c\u5c06r\uff0cs\u7684\u5b57\u8282\u6d41\u62fc\u63a5\u5230\u4e00\u8d77\uff0c\u6574\u4f53\u8fd4\u56de \u5728\u9a8c\u8bc1\u7aef\uff0c\u5c06bytes\u4ece\u4e2d\u95f4\u4e00\u5206\u4e3a\u4e8c\uff0c\u5f97\u5230\u4e24\u6bb5bytes \u901a\u8fc7bigint setBytes\u65b9\u6cd5\u5c06r,s \u8fd8\u539f \u6570\u5b57\u7b7e\u540d\u5b58\u5728\u7684\u95ee\u9898 \u89e3\u51b3\u65b9\u6cd5\uff1a\u5f15\u5165CA\u673a\u6784 \u6d4f\u89c8\u5668\u8bc1\u4e66 \u516b\u3001\u8bc1\u4e66\u4f7f\u7528 \u8bc1\u4e66\u4f7f\u7528 \u6240\u6709\u7684\u7f51\u7ad9\u90fd\u8f6c\u6210https\uff0c https = http + ssl ssl : Secure Socket Layer\uff0c \u662f\u4e00\u4e2a\u901a\u8baf\u534f\u8bae\uff0c\u5728\u901a\u8baf\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u7528\u4e86\u6570\u5b57\u8bc1\u4e66 https\u901a\u4fe1\u8be6\u60c5 \u6240\u6709\u7684\u901a\u4fe1\u4e0d\u518d\u4f20\u8f93\u516c\u94a5\uff0c\u800c\u662f\u4f20\u8f93\u6570\u5b57\u8bc1\u4e66\u3002 \u8bc1\u4e66\u91cc\u9762\u5305\u542b\u4e86\u516c\u94a5\uff0c\u53ef\u4ee5\u7531CA\u673a\u6784\u8ba4\u8bc1\u3002 1. \u7f51\u7ad9\u63d0\u4f9b\u8005\u4f1a\u81ea\u5df1\u751f\u6210\u516c\u94a5\u79c1\u94a5\u3002 - \u4e5f\u53ef\u4ee5\u4e0d\u81ea\u5df1\u751f\u6210\uff0c\u5168\u90e8\u7531CA\u5e2e\u52a9\u751f\u6210 2. \u670d\u52a1\u5668\u63d0\u4f9b\u8005\u5c06\u516c\u94a5\u53d1\u9001\u7ed9\u9009\u62e9\u7684CA\u673a\u6784 3. CA\u673a\u6784\u4e5f\u6709\u81ea\u5df1\u7684\u79c1\u94a5\u516c\u94a5\u3002CA\u4f7f\u7528\u81ea\u5df1\u7684\u79c1\u94a5\u5bf9\u670d\u52a1\u5668\u7684\u516c\u94a5\u8fdb\u884c\u7b7e\u540d - \u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u8f85\u52a9\u4fe1\u606f\uff08\u53d1\u884c\u673a\u6784\uff0c\u4e3b\u9898\uff0c\u6307\u7eb9\uff09 - \u516c\u94a5 - \u7b7e\u540d CA\u5411\u670d\u52a1\u5668\u9881\u53d1\u4e00\u4e2a\u6570\u5b57\u8bc1\u4e66 4. \u5f53\u7528\u6237\u8bbf\u95ee\u670d\u52a1\u5668\u7684\u65f6\u5019\uff0c\u670d\u52a1\u5668\u4f1a\u5c06CA\u8bc1\u4e66\u53d1\u9001\u7ed9\u5ba2\u6237 5. \u5728\u5ba2\u6237\u7684\u6d4f\u89c8\u5668\u4e2d\uff0c\u5df2\u7ecf\u968f\u7740\u64cd\u4f5c\u7cfb\u7edf\u9884\u88c5\u4e86\u77e5\u540dCA\u673a\u6784\u7684\u6839\u8bc1\u4e66\uff0c\u8fd9\u91cc\u9762\u5305\u542b\u4e86CA\u673a\u6784\u7684\u516c\u94a5\uff0c\u6d4f\u89c8\u5668\u5c31\u4f1a\u5bf9\u670d\u52a1\u5668\u7684\u8bc1\u4e66\u8fdb\u884c\u9a8c\u8bc1 6. \u5982\u679c\u9a8c\u8bc1\u6210\u529f\uff0c\u8bf4\u660e\u670d\u52a1\u5668\u53ef\u9760\uff0c\u53ef\u4ee5\u6b63\u5e38\u901a\u4fe1\uff08\u5c0f\u9501\u5934\uff09 7. \u5982\u679c\u9a8c\u8bc1\u5931\u8d25\uff0c\u663e\u793a\uff08Not Secure\uff09\uff0c \u63d0\u793aWarning 8. \u8bc1\u4e66\u6709\u6548\u65f6\uff0c \u6d4f\u89c8\u5668\u4f1a\u5c06\u81ea\u5df1\u652f\u6301\u7684\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\uff08des, 3des, aes\uff09\u53d1\u9001\u7ed9\u670d\u52a1\u5668\uff0c \u751f\u6210\u968f\u673a\u79d8\u94a5\uff08\u5bf9\u79f0\uff09\uff0c\u4f7f\u7528\u670d\u52a1\u5668\u7684\u516c\u94a5\uff0c\u5bf9\u4e0a\u8ff0\u4fe1\u606f\u52a0\u5bc6\u3002\u53d1\u9001\u7ed9\u670d\u52a1\u5668 9. \u670d\u52a1\u5668\u9009\u62e9\u4e00\u4e2a\u52a0\u5bc6\u7b97\u6cd5\uff0c\u4f7f\u7528\u5bf9\u79f0\u79d8\u94a5\u52a0\u5bc6\u6d88\u606f\uff0c\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef 10. \u53cc\u65b9\u8fbe\u6210\u4e00\u81f4\uff0c\u63a5\u4e0b\u6765\u901a\u4fe1\u8f6c\u6362\u4e3a\u5bf9\u79f0\u52a0\u5bc6 windows\u4e0b\u67e5\u770b\u6570\u5b57\u8bc1\u4e66 #\u6253\u5f00\u8bc1\u4e66\u7ba1\u7406\u5668 Win + R certmgr.msc \u5bfc\u51fader\u683c\u5f0f\u6570\u5b57\u8bc1\u4e66 \u4f7f\u7528openssl\u547d\u4ee4\u67e5\u770b\u8bc1\u4e66\u4fe1\u606f openssl x509 -in <\u8bc1\u4e66\u540d\u5b57.crt> -inform der -text //-pubkey //-noout \u8bc1\u4e66\u8be6\u60c5\uff1a duke ~/Desktop$ openssl x509 -in GlobalSignTest.cer -inform der -text -pubkey Certificate: Data: Version: 3 (0x2) Serial Number: 04:00:00:00:00:01:21:58:53:08:a2 Signature Algorithm: sha256WithRSAEncryption Issuer: OU=GlobalSign Root CA - R3, O=GlobalSign, CN=GlobalSign Validity Not Before: Mar 18 10:00:00 2009 GMT Not After : Mar 18 10:00:00 2029 GMT Subject: OU=GlobalSign Root CA - R3, O=GlobalSign, CN=GlobalSign Subject Public Key Info: Public Key Algorithm: rsaEncryption Public-Key: (2048 bit) Modulus: 00:cc:25:76:90:79:06:78:22:16:f5:c0:83:b6:84: ca:28:9e:fd:05:76:11:c5:ad:88:72:fc:46:02:43: c7:b2:8a:9d:04:5f:24:cb:2e:4b:e1:60:82:46:e1: 52:ab:0c:81:47:70:6c:dd:64:d1:eb:f5:2c:a3:0f: 82:3d:0c:2b:ae:97:d7:b6:14:86:10:79:bb:3b:13: 80:77:8c:08:e1:49:d2:6a:62:2f:1f:5e:fa:96:68: df:89:27:95:38:9f:06:d7:3e:c9:cb:26:59:0d:73: de:b0:c8:e9:26:0e:83:15:c6:ef:5b:8b:d2:04:60: ca:49:a6:28:f6:69:3b:f6:cb:c8:28:91:e5:9d:8a: 61:57:37:ac:74:14:dc:74:e0:3a:ee:72:2f:2e:9c: fb:d0:bb:bf:f5:3d:00:e1:06:33:e8:82:2b:ae:53: a6:3a:16:73:8c:dd:41:0e:20:3a:c0:b4:a7:a1:e9: b2:4f:90:2e:32:60:e9:57:cb:b9:04:92:68:68:e5: 38:26:60:75:b2:9f:77:ff:91:14:ef:ae:20:49:fc: ad:40:15:48:d1:02:31:61:19:5e:b8:97:ef:ad:77: b7:64:9a:7a:bf:5f:c1:13:ef:9b:62:fb:0d:6c:e0: 54:69:16:a9:03:da:6e:e9:83:93:71:76:c6:69:85: 82:17 Exponent: 65537 (0x10001) X509v3 extensions: X509v3 Key Usage: critical Certificate Sign, CRL Sign X509v3 Basic Constraints: critical CA:TRUE X509v3 Subject Key Identifier: 8F:F0:4B:7F:A8:2E:45:24:AE:4D:50:FA:63:9A:8B:DE:E2:DD:1B:BC Signature Algorithm: sha256WithRSAEncryption 4b:40:db:c0:50:aa:fe:c8:0c:ef:f7:96:54:45:49:bb:96:00: 09:41:ac:b3:13:86:86:28:07:33:ca:6b:e6:74:b9:ba:00:2d: ae:a4:0a:d3:f5:f1:f1:0f:8a:bf:73:67:4a:83:c7:44:7b:78: e0:af:6e:6c:6f:03:29:8e:33:39:45:c3:8e:e4:b9:57:6c:aa: fc:12:96:ec:53:c6:2d:e4:24:6c:b9:94:63:fb:dc:53:68:67: 56:3e:83:b8:cf:35:21:c3:c9:68:fe:ce:da:c2:53:aa:cc:90: 8a:e9:f0:5d:46:8c:95:dd:7a:58:28:1a:2f:1d:de:cd:00:37: 41:8f:ed:44:6d:d7:53:28:97:7e:f3:67:04:1e:15:d7:8a:96: b4:d3:de:4c:27:a4:4c:1b:73:73:76:f4:17:99:c2:1f:7a:0e: e3:2d:08:ad:0a:1c:2c:ff:3c:ab:55:0e:0f:91:7e:36:eb:c3: 57:49:be:e1:2e:2d:7c:60:8b:c3:41:51:13:23:9d:ce:f7:32: 6b:94:01:a8:99:e7:2c:33:1f:3a:3b:25:d2:86:40:ce:3b:2c: 86:78:c9:61:2f:14:ba:ee:db:55:6f:df:84:ee:05:09:4d:bd: 28:d8:72:ce:d3:62:50:65:1e:eb:92:97:83:31:d9:b3:b5:ca: 47:58:3f:5f -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzCV2kHkGeCIW9cCDtoTK KJ79BXYRxa2IcvxGAkPHsoqdBF8kyy5L4WCCRuFSqwyBR3Bs3WTR6/Usow+CPQwr rpfXthSGEHm7OxOAd4wI4UnSamIvH176lmjfiSeVOJ8G1z7JyyZZDXPesMjpJg6D FcbvW4vSBGDKSaYo9mk79svIKJHlnYphVzesdBTcdOA67nIvLpz70Lu/9T0A4QYz 6IIrrlOmOhZzjN1BDiA6wLSnoemyT5AuMmDpV8u5BJJoaOU4JmB1sp93/5EU764g SfytQBVI0QIxYRleuJfvrXe3ZJp6v1/BE++bYvsNbOBUaRapA9pu6YOTcXbGaYWC FwIDAQAB -----END PUBLIC KEY----- -----BEGIN CERTIFICATE----- MIIDXzCCAkegAwIBAgILBAAAAAABIVhTCKIwDQYJKoZIhvcNAQELBQAwTDEgMB4G A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjMxEzARBgNVBAoTCkdsb2JhbFNp Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDkwMzE4MTAwMDAwWhcNMjkwMzE4 MTAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEG A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI hvcNAQEBBQADggEPADCCAQoCggEBAMwldpB5BngiFvXAg7aEyiie/QV2EcWtiHL8 RgJDx7KKnQRfJMsuS+FggkbhUqsMgUdwbN1k0ev1LKMPgj0MK66X17YUhhB5uzsT gHeMCOFJ0mpiLx9e+pZo34knlTifBtc+ycsmWQ1z3rDI6SYOgxXG71uL0gRgykmm KPZpO/bLyCiR5Z2KYVc3rHQU3HTgOu5yLy6c+9C7v/U9AOEGM+iCK65TpjoWc4zd QQ4gOsC0p6Hpsk+QLjJg6VfLuQSSaGjlOCZgdbKfd/+RFO+uIEn8rUAVSNECMWEZ XriX7613t2Saer9fwRPvm2L7DWzgVGkWqQPabumDk3F2xmmFghcCAwEAAaNCMEAw DgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFI/wS3+o LkUkrk1Q+mOai97i3Ru8MA0GCSqGSIb3DQEBCwUAA4IBAQBLQNvAUKr+yAzv95ZU RUm7lgAJQayzE4aGKAczymvmdLm6AC2upArT9fHxD4q/c2dKg8dEe3jgr25sbwMp jjM5RcOO5LlXbKr8EpbsU8Yt5CRsuZRj+9xTaGdWPoO4zzUhw8lo/s7awlOqzJCK 6fBdRoyV3XpYKBovHd7NADdBj+1EbddTKJd+82cEHhXXipa0095MJ6RMG3NzdvQX mcIfeg7jLQitChws/zyrVQ4PkX4268NXSb7hLi18YIvDQVETI53O9zJrlAGomecs Mx86OyXShkDOOyyGeMlhLxS67ttVb9+E7gUJTb0o2HLO02JQZR7rkpeDMdmztcpH WD9f -----END CERTIFICATE----- \u8bc1\u4e66\u4fe1\u4efb\u94fe \u8bc1\u4e66\u76f4\u63a5\u662f\u53ef\u4ee5\u6709\u4fe1\u4efb\u5173\u7cfb\u7684, \u901a\u8fc7\u4e00\u4e2a\u8bc1\u4e66\u53ef\u4ee5\u8bc1\u660e\u53e6\u4e00\u4e2a\u8bc1\u4e66\u4e5f\u662f\u771f\u5b9e\u53ef\u4fe1\u7684. \u5b9e\u9645\u4e0a\uff0c\u8bc1\u4e66\u4e4b\u95f4\u7684\u4fe1\u4efb\u5173\u7cfb\uff0c\u662f\u53ef\u4ee5\u5d4c\u5957\u7684\u3002\u6bd4\u5982\uff0cC \u4fe1\u4efb A1\uff0cA1 \u4fe1\u4efb A2\uff0cA2 \u4fe1\u4efb A3......\u8fd9\u4e2a\u53eb\u505a\u8bc1\u4e66\u7684\u4fe1\u4efb\u94fe\u3002\u53ea\u8981\u4f60\u4fe1\u4efb\u94fe\u4e0a\u7684\u5934\u4e00\u4e2a\u8bc1\u4e66\uff0c\u90a3\u540e\u7eed\u7684\u8bc1\u4e66\uff0c\u90fd\u662f\u53ef\u4ee5\u4fe1\u4efb\u6ef4\u3002 \u5047\u8bbe C \u8bc1\u4e66\u4fe1\u4efb A \u548c B\uff1b\u7136\u540e A \u4fe1\u4efb A1 \u548c A2\uff1bB \u4fe1\u4efb B1 \u548c B2\u3002\u5219\u5b83\u4eec\u4e4b\u95f4\uff0c\u6784\u6210\u5982\u4e0b\u7684\u4e00\u4e2a\u6811\u5f62\u5173\u7cfb\uff08\u4e00\u4e2a\u5012\u7acb\u7684\u6811\uff09\u3002 \u5904\u4e8e\u6700\u9876\u4e0a\u7684\u6811\u6839\u4f4d\u7f6e\u7684\u90a3\u4e2a\u8bc1\u4e66\uff0c\u5c31\u662f\u201c \u6839\u8bc1\u4e66 \u201d\u3002\u9664\u4e86\u6839\u8bc1\u4e66\uff0c\u5176\u5b83\u8bc1\u4e66\u90fd\u8981\u4f9d\u9760\u4e0a\u4e00\u7ea7\u7684\u8bc1\u4e66\uff0c\u6765\u8bc1\u660e\u81ea\u5df1\u3002\u90a3\u8c01\u6765\u8bc1\u660e\u201c\u6839\u8bc1\u4e66\u201d\u53ef\u9760\u634f\uff1f\u5b9e\u9645\u4e0a\uff0c\u6839\u8bc1\u4e66\u81ea\u5df1\u8bc1\u660e\u81ea\u5df1\u662f\u53ef\u9760\u6ef4\uff08\u6216\u8005\u6362\u53e5\u8bdd\u8bf4\uff0c\u6839\u8bc1\u4e66\u662f\u4e0d\u9700\u8981\u88ab\u8bc1\u660e\u6ef4)\u3002 \u751f\u6210\u81ea\u7b7e\u540d\u8bc1\u4e66 \u4e0b\u5217\u4e24\u79cd\u65b9\u5f0f\u751f\u6210\u7684\u8bc1\u4e66\u90fd\u662fpem\u683c\u5f0f\u7684\uff0c\u53ef\u4ee5\u5bfc\u5165\u5230\u8ba1\u7b97\u673a\u3002 \u79c1\u94a5\u6587\u4ef6 \u6570\u5b57\u8bc1\u4e66\uff08\u5305\u542b\u516c\u94a5\uff09 1. \u65b9\u5f0f\u4e00 \u521b\u5efa\u79c1\u94a5 \u300b \u521b\u5efa\u8bf7\u6c42 \u300b\u751f\u6210\u8bc1\u4e66 \u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u5982Mytest, \u8fdb\u5165\u8be5\u76ee\u5f55, \u5728\u8be5\u76ee\u5f55\u4e0b\u6253\u5f00\u547d\u4ee4\u884c\u7a97\u53e3 \u542f\u52a8openssl shell openssl # \u6267\u884c\u8be5\u547d\u4ee4\u5373\u53ef \u4f7f\u7528openssl\u5de5\u5177\u751f\u6210\u4e00\u4e2aRSA\u79c1\u94a5, \u6ce8\u610f\uff1a\u751f\u6210\u79c1\u94a5\uff0c\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u81f3\u5c114\u4f4d\u7684\u5bc6\u7801\u3002 shell genrsa -des3 -out server.key 2048 // 2048\u79c1\u94a5\u7684\u4f4d\u6570\uff0c\u53ef\u4ee5\u4e0d\u6307\u5b9a\uff0c\u9ed8\u8ba4\u503c\uff1a\uff1f\uff1f\uff1f - des3: \u4f7f\u75283des\u5bf9\u79c1\u94a5\u8fdb\u884c\u52a0\u5bc6\uff0c//\u4f7f\u7528req\u53c2\u6570\u7684\u53ef\u4ee5\u4e0d\u6307\u5b9a\u8fd9\u4e2a\u53c2\u6570\uff0c\u52a0\u4e0b\u9762 \u751f\u6210CSR\uff08\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff09 \u4f1a\u5f15\u5bfc\u6211\u4eec\u586b\u5199\u7533\u8bf7\u65b9\u7684\u4fe1\u606f\uff1a\u56fd\u5bb6\uff0c\u7701\u4efd\uff0c\u57ce\u5e02\uff0c\u90e8\u95e8\u2026, \u683c\u5f0f\u662fpem\u683c\u5f0f ```shell req -new -key server.key -out server.csr #\u67e5\u770b\u8bf7\u6c42 req -in server.csr -text ``` \u5220\u9664\u79c1\u94a5\u4e2d\u7684\u5bc6\u7801, \u7b2c\u4e00\u6b65\u7ed9\u79c1\u94a5\u6587\u4ef6\u8bbe\u7f6e\u5bc6\u7801\u662f\u5fc5\u987b\u8981\u505a\u7684, \u5982\u679c\u4e0d\u60f3\u8981\u53ef\u4ee5\u5220\u6389 shell rsa -in server.key -out server.key -out \u53c2\u6570\u540e\u7684\u6587\u4ef6\u540d\u53ef\u4ee5\u968f\u610f\u8d77 \u751f\u6210\u81ea\u7b7e\u540d\u8bc1\u4e66 ```shell x509 -req -days 365 -in server.csr -signkey server.key -out server.crt #\u751f\u6210\u7684\u8bc1\u4e66\u662fpem\u8fdb\u884cbase64\u7f16\u7801\u7684 #\u67e5\u770b\u65b9\u5f0f ``` \u5728Windows\u4e0b\u5b89\u88c5\uff0cOpenssl-Win64.exe \u8fdb\u5165\u5230\uff1aC:\\Program Files\\OpenSSL-Win64\\bin\\openssl.exe \u53f3\u952e\u5355\u51fb->\u7ba1\u7406\u5458\u8fd0\u884c -> OPenSSL > \u5982\u679c\u4e0d\u662f\u7ba1\u7406\u5458\u6253\u5f00: Permission Denied \u2014> \u6743\u9650\u4e0d\u591f \u6267\u884c : genrsa -des3 -out server.key 2048 ==\u81ea\u7b7e\u540d\u8bc1\u4e66\uff0c\u81ea\u5df1\u9881\u53d1\u7ed9\u81ea\u5df1\uff0c\u81ea\u5df1\u9a8c\u8bc1\u81ea\u5df1\u3002== 2. \u65b9\u5f0f\u4e8c \u4e0d\u9700\u8981\u751f\u6210csr\uff0c\u76f4\u63a5\u751f\u6210\u8bc1\u4e66\uff0c\u6ca1\u6709\u6307\u5b9aSubject\u76f8\u5173\u7684\u6570\u636e\uff0c\u6240\u4ee5\u8fd8\u4f1a\u5f15\u5bfc\u8f93\u5165 openssl req -x509 -newkey rsa:4096 -keyout server2.key -out cert.crt -days 365 -nodes -nodes \u4e0d\u8bbe\u7f6e\u5bc6\u7801 \u89e3\u6790\u8bc1\u4e66\uff1a openssl x509 -in cert.pem -text \u5e38\u89c1\u7684\u8bc1\u4e66\u683c\u5f0f 1. pem\u683c\u5f0f \u6211\u4eec\u4f7f\u7528openssl\u751f\u6210\u7684\u90fd\u662fpem\u683c\u5f0f\u7684 \u89e3\u6790\u8fc7\u7a0b openssl x509 -in cert.crt -text Privacy Enhanced Mail(\u4fe1\u5c01) \u67e5\u770b\u5185\u5bb9\uff0c\u4ee5\"-----BEGIN...\"\u5f00\u5934\uff0c\u4ee5\"-----END...\"\u7ed3\u5c3e\u3002 \u67e5\u770bPEM\u683c\u5f0f\u8bc1\u4e66\u7684\u4fe1\u606f\uff1a sh `Apache\u548c*NIX\u670d\u52a1\u5668\u504f\u5411\u4e8e\u4f7f\u7528\u8fd9\u79cd\u7f16\u7801\u683c\u5f0f\u3002 openssl x509 -in certificate.pem -text -noout 2. der\u683c\u5f0f \u6211\u4eec\u4f7f\u7528Windows\u5bfc\u51fa\u7684\u53ef\u4ee5\u662fder \u5bf9\u4e8eder\u683c\u5f0f\u7684\uff0c\u89e3\u6790\u65b9\u5f0f\u5982\u4e0b\uff1a openssl x509 -in itcastcrt.cer -text -inform der // \u989d\u5916\u7684\u53c2\u6570 -inform der Distinguished Encoding Rules \u6253\u5f00\u770b\u662f\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u4e0d\u53ef\u8bfb\u3002 Java\u548cWindows\u670d\u52a1\u5668\u504f\u5411\u4e8e\u4f7f\u7528\u8fd9\u79cd\u7f16\u7801\u683c\u5f0f\u3002 \u67e5\u770bDER\u683c\u5f0f\u8bc1\u4e66\u7684\u4fe1\u606f sh `der\u662f\u683c\u5f0f\uff0c\u4e0e\u8bc1\u4e66\u7684\u540e\u7f00\u540d\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb openssl x509 -in certificate.der -inform der -text -noout `\u8bf7\u8bd5\u8bd5-pubkey\u53c2\u6570 3. windows\u5bfc\u51fa\u683c\u5f0f\u9009\u62e9 \u516c\u94a5\u57fa\u7840\u8bbe\u65bd\uff08PKI\uff09 \u4ec5\u5236\u5b9a\u8bc1\u4e66\u7684\u89c4\u8303\u8fd8\u4e0d\u8db3\u4ee5\u652f\u6301\u516c\u94a5\u7684\u5b9e\u9645\u8fd0\u7528\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5f88\u591a\u5176\u4ed6\u7684\u89c4\u8303\uff0c\u4f8b\u5982\u8bc1\u4e66\u5e94\u8be5\u7531\u8c01\u6765\u9881\u53d1\uff0c\u5982\u4f55\u9881\u53d1\uff0c\u79c1\u94a5\u6cc4\u9732\u65f6\u5e94\u8be5\u5982\u4f55\u4f5c\u5e9f\u8bc1\u4e66\uff0c\u8ba1\u7b97\u673a\u4e4b\u95f4\u7684\u6570\u636e\u4ea4\u6362\u5e94\u91c7\u7528\u600e\u6837\u7684\u683c\u5f0f\u7b49\u3002\u8fd9\u4e00\u8282\u6211\u4eec\u5c06\u4ecb\u7ecd\u80fd\u591f\u4f7f\u516c\u94a5\u7684\u8fd0\u7528\u66f4\u52a0\u6709\u6548\u7684\u516c\u94a5\u57fa\u7840\u8bbe\u65bd\u3002 1. \u4ec0\u4e48\u662f\u516c\u94a5\u57fa\u7840\u8bbe\u65bd \u516c\u94a5\u57fa\u7840\u8bbe\u65bd\uff08Public-Key infrastructure\uff09\u662f\u4e3a\u4e86\u80fd\u591f\u66f4\u6709\u6548\u5730\u8fd0\u7528\u516c\u94a5\u800c\u5236\u5b9a\u7684\u4e00\u7cfb\u5217\u89c4\u8303\u548c\u89c4\u683c\u7684\u603b\u79f0\u3002\u516c\u94a5\u57fa\u7840\u8bbe\u65bd\u4e00\u822c\u6839\u636e\u5176\u82f1\u8bed\u7f29\u5199\u800c\u7b80\u79f0\u4e3aPKI\u3002 PKI\u53ea\u662f\u4e00\u4e2a\u603b\u79f0\uff0c\u800c\u5e76\u975e\u6307\u67d0\u4e00\u4e2a\u5355\u72ec\u7684\u89c4\u8303\u6216\u89c4\u683c\u3002\u4f8b\u5982\uff0cRSA\u516c\u53f8\u6240\u5236\u5b9a\u7684PKCS\uff08Public-Key Cryptography Standards\uff0c\u516c\u94a5\u5bc6\u7801\u6807\u51c6\uff09\u7cfb\u5217\u89c4\u8303\u4e5f\u662fPKI\u7684\u4e00\u79cd\uff0c\u800c\u4e92\u8054\u7f51\u89c4\u683cRFC\uff08Requestfor Comments\uff09\u4e2d\u4e5f\u6709\u5f88\u591a\u4e0ePKI\u76f8\u5173\u7684\u6587\u6863\u3002\u6b64\u5916\uff0cX.509\u8fd9\u6837\u7684\u89c4\u8303\u4e5f\u662fPKI\u7684\u4e00\u79cd\u3002\u5728\u5f00\u53d1PKI\u7a0b\u5e8f\u65f6\u6240\u4f7f\u7528\u7684\u7531\u5404\u4e2a\u516c\u53f8\u7f16\u5199\u7684API\uff08Application Programming Interface, \u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3\uff09\u548c\u89c4\u683c\u8bbe\u8ba1\u4e66\u4e5f\u53ef\u4ee5\u7b97\u662fPKI\u7684\u76f8\u5173\u89c4\u683c\u3002 \u56e0\u6b64\uff0c\u6839\u636e\u5177\u4f53\u6240\u91c7\u7528\u7684\u89c4\u683c\uff0cPKI\u4e5f\u4f1a\u6709\u5f88\u591a\u53d8\u79cd\uff0c\u8fd9\u4e5f\u662f\u5f88\u591a\u4eba\u96be\u4ee5\u6574\u4f53\u7406\u89e3PKI\u7684\u539f\u56e0\u4e4b\u4e00\u3002 \u4e3a\u4e86\u5e2e\u52a9\u5927\u5bb6\u6574\u4f53\u7406\u89e3PKI,\u6211\u4eec\u6765\u7b80\u5355\u603b\u7ed3\u4e00\u4e0bPKI\u7684\u57fa\u672c\u7ec4\u6210\u8981\u7d20\uff08\u7528\u6237\u3001\u8ba4\u8bc1\u673a\u6784\u3001\u4ed3\u5e93\uff09\u4ee5\u53ca\u8ba4\u8bc1\u673a\u6784\u6240\u8d1f\u8d23\u7684\u5de5\u4f5c\u3002 2. PKI\u7684\u7ec4\u6210\u8981\u7d20 PKI\u7684\u7ec4\u6210\u8981\u7d20\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e09\u4e2a\uff1a \u7528\u6237 --- \u4f7f\u7528PKI\u7684\u4eba \u8ba4\u8bc1\u673a\u6784 --- \u9881\u53d1\u8bc1\u4e66\u7684\u4eba \u4ed3\u5e93 --- \u4fdd\u5b58\u8bc1\u4e66\u7684\u6570\u636e\u5e93 \u4f5c\u5e9f\u8bc1\u4e66 \u5f53\u7528\u6237\u7684\u79c1\u94a5\u4e22\u5931\u3001\u88ab\u76d7\u65f6\uff0c\u8ba4\u8bc1\u673a\u6784\u9700\u8981\u5bf9\u8bc1\u4e66\u8fdb\u884c\u4f5c\u5e9f\uff08revoke\uff09\u3002\u6b64\u5916\uff0c\u5373\u4fbf\u79c1\u94a5\u5b89\u7136\u65e0\u6059\uff0c\u6709\u65f6\u5019\u4e5f\u9700\u8981\u4f5c\u5e9f\u8bc1\u4e66\uff0c\u4f8b\u5982\u7528\u6237\u4ece\u516c\u53f8\u79bb\u804c\u5bfc\u81f4\u5176\u5931\u53bb\u79c1\u94a5\u7684\u4f7f\u7528\u6743\u9650\uff0c\u6216\u8005\u662f\u540d\u79f0\u53d8\u66f4\u5bfc\u81f4\u548c\u8bc1\u4e66\u4e2d\u8bb0\u8f7d\u7684\u5185\u5bb9\u4e0d\u4e00\u81f4\u7b49\u60c5\u51b5\u3002 \u7eb8\u8d28\u8bc1\u4e66\u53ea\u8981\u6495\u6bc1\u5c31\u53ef\u4ee5\u4f5c\u5e9f\u4e86\uff0c\u4f46\u8fd9\u91cc\u7684\u8bc1\u4e66\u662f\u6570\u5b57\u4fe1\u606f\uff0c\u5373\u4fbf\u4ece\u4ed3\u5e93\u4e2d\u5220\u9664\u4e5f\u65e0\u6cd5\u4f5c\u5e9f\uff0c\u56e0\u4e3a\u7528\u6237\u4f1a\u4fdd\u5b58\u8bc1\u4e66\u7684\u526f\u672c\uff0c\u4f46\u8ba4\u8bc1\u673a\u6784\u53c8\u4e0d\u80fd\u4eba\u4fb5\u7528\u6237\u7684\u7535\u8111\u5c06\u526f\u672c\u5220\u9664\u3002 \u8981\u4f5c\u5e9f\u8bc1\u4e66\uff0c\u8ba4\u8bc1\u673a\u6784\u9700\u8981\u5236\u4f5c\u4e00\u5f20\u8bc1\u4e66== \u4f5c\u5e9f\u6e05\u5355\uff08Certificate Revocation List),\u7b80\u79f0\u4e3aCRL ==\u3002 CRL\u662f\u8ba4\u8bc1\u673a\u6784\u5ba3\u5e03\u4f5c\u5e9f\u7684\u8bc1\u4e66\u4e00\u89c8\u8868\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u662f\u4e00\u5f20\u5df2\u4f5c\u5e9f\u7684\u8bc1\u4e66\u5e8f\u5217\u53f7\u7684\u6e05\u5355\uff0c\u5e76\u7531\u8ba4\u8bc1\u673a\u6784\u52a0\u4e0a\u6570\u5b57\u7b7e\u540d\u3002\u8bc1\u4e66\u5e8f\u5217\u53f7\u662f\u8ba4\u8bc1\u673a\u6784\u5728\u9881\u53d1\u8bc1\u4e66\u65f6\u6240\u8d4b\u4e88\u7684\u7f16\u53f7\uff0c\u5728\u8bc1\u4e66\u4e2d\u90fd\u4f1a\u8bb0\u8f7d\u3002 PKI\u7528\u6237\u9700\u8981\u4ece\u8ba4\u8bc1\u673a\u6784\u83b7\u53d6\u6700\u65b0\u7684CRL,\u5e76\u67e5\u8be2\u81ea\u5df1\u8981\u7528\u4e8e\u9a8c\u8bc1\u7b7e\u540d\uff08\u6216\u8005\u662f\u7528\u4e8e\u52a0\u5bc6\uff09\u7684\u516c\u94a5\u8bc1\u4e66\u662f\u5426\u5df2\u7ecf\u4f5c\u5e9f\u8fd9\u4e2a\u6b65\u9aa4\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002 \u5047\u8bbe\u6211\u4eec\u624b\u4e0a\u6709Bob\u7684\u8bc1\u4e66\uff0c\u8be5\u8bc1\u4e66\u6709\u5408\u6cd5\u7684\u8ba4\u8bc1\u673a\u6784\u7b7e\u540d\uff0c\u800c\u4e14\u4e5f\u5728\u6709\u6548\u671f\u5185\uff0c\u4f46\u4ec5\u51ed\u8fd9\u4e9b\u8fd8\u4e0d\u80fd\u8bf4\u660e\u8be5\u8bc1\u4e66\u4e00\u5b9a\u662f\u6709\u6548\u7684\uff0c\u8fd8\u9700\u8981\u67e5\u8be2\u8ba4\u8bc1\u673a\u6784\u6700\u65b0\u7684CRL\uff0c\u5e76\u786e\u8ba4\u8be5\u8bc1\u4e66\u662f\u5426\u6709\u6548\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u4e2a\u68c0\u67e5\u4e0d\u662f\u7531\u7528\u6237\u81ea\u8eab\u6765\u5b8c\u6210\u7684\uff0c\u800c\u662f\u5e94\u8be5\u7531\u5904\u7406\u8be5\u8bc1\u4e66\u7684\u8f6f\u4ef6\u6765\u5b8c\u6210\uff0c\u4f46\u6709\u5f88\u591a\u8f6f\u4ef6\u5e76\u6ca1\u6709\u53ca\u65f6\u66f4\u80fdCRL\u3002 \u4e5d\u3001SSL HTTP, HTTPS, SSL/TLS HTTPS = HTTP + SSL/TLS \u65e9\u671f\u7684\u7248\u672cSSL \uff083.0\u4e4b\u540e\u53ebTLS\uff09 \u73b0\u5728\uff1aTLS 1.0 TLS = 3.0 SSL 1.1 TLS = 3.1 SSL, \u76ee\u524d\u7248\u672cTLS1.2 \u5173\u7cfb\u56fe\u793a SSL\u901a\u4fe1\u56fe\u793a SSL\u534f\u8bae\u7ec6\u8282\uff08\u62d3\u5c55\uff09 SSL\u4e24\u5c42\u534f\u8bae \u63e1\u624b\u76f8\u5173 \u6570\u636e\u8bb0\u5f55 \u4ee3\u7801\u5b9e\u73b0 \u4e00\u3001http server\u5355\u5411\u8ba4\u8bc1 \u5ba2\u6237\u7aef\u8ba4\u8bc1\u670d\u52a1\u5668 \u670d\u52a1\u5668\u4e0d\u8ba4\u8bc1\u5ba2\u6237\u7aef \u670d\u52a1\u5668\u7684\u8bc1\u4e66\u4f7f\u7528openssl\u81ea\u7b7e\u540d\u8bc1\u4e66\uff08\u6211\u4eec\u4f7f\u7528server.crt\u5c31\u53ef\u4ee5\u5f53\u505aca\u8bc1\u4e66\uff09 1. \u670d\u52a1\u5668\u7aef \u5206\u6790\u6d41\u7a0b 1. \u521b\u5efahttp server 2. \u542f\u52a8http server\uff0c\u542f\u52a8\u65f6\u52a0\u8f7d\u81ea\u5df1\u7684\u8bc1\u4e66\uff0c \u542f\u52a8\u65f6\u4f7f\u7528tls \u751f\u6210\u670d\u52a1\u5668\u8bc1\u4e66 \u4f7f\u7528-subj\u53c2\u6570\uff0c\u6307\u5b9a\u670d\u52a1\u5668\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u4e0e\u4e4b\u524d\u7684\u4e0d\u540c\uff0c\u6b64\u65f6\u4e0d\u9700\u8981\u5f15\u5bfc\u8f93\u5165\u3002 openssl req \\ -x509 \\ -nodes \\ -newkey rsa:2048 \\ -keyout server.key \\ -out server.crt \\ -days 3650 \\ -subj \"/C=CN/ST=Beijing/L=Beijing/O=Global Security/OU=IT Department/CN=*\" \u4ee3\u7801 package main import ( \"net/http\" \"log\" \"fmt\" ) func main() { //1. \u521b\u5efahttp server server := http.Server{ //Addr string // TCP address to listen on, \":http\" if empty Addr: \":8848\", //\u76d1\u542c\u7aef\u53e3 //Handler Handler // handler to invoke, http.DefaultServeMux if nil Handler: nil, //\u586b\u5199nil\u65f6\uff0c \u4f1a\u4f7f\u7528\u9ed8\u8ba4\u7684\u5904\u7406\u5668\uff0c \u8fd8\u662f\u8981\u81ea\u5df1\u5b9e\u73b0\u5904\u7406\u903b\u8f91 //TLSConfig *tls.Config TLSConfig: nil, } //\u7f16\u5199\u5904\u7406\u903b\u8f91 http.HandleFunc(\"/\", func(writer http.ResponseWriter, request *http.Request) { fmt.Println(\"HandleFunc called!\\n\") writer.Write([]byte(\"hello world!!!!!\")) }) //2. \u542f\u52a8http server\uff0c\u542f\u52a8\u65f6\u52a0\u8f7d\u81ea\u5df1\u7684\u8bc1\u4e66\uff0c \u542f\u52a8\u65f6\u4f7f\u7528tls err := server.ListenAndServeTLS(\"./server.crt\", \"./server.key\") if err != nil { log.Fatal(err) } } \u9644\u52a0\u77e5\u8bc6\uff1a localhost\u662f\u672c\u673a\u7684ip\uff1a 127.0.0.1 ``` \u4e00\u5b9a\u8981\u5199\u6210\uff1ahttps, => https://localhost:8848\uff0c \u6d4f\u89c8\u5668\u5efa\u8bae\u4f7f\u7528chrome server.crt\uff0c server.key\u4e0eserver.go\u653e\u5230\u540c\u7ea7\u76ee\u5f55\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u4ee3\u7801\u6ca1\u6709\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84 func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {} \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u56de\u8c03\u51fd\u6570\uff0c\u53ea\u6709\u5ba2\u6237\u7aef\u6709\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u89e6\u53d1\u3002 ``` 2. \u5ba2\u6237\u7aef \u5206\u6790\u6d41\u7a0b 1. \u6ce8\u518c\u7ed9\u670d\u52a1\u5668\u9881\u53d1\u8bc1\u4e66\u7684ca - \u8bfb\u53d6ca\u8bc1\u4e66 - \u628aca\u7684\u8bc1\u4e66\u6dfb\u52a0\u5230ca\u6c60\u4e2d 2. \u914d\u7f6etls 3.\u521b\u5efahttp client 4. client\u53d1\u8d77\u8bf7\u6c42 5. \u6253\u5370\u8fd4\u56de\u503c \u4ee3\u7801 package main import ( \"io/ioutil\" \"log\" \"crypto/x509\" \"crypto/tls\" \"net/http\" \"fmt\" ) func main() { //1. \u6ce8\u518c\u7ed9\u670d\u52a1\u5668\u9881\u53d1\u8bc1\u4e66\u7684ca //- \u8bfb\u53d6ca\u8bc1\u4e66, \u6211\u4eec\u7684\u8bc1\u4e66\u662f\u81ea\u7b7e\u540d\u7684\uff0cserver.crt\u80fd\u591f\u8ba4\u8bc1\u81ea\u5df1\uff0cserver.crt\u5f53\u6210CA\u8bc1\u4e66 caCerInfo /*pem\u683c\u5f0f*/ , err := ioutil.ReadFile(\"./server.crt\") if err != nil { log.Fatal(err) } //- \u628aca\u7684\u8bc1\u4e66\u6dfb\u52a0\u5230ca\u6c60\u4e2d //- \u521b\u5efaca\u6c60 cerPool := x509.NewCertPool() //- \u5c06ca\u6dfb\u52a0\u5230ca\u6c60 cerPool.AppendCertsFromPEM(caCerInfo) // //2. \u914d\u7f6etls // RootCAs defines the set of root certificate authorities // that clients use when verifying server certificates. // If RootCAs is nil, TLS uses the host's root CA set. //RootCAs *x509.CertPool //\u5c06\u6211\u4eec\u627f\u8ba4ca\u6c60\u914d\u7f6e\u7ed9tls cfg := tls.Config{ RootCAs: cerPool, } //fmt.Printf(\"cfg : %s\", cfg) //3.\u521b\u5efahttp client client := http.Client{ Transport: &http.Transport{ TLSClientConfig: &cfg, //TLSClientConfig: nil, }, } //4. client\u53d1\u8d77\u8bf7\u6c42 response, err := client.Get(\"https://localhost:8848\") if err != nil { log.Fatal(err) } //5. \u6253\u5370\u8fd4\u56de\u503c bodyInfo, err := ioutil.ReadAll(response.Body) if err != nil { log.Fatal(err) } //\u52ff\u5fd8 response.Body.Close() //body fmt.Printf(\"body : %s\\n\", bodyInfo) //\u72b6\u6001\u7801 fmt.Printf(\"status code : %s\\n\", response.Status) } \u4e8c\u3001\u53cc\u5411\u8ba4\u8bc1 \u5ba2\u6237\u7aef\u8ba4\u8bc1\u670d\u52a1\u5668 \u670d\u52a1\u5668\u8ba4\u8bc1\u5ba2\u6237\u7aef \u670d\u52a1\u5668\u7684\u8bc1\u4e66\u4f7f\u7528openssl\u81ea\u7b7e\u540d\u8bc1\u4e66\uff08\u6211\u4eec\u4f7f\u7528server.crt\u5c31\u53ef\u4ee5\u5f53\u505aca\u8bc1\u4e66\uff09 \u5ba2\u6237\u7aef\u7684\u8bc1\u4e66\u4f7f\u7528openssl\u81ea\u7b7e\u540d\u8bc1\u4e66\uff08\u6211\u4eec\u4f7f\u7528client.crt\u5c31\u53ef\u4ee5\u5f53\u505aca\u8bc1\u4e66\uff09 1.\u670d\u52a1\u5668 \u5206\u6790\u6d41\u7a0b 1. \u6ce8\u518cclient ca\u8bc1\u4e66 - \u8bfb\u53d6client\u7684ca\u8bc1\u4e66 - \u521b\u5efaca\u6c60 - \u628aclient \u7684 ca \u6dfb\u52a0\u5230ca\u6c60 2. \u914d\u7f6etls ==> cfg 3. \u521b\u5efahttp server\uff0c \u4f7f\u7528cfg 4. \u542f\u52a8http server\uff0c\u542f\u52a8\u65f6\u52a0\u8f7d\u81ea\u5df1\u7684\u8bc1\u4e66\uff0c \u542f\u52a8\u65f6\u4f7f\u7528tls \u5b9e\u73b0\u4ee3\u7801 package main import ( \"io/ioutil\" \"log\" \"crypto/x509\" \"crypto/tls\" \"net/http\" \"fmt\" ) func main() { //1. \u6ce8\u518cclient ca\u8bc1\u4e66 //- \u8bfb\u53d6client\u7684ca\u8bc1\u4e66, client\u7684\u8bc1\u4e66\u4e5f\u662f\u81ea\u7b7e\u540d\u7684\uff0c\u81ea\u5df1\u8ba4\u8bc1\u81ea\u5df1 caInfo, err := ioutil.ReadFile(\"./client.crt\") if err != nil { log.Fatal(err) } //- \u521b\u5efaca\u6c60 caCertPool := x509.NewCertPool() //- \u628aclient \u7684 ca \u6dfb\u52a0\u5230ca\u6c60 caCertPool.AppendCertsFromPEM(caInfo) //2. \u914d\u7f6etls ==> cfg cfg := tls.Config{ // \u6211\u4eec\u8981\u8ba4\u8bc1client, \u9700\u8981\u4e24\u4e2a\u5b57\u6bb5 // ClientAuth determines the server's policy for // TLS Client Authentication. The default is NoClientCert. //ClientAuth ClientAuthType // const ( // NoClientCert ClientAuthType = iota // RequestClientCert // RequireAnyClientCert // VerifyClientCertIfGiven // RequireAndVerifyClientCert //) //\u6211\u4eec\u8bbe\u7f6e\u670d\u52a1\u5668\u8ba4\u8bc1\u5ba2\u6237\u7aef ClientAuth: tls.RequireAndVerifyClientCert, // ClientCAs defines the set of root certificate authorities // that servers use if required to verify a client certificate // by the policy in ClientAuth. //ClientCAs *x509.CertPool ClientCAs: caCertPool, //\u5ba2\u6237\u7aef\u7684ca\u6c60\u586b\u5145\u5728\u8fd9\u91cc } //3. \u521b\u5efahttp server\uff0c \u4f7f\u7528cfg server := http.Server{ //\u4e09\u4e2a\u5b57\u6bb5Addr, Handler, TLSConfig Addr: \":8848\", //Handler: nil, Handler: myhandler{}, TLSConfig: &cfg, } fmt.Printf(\"\u51c6\u5907\u542f\u52a8\u670d\u52a1\u5668...\\n\") //4. \u542f\u52a8http server\uff0c\u542f\u52a8\u65f6\u52a0\u8f7d\u81ea\u5df1\u7684\u8bc1\u4e66\uff0c \u542f\u52a8\u65f6\u4f7f\u7528tls err = server.ListenAndServeTLS(\"./server.crt\", \"./server.key\") if err != nil { log.Fatal(err) } } type myhandler struct { } func (h myhandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { fmt.Printf(\"ServeHTTP called!\\n\") w.Write([]byte(\"hello world!!!!\")) } 2.\u5ba2\u6237\u7aef \u5206\u6790\u6d41\u7a0b 1. \u6ce8\u518c\u7ed9\u670d\u52a1\u5668\u9881\u53d1\u8bc1\u4e66\u7684ca - \u8bfb\u53d6ca\u8bc1\u4e66 - \u628aca\u7684\u8bc1\u4e66\u6dfb\u52a0\u5230ca\u6c60\u4e2d 1.5 \u52a0\u8f7d\u5ba2\u6237\u7aef\u7684\u8bc1\u4e66\u548c\u79d8\u94a5 ==> clientCert(\u4fee\u6539\u4e86) 2. \u914d\u7f6etls, ==\u300b \u589e\u52a0clientCert(\u4fee\u6539\u4e86) 3.\u521b\u5efahttp client 4. client\u53d1\u8d77\u8bf7\u6c42 5. \u6253\u5370\u8fd4\u56de\u503c \u5b9e\u73b0\u4ee3\u7801 package main import ( \"io/ioutil\" \"log\" \"crypto/x509\" \"crypto/tls\" \"net/http\" \"fmt\" ) func main() { //1. \u6ce8\u518c\u7ed9\u670d\u52a1\u5668\u9881\u53d1\u8bc1\u4e66\u7684ca //- \u8bfb\u53d6ca\u8bc1\u4e66 caCertInfo, err := ioutil.ReadFile(\"./server.crt\") if err != nil { log.Fatal(err) } //- \u628aca\u7684\u8bc1\u4e66\u6dfb\u52a0\u5230ca\u6c60\u4e2d //- \u521b\u5efaca pool caCertPool := x509.NewCertPool() //\u6dfb\u52a0caCert caCertPool.AppendCertsFromPEM(caCertInfo) // //1.5 \u52a0\u8f7d\u5ba2\u6237\u7aef\u7684\u8bc1\u4e66\u548c\u79d8\u94a5 ==> clientCert(\u4fee\u6539\u4e86) //func LoadX509KeyPair(certFile, keyFile string) (Certificate, error) { clientCert, err := tls.LoadX509KeyPair(\"./client.crt\", \"./client.key\") if err != nil { log.Fatal(err) } // //2. \u914d\u7f6etls, ==\u300b \u589e\u52a0clientCert(\u4fee\u6539\u4e86) //- RootCAs //Certificates cfg := tls.Config{ //\u670d\u52a1\u5668\u7684ca\u6c60 RootCAs: caCertPool, //\u5ba2\u6237\u7aef\u8bc1\u4e66 Certificates: []tls.Certificate{clientCert}, } // //3.\u521b\u5efahttp client client := http.Client{ Transport: &http.Transport{ TLSClientConfig: &cfg, }, } //4. client\u53d1\u8d77\u8bf7\u6c42 response, err := client.Get(\"https://localhost:8848\") if err != nil { log.Fatal(err) } bodyInfo, err := ioutil.ReadAll(response.Body) if err != nil { log.Fatal(err) } defer response.Body.Close() //5. \u6253\u5370\u8fd4\u56de\u503c fmt.Printf(\"body info : %s\\n\", bodyInfo) fmt.Printf(\"status code : %s\\n\", response.Status) } \u8865\u5145 \u51ef\u6492\u5bc6\u7801 hello world -> \u52a0\u5bc6 =\u300bkhoor zrug -> \u89e3\u5bc6 -> hello world \u52a0\u5bc6\uff1a\u5de6\u79fbk\u4f4d \u660e\u6587\uff1a hello world \u7b97\u6cd5\uff1a\u5411\u53f3\u79fb\u52a8 \u79d8\u94a5\uff1a3 \u89e3\u5bc6\uff1a\u53f3\u79fbk\u4f4d \u5bc6\u6587\uff1akhoor zrug \u7b97\u6cd5\uff1a\u5411\u5de6\u79fb\u52a8\uff08\u4e0e\u52a0\u5bc6\u7b97\u6cd5\u4e0d\u540c\uff09 \u79d8\u94a5\uff1a3","title":"\u5bc6\u7801\u5b66"},{"location":"about/#_1","text":"","title":"\u5bc6\u7801\u5b66"},{"location":"about/#_2","text":"","title":"\u4e00\u3001 \u57fa\u7840\u77e5\u8bc6"},{"location":"about/#_3","text":"\u660e\u6587plain text \u52a0\u5bc6\u7b97\u6cd5\uff1a\u52a0\u5bc6\u89c4\u5219(\u5e38\u89c1des,3des,aes) \u5bc6\u94a5\uff1a\u6839\u636e\u7b97\u6cd5\u7684\u4e0d\u540c\uff0c\u957f\u5ea6\u4e0d\u540c","title":"\u5bf9\u79f0\u52a0\u5bc6\u4e09\u8981\u7d20"},{"location":"about/#_4","text":"\u5bc6\u6587 \u89e3\u5bc6\u7b97\u6cd5\uff1a\u53ef\u80fd\u4e0e\u52a0\u5bc6\u7b97\u6cd5\u76f8\u540c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u80fd\uff08\u5f02\u6216\u52a0\u5bc6\uff1a\u76f8\u540c\uff1b\u51ef\u6492\u5bc6\u7801\uff1a\u4e0d\u540c\uff09 \u5bc6\u94a5\uff1a\u4e0e\u52a0\u5bc6\u76f8\u540c","title":"\u5bf9\u79f0\u89e3\u5bc6\u4e09\u8981\u7d20"},{"location":"about/#_5","text":"","title":"\u52a0\u5bc6\u65b9\u5f0f\u5206\u7c7b\u53ca\u7279\u70b9"},{"location":"about/#1","text":"\u5bc6\u94a5\u6570\u91cf\uff1a1\u4e2a \u7279\u70b9\uff1a \u52a0\u5bc6\u6548\u7387\u9ad8 \u53cc\u65b9\u4f7f\u7528\u7684\u5bc6\u94a5\u76f8\u540c \u5b89\u5168\u6027\uff1a \u76f8\u5bf9\u4e8e\u975e\u5bf9\u79f0\u52a0\u5bc6 \u4e0d\u5b89\u5168 \u4f7f\u7528\u60c5\u51b5\uff1a \u4e3b\u6d41\u7684\u52a0\u5bc6\u65b9\u5f0f","title":"1. \u5bf9\u79f0\u52a0\u5bc6"},{"location":"about/#2","text":"\u6bcf\u4e2a\u4eba\u6709\u4e24\u628a\u94a5\u5319\uff08\u516c\u94a5\uff0c\u79c1\u94a5\uff09\uff1b\u5982\u679cA\u7ed9B\u53d1\u9001\u6d88\u606f\uff0c\u4f7f\u7528b\u7684\u516c\u94a5\u8fdb\u884c\u52a0\u5bc6\uff1bb\u7684\u516c\u94a5\u52a0\u5bc6\u7684\u4fe1\u606f\u53ea\u6709b\u7684\u79c1\u94a5\u53ef\u4ee5\u89e3\u5bc6\u3002 1. \u5bc6\u94a5\u6570\u91cf\uff1a2\u4e2a * \u516c\u94a5 * \u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u6301\u6709 * \u4e00\u822c\u7528\u4e8e\u52a0\u5bc6\u4f5c\u7528 * \u79c1\u94a5 * \u53ea\u6709\u81ea\u5df1\u6301\u6709 * \u4e00\u822c\u4e0d\u7528\u4e8e\u52a0\u5bc6\uff0c\u800c\u662f\u7528\u4e8e\u7b7e\u540d * \u7b7e\u540d\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u8bc1\u660e\u662f\u79c1\u94a5\u6301\u6709\u4eba\u53d1\u9001\u7684\u6570\u636e * \u79c1\u94a5\u7b7e\u540d\u7684\u6570\u636e\uff0c\u79c1\u94a5\u6301\u6709\u4eba\u65e0\u6cd5\u5426\u8ba4\u81ea\u5df1\u53d1\u9001\u8fc7\u8fd9\u4e2a\u6d88\u606f 2. \u7279\u70b9\uff1a * \u516c\u94a5\u52a0\u5bc6\u7684\u53ea\u6709\u81ea\u5df1\u7684\u79c1\u94a5\u80fd\u89e3\u5f00 * \u52a0\u5bc6\u3001\u89e3\u5bc6\u6548\u7387\u5f88\u4f4e\uff0c\u4e00\u822c\u4e0d\u505a\u5927\u91cf\u6570\u636e\u4f7f\u7528 3. \u5b89\u5168\u6027\uff1a\u9ad8 4. \u4f7f\u7528\u60c5\u51b5\uff1a * \u4e00\u822c\u914d\u5408\u5bf9\u79f0\u52a0\u5bc6\u4e00\u8d77\u4f7f\u7528 * \u5efa\u7acb\u8fde\u63a5\uff0c\u5148\u4f7f\u7528\u975e\u5bf9\u79f0\u52a0\u5bc6\u534f\u5546\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u548c\u5bc6\u94a5\uff0c\u7136\u540e\u4f7f\u7528\u5bf9\u79f0\u52a0\u5bc6\u8fdb\u884c\u540e\u7eed\u52a0\u89e3\u5bc6","title":"2. \u975e\u5bf9\u79f0\u52a0\u5bc6"},{"location":"about/#_6","text":"\u4e0d\u8981\u4f7f\u7528\u4fdd\u5bc6\u7684\u5bc6\u7801\u7b97\u6cd5 \u4f7f\u7528\u4f4e\u5f3a\u5ea6\u7684\u5bc6\u7801\u6bd4\u4e0d\u8fdb\u884c\u4efb\u4f55\u52a0\u5bc6\u66f4\u5371\u9669 \u4efb\u4f55\u5bc6\u7801\u603b\u6709\u4e00\u5929\u90fd\u4f1a\u88ab\u7834\u89e3==(\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u7531\u82f1\u56fd\u5b89\u5168\u5c401973\u53d1\u660e\uff0c\u540e\u7531RSA\u4e8e1977\u516c\u5f00)== \u5bc6\u7801\u53ea\u662f\u4fe1\u606f\u5b89\u5168\u7684\u4e00\u90e8\u5206\uff08\u793e\u4f1a\u5de5\u7a0b\u5b66\uff0c\u9493\u9c7c\uff09","title":"\u52a0\u5bc6\u9886\u57df\u5e38\u8bc6"},{"location":"about/#_7","text":"\u4f4d\uff1abit\uff0c0\u62161\uff0c\u6700\u5c0f\u7684\u5355\u4f4d ==\u5b57\u8282\uff1aByte\uff0c1Byte = 8bit== \u5343\u5b57\u8282\uff1aKByte\uff0c1K = 1024B\uff0c \uff08\u786c\u76d8\u91cc1K = 1000B\uff09 \u5146\u5b57\u8282\uff1aMByte\uff0c1M = 1024K = 1024B * 1024 = 1024 * 1024 * 8 bit 1 GB = 1024M = 1024K = 1024B =1024 * 8 bit 1TB = 1024GB 1PB = 1024TB ==\u5c0f\u8d34\u58eb\uff0c\u624b\u673a\u7684\u4e0b\u8f7d\u901f\u5ea6\u4e00\u822c\u662fMbit\uff0c\u8fd9\u4e2a\u901f\u5ea6\u4e0d\u662f\u6211\u4eec\u7535\u8111\u4e0a\u5e38\u8bf4\u7684\u5146\uff0c\u9700\u8981\u9664\u4ee58\u3002==","title":"\u8ba1\u7b97\u673a\u5355\u4f4d\u4ecb\u7ecd"},{"location":"about/#_8","text":"","title":"\u4e8c\u3001\u7f16\u89e3\u7801\u4e0e\u52a0\u89e3\u5bc6"},{"location":"about/#_9","text":"\u7f16\u7801\uff1a\u628a\u5b57\u7b26\u8f6c\u6210\u4e8c\u8fdb\u5236\u6bd4\u7279\u6d41\u7684\u8fc7\u7a0b \u89e3\u7801\uff1a\u628a\u6bd4\u7279\u6d41\u8f6c\u6362\u6210\u53ef\u8bfb\u5b57\u7b26\u7684\u8fc7\u7a0b","title":"\u7f16\u7801\u548c\u89e3\u7801"},{"location":"about/#_10","text":"gob\u5305-\u300bgo\u5185\u7f6e\u7684\u7f16\u89e3\u7801\u5305 html\u7f16\u7801 json\u7f16\u89e3\u7801 binary\u5305-\u300bgo\u5185\u7f6e\u7684\u7f16\u89e3\u7801\u5305","title":"\u5e38\u7528\u7f16\u89e3\u7801\u65b9\u5f0f"},{"location":"about/#_11","text":"\u52a0\u89e3\u5bc6\u5c31\u662f\u5bf9\u6bd4\u7279\u6d41\u8fdb\u884c\u7f16\u89e3\u7801 \u52a0\u5bc6\uff1a\u5bf9\u660e\u6587\u7684\u6bd4\u7279\u5e8f\u5217\u8fdb\u884c\u7f16\u7801\uff0c\u5f97\u5230\u5bc6\u6587\u7684\u6bd4\u7279\u5e8f\u5217(\u5b57\u8282\u6d41)","title":"\u52a0\u89e3\u5bc6"},{"location":"about/#_12","text":"","title":"\u4e09\u3001\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u7b97\u6cd5"},{"location":"about/#_13","text":"","title":"\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5"},{"location":"about/#1-desdata-encryption-standard","text":"","title":"1. DES\uff1aData Encryption Standard"},{"location":"about/#_14","text":"DES\uff08Data Encryption Standard\uff09**\u662f1977\u5e74\u7f8e\u56fd\u8054\u90a6\u4fe1\u606f\u5904\u7406\u6807\u51c6\uff08FIPS\uff09\u4e2d\u6240\u91c7\u7528\u7684\u4e00\u79cd\u5bf9\u79f0\u5bc6\u7801\uff08FIPS46.3\uff09\u3002DES\u4e00\u76f4\u4ee5\u6765\u88ab\u7f8e\u56fd\u4ee5\u53ca\u5176\u4ed6\u56fd\u5bb6\u7684\u653f\u5e9c\u548c\u94f6\u884c\u7b49\u5e7f\u6cdb\u4f7f\u7528\u3002\u7136\u800c\uff0c\u968f\u7740\u8ba1\u7b97\u673a\u7684\u8fdb\u6b65\uff0c\u73b0\u5728DES\u5df2\u7ecf\u80fd\u591f\u88ab\u66b4\u529b\u7834\u89e3\uff0c\u5f3a\u5ea6\u5927\u4e0d\u5982\u524d\u4e86\u3002 RSA\u516c\u53f8\u4e3e\u529e\u8fc7\u7834\u6cfdDES\u5bc6\u94a5\u7684\u6bd4\u8d5b\uff08DESChallenge\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u770bRSA\u516c\u53f8\u5b98\u65b9\u516c\u5e03\u7684\u6bd4\u8d5b\u7ed3\u679c\uff1a 1997\u5e74\u7684DES Challenge1\u4e2d\u7528\u4e8696\u5929\u7834\u8bd1\u5bc6\u94a5 1998\u5e74\u7684DES ChallengeIl-I\u4e2d\u7528\u4e8641\u5929\u7834\u8bd1\u5bc6\u94a5 1998\u5e74\u7684DES ChallengeII-2\u4e2d\u7528\u4e8656\u5c0f\u65f6\u7834\u8bd1\u5bc6\u94a5 1999\u5e74\u7684DES ChallengeIll\u4e2d\u53ea\u7528\u4e8622\u5c0f\u65f615\u5206\u949f\u7834\u8bd1\u5bc6\u94a5 \u7531\u4e8eDES\u7684\u5bc6\u6587\u53ef\u4ee5\u5728\u77ed\u65f6\u95f4\u5185\u88ab\u7834\u8bd1\uff0c\u56e0\u6b64\u9664\u4e86\u7528\u5b83\u6765\u89e3\u5bc6\u4ee5\u524d\u7684\u5bc6\u6587\u4ee5\u5916\uff0c\u73b0\u5728\u6211\u4eec\u4e0d\u5e94\u8be5\u518d\u4f7f\u7528DES\u4e86\u3002 \u8865\u5145: DES\u7b97\u6cd5\u4e3a \u5bc6\u7801\u4f53\u5236 \u4e2d\u7684\u5bf9\u79f0\u5bc6\u7801\u4f53\u5236\uff0c\u53c8\u88ab\u79f0\u4e3a\u7f8e\u56fd \u6570\u636e\u52a0\u5bc6\u6807\u51c6 \uff0c\u662f1972\u5e74\u7f8e\u56fdIBM\u516c\u53f8\u7814\u5236\u7684\u5bf9\u79f0\u5bc6\u7801\u4f53\u5236 \u52a0\u5bc6\u7b97\u6cd5 \u3002 \u660e\u6587\u630964\u4f4d\u8fdb\u884c\u5206\u7ec4\uff0c \u5bc6\u94a5 \u957f64\u4f4d\uff0c\u5bc6\u94a5\u4e8b\u5b9e\u4e0a\u662f56\u4f4d\u53c2\u4e0eDES\u8fd0\u7b97\uff08\u7b2c8\u300116\u300124\u300132\u300140\u300148\u300156\u300164\u4f4d\u662f\u6821\u9a8c\u4f4d\uff0c \u4f7f\u5f97\u6bcf\u4e2a\u5bc6\u94a5\u90fd\u6709\u5947\u6570\u4e2a1\uff09\u5206\u7ec4\u540e\u7684\u660e\u6587\u7ec4\u548c56\u4f4d\u7684\u5bc6\u94a5\u6309\u4f4d\u66ff\u4ee3\u6216\u4ea4\u6362\u7684\u65b9\u6cd5\u5f62\u6210\u5bc6\u6587\u7ec4\u7684\u52a0\u5bc6\u65b9\u6cd5\u3002","title":"\u6982\u8ff0"},{"location":"about/#_15","text":"DES\u662f\u4e00\u79cd\u5c0664\u6bd4\u7279\u7684\u660e\u6587\u52a0\u5bc6\u621064\u6bd4\u7279\u7684\u5bc6\u6587\u7684\u5bf9\u79f0\u5bc6\u7801\u7b97\u6cd5\uff0c==\u5b83\u7684\u5bc6\u94a5\u957f\u5ea6\u662f56\u6bd4\u7279==\u3002\u5c3d\u7ba1 \u4ece\u89c4\u683c\u4e0a\u6765\u8bf4\uff0cDES\u7684\u5bc6\u94a5\u957f\u5ea6\u662f64\u6bd4\u7279\uff0c\u4f46\u7531\u4e8e\u6bcf\u96947\u6bd4\u7279\u4f1a\u8bbe\u7f6e\u4e00\u4e2a\u7528\u4e8e\u9519\u8bef\u68c0\u67e5\u7684\u6bd4\u7279\uff0c\u56e0\u6b64\u5b9e\u8d28\u4e0a\u5176\u5bc6\u94a5\u957f\u5ea6\u662f56\u6bd4\u7279 \u3002 DES\u662f\u4ee564\u6bd4\u7279\u7684\u660e\u6587\uff08\u6bd4\u7279\u5e8f\u5217\uff09\u4e3a\u4e00\u4e2a\u5355\u4f4d\u6765\u8fdb\u884c\u52a0\u5bc6\u7684 \uff0c \u8fd9\u4e2a64\u6bd4\u7279\u7684\u5355\u4f4d\u79f0\u4e3a\u5206\u7ec4 \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4ee5\u5206\u7ec4\u4e3a\u5355\u4f4d\u8fdb\u884c\u5904\u7406\u7684\u5bc6\u7801\u7b97\u6cd5\u79f0\u4e3a \u5206\u7ec4\u5bc6\u7801\uff08blockcipher\uff09 \uff0cDES\u5c31\u662f\u5206\u7ec4\u5bc6\u7801\u7684\u4e00\u79cd\u3002 DES\u6bcf\u6b21\u53ea\u80fd\u52a0\u5bc664\u6bd4\u7279\u7684\u6570\u636e\uff0c\u5982\u679c\u8981\u52a0\u5bc6\u7684\u660e\u6587\u6bd4\u8f83\u957f\uff0c\u5c31\u9700\u8981\u5bf9DES\u52a0\u5bc6\u8fdb\u884c\u8fed\u4ee3\uff08\u53cd\u590d\uff09\uff0c\u800c\u8fed\u4ee3\u7684\u5177\u4f53\u65b9\u5f0f\u5c31\u79f0\u4e3a\u6a21\u5f0f\uff08mode\uff09\u3002","title":"\u52a0\u5bc6\u548c\u89e3\u5bc6"},{"location":"about/#_16","text":"\u4e0d\u5b89\u5168\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528 \u79d8\u94a5\uff1a8\u5b57\u8282\uff0864 - 8 = 56\u6bd4\u7279\uff0c\u6bcf\u4e03\u4e2abit\u5c31\u8bbe\u7f6e\u4e00\u4e2a\u6821\u9a8c\u4f4d\uff09 \u52a0\u5bc6\u65f6\uff0c\u4f1a\u5bf9\u660e\u6587\u8fdb\u884c\u5206\u7ec4\uff0c\u5206\u7ec4\u957f\u5ea6\u662f8bytes\uff0c\u5f97\u5230\u7684\u5bc6\u6587\u4e5f\u662f8bytes\u4e3a1\u7ec4","title":"\u7279\u70b9"},{"location":"about/#2-3des-triple-data-encryption-standard","text":"","title":"2. 3DES \uff1aTriple Data Encryption Standard"},{"location":"about/#_17","text":"\u73b0\u5728DES\u5df2\u7ecf\u53ef\u4ee5\u5728\u73b0\u5b9e\u7684\u65f6\u95f4\u5185\u88ab\u66b4\u529b\u7834\u89e3\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u79cd\u7528\u6765\u66ff\u4ee3DES\u7684\u5206\u7ec4\u5bc6\u7801\uff0c\u4e09\u91cdDES\u5c31\u662f\u51fa\u4e8e\u8fd9\u4e2a\u76ee\u7684\u88ab\u5f00\u53d1\u51fa\u6765\u7684\u3002 \u4e09\u91cdDES\uff08triple-DES\uff09\u662f\u4e3a\u4e86\u589e\u52a0DES\u7684\u5f3a\u5ea6\uff0c==\u5c06DES\u91cd\u590d3\u6b21\u6240\u5f97\u5230\u7684\u4e00\u79cd\u5bc6\u7801\u7b97\u6cd5==\uff0c\u901a\u5e38\u7f29\u5199\u4e3a3DES \u3002","title":"\u6982\u8ff0"},{"location":"about/#_18","text":"\u4e09\u91cdDES\u7684\u52a0\u89e3\u5bc6\u673a\u5236\u5982\u56fe\u6240\u793a\uff1a \u660e\u6587\u7ecf\u8fc7\u4e09\u6b21DES\u5904\u7406\u624d\u80fd\u53d8\u6210\u6700\u540e\u7684\u5bc6\u6587\uff0c\u7531\u4e8e DES\u5bc6\u94a5\u7684\u957f\u5ea6\u5b9e\u8d28\u4e0a\u662f56\u6bd4\u7279 \uff0c\u56e0\u6b64 \u4e09\u91cdDES\u7684\u5bc6\u94a5\u957f\u5ea6\u5c31\u662f56\u00d73=168\u6bd4\u7279, \u52a0\u4e0a\u7528\u4e8e\u9519\u8bef\u68c0\u6d4b\u7684\u6807\u5fd7\u4f4d8x3, \u5171192bit \u3002 \u4ece\u4e0a\u56fe\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e09\u91cdDES\u5e76\u4e0d\u662f\u8fdb\u884c\u4e09\u6b21DES\u52a0\u5bc6\uff08\u52a0\u5bc6-->\u52a0\u5bc6-->\u52a0\u5bc6\uff09\uff0c\u800c\u662f \u52a0\u5bc6-->\u89e3\u5bc6-->\u52a0\u5bc6 \u7684\u8fc7\u7a0b\u3002\u5728\u52a0\u5bc6\u7b97\u6cd5\u4e2d\u52a0\u4eba\u89e3\u5bc6\u64cd\u4f5c\u8ba9\u4eba\u611f\u89c9\u5f88\u4e0d\u53ef\u601d\u8bae\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u65b9\u6cd5\u662fIBM\u516c\u53f8\u8bbe\u8ba1\u51fa\u6765\u7684\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u8ba9\u4e09\u91cdDES\u80fd\u591f\u517c\u5bb9\u666e\u901a\u7684DES\u3002 \u5f53\u4e09\u91cdDES\u4e2d\u6240\u6709\u7684\u5bc6\u94a5\u90fd\u76f8\u540c\u65f6\uff0c\u4e09\u91cdDES\u4e5f\u5c31\u7b49\u540c\u4e8e\u666e\u901a\u7684DES\u4e86 \u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u524d\u4e24\u6b65\u52a0\u5bc6-->\u89e3\u5bc6\u4e4b\u540e\uff0c\u5f97\u5230\u7684\u5c31\u662f\u6700\u521d\u7684\u660e\u6587\u3002\u56e0\u6b64\uff0c\u4ee5\u524d\u7528DES\u52a0\u5bc6\u7684\u5bc6\u6587\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u7528\u4e09\u91cdDES\u6765\u8fdb\u884c\u89e3\u5bc6\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e09\u91cdDES\u5bf9DES\u5177\u5907\u5411\u4e0b\u517c\u5bb9\u6027\u3002 \u5982\u679c\u5bc6\u94a51\u548c\u5bc6\u94a53\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u94a5\uff0c\u800c\u5bc6\u94a52\u4f7f\u7528\u4e0d\u540c\u7684\u5bc6\u94a5\uff08\u4e5f\u5c31\u662f\u53ea\u4f7f\u7528\u4e24\u4e2aDES\u5bc6\u94a5\uff09\uff0c\u8fd9\u79cd\u4e09\u91cdDES\u5c31\u79f0\u4e3aDES-EDE2\u3002EDE\u8868\u793a\u7684\u662f\u52a0\u5bc6\uff08Encryption) -->\u89e3\u5bc6\uff08Decryption)-->\u52a0\u5bc6\uff08Encryption\uff09\u8fd9\u4e2a\u6d41\u7a0b\u3002 \u5bc6\u94a51\u3001\u5bc6\u94a52\u3001\u5bc6\u94a53\u5168\u90e8\u4f7f\u7528\u4e0d\u540c\u7684\u6bd4\u7279\u5e8f\u5217\u7684\u4e09\u91cdDES\u79f0\u4e3aDES-EDE3\u3002 \u5c3d\u7ba1\u4e09\u91cdDES\u76ee\u524d\u8fd8\u88ab\u94f6\u884c\u7b49\u673a\u6784\u4f7f\u7528\uff0c\u4f46\u5176\u5904\u7406\u901f\u5ea6\u4e0d\u9ad8\uff0c\u800c\u4e14\u5728\u5b89\u5168\u6027\u65b9\u9762\u4e5f\u9010\u6e10\u663e\u73b0\u51fa\u4e86\u4e00\u4e9b\u95ee\u9898\u3002","title":"\u52a0\u5bc6\u4e0e\u89e3\u5bc6"},{"location":"about/#_19","text":"\u52a0\u5bc6\u8fc7\u7a0b\uff1a \u52a0\u5bc6 -\u300b \u89e3\u5bc6-\u300b \u52a0\u5bc6 \u4e2d\u95f4\u4f7f\u7528\u89e3\u5bc6\u7684\u539f\u56e0\u662f\u4e3a\u4e86\u517c\u5bb9\u4ee5\u524d\u7684DES \u89e3\u5bc6\u8fc7\u7a0b\u662f\u4ee5\u89e3\u5bc6\u7684\u65b9\u5f0f\u8fdb\u884c\u52a0\u5bc6\uff0c\u6574\u4f53\u8fd8\u662f\u4e09\u6b21\u52a0\u5bc6 \u79d8\u94a5\uff1a8bytes * 3 = 24bytes\uff0c =\u300b24 * 8 = 192bit \u6570\u636e\u5206\u7ec4\u957f\u5ea6\uff1a\u4e0eDES\u76f8\u540c\uff0c8bytes\uff0864\u6bd4\u7279\uff09 \u52a0\u89e3\u5bc6\u6548\u7387\u4f4e\uff08\u8fc7\u6e21\u7684\u52a0\u5bc6\u7b97\u6cd5\uff09 \u5c11\u7528 \u89e3\u5bc6\u8fc7\u7a0b\uff1a\u89e3\u5bc6 -\u300b \u52a0\u5bc6 -\u300b \u89e3\u5bc6 3\u4e2a\u5bc6\u94a5 \u5982\u679c\u5bc6\u94a51\u4e0e\u5bc6\u94a52\u76f8\u540c\uff0c\u6216\u80052\u4e0e3\u76f8\u540c\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8eDES\uff0c\u4e0e\u524d\u9762\u517c\u5bb9 \u5982\u679c1\u4e0e3\u76f8\u540c\uff0c\u76f8\u5f53\u4e8e\u6709\u4e24\u4e2a\u5bc6\u94a5\uff0c\u4e13\u4e1a\u540d\u5b57\uff1a3DES-EDE2 \u5982\u679c\u4e09\u4e2a\u5bc6\u94a5\u90fd\u4e0d\u76f8\u540c\uff0c\u4e13\u4e1a\u540d\u5b57\uff1a3DES-EDE3","title":"\u7279\u70b9"},{"location":"about/#3-aesadvance-encryption-standard","text":"","title":"3. AES\uff1aAdvance Encryption Standard"},{"location":"about/#_20","text":"AES\uff08Advanced Encryption Standard\uff09\u662f\u53d6\u4ee3\u5176\u524d\u4efb\u6807\u51c6\uff08DES\uff09\u800c\u6210\u4e3a\u65b0\u6807\u51c6\u7684\u4e00\u79cd\u5bf9\u79f0\u5bc6\u7801\u7b97\u6cd5\u3002\u5168\u4e16\u754c\u7684\u4f01\u4e1a\u548c\u5bc6\u7801\u5b66\u5bb6\u63d0\u4ea4\u4e86\u591a\u4e2a\u5bf9\u79f0\u5bc6\u7801\u7b97\u6cd5\u4f5c\u4e3aAES\u7684\u5019\u9009\uff0c\u6700\u7ec8\u57282000\u5e74\u4ece\u8fd9\u4e9b\u5019\u9009\u7b97\u6cd5\u4e2d\u9009\u51fa\u4e86\u4e00\u79cd\u540d\u4e3a== Rijndael ==\u7684\u5bf9\u79f0\u5bc6\u7801\u7b97\u6cd5\uff0c\u5e76\u5c06\u5176\u786e\u5b9a\u4e3a\u4e86AES\u3002 Rijndael\u662f\u7531\u6bd4\u5229\u65f6\u5bc6\u7801\u5b66\u5bb6Joan Daemen\u548cVincent Rijmen\u8bbe\u6c41\u7684\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\uff0c\u4eca\u540e\u4f1a\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u5bc6\u7801\u8f6f\u4ef6\u652f\u6301\u8fd9\u79cd\u7b97\u6cd5\u3002 ==Rijndael\u7684\u5206\u7ec4\u957f\u5ea6\u4e3a128\u6bd4\u7279== \uff0c\u5bc6\u94a5\u957f\u5ea6\u53ef\u4ee5\u4ee532\u6bd4\u7279\u4e3a\u5355\u4f4d\u5728128\u6bd4\u7279\u5230256\u6bd4\u7279\u7684\u8303\u56f4\u5185\u8fdb\u884c\u9009\u62e9\uff08\u4e0d\u8fc7== \u5728AES\u7684\u89c4\u683c\u4e2d\uff0c\u5bc6\u94a5\u957f\u5ea6\u53ea\u6709128\u3001192\u548c256\u6bd4\u7279\u4e09\u79cd ==\uff09\u3002","title":"\u6982\u8ff0"},{"location":"about/#_21","text":"\u79d8\u94a5\u957f\u5ea6\uff1a\u53ef\u9009\u7684\uff0c16bytes, 24bytes, 32bytes\uff0c \uff08des\uff1a8bytes, 3des: 24bytes\uff09 \u5206\u7ec4\u957f\u5ea6\uff1a16bytes\uff0c \uff08des\u5408\u7ea63des:8bytes\uff09 \u52a0\u89e3\u5bc6\u6548\u7387\u9ad8\uff0c\u63a8\u8350\u4f7f\u7528","title":"\u7279\u70b9\uff1a"},{"location":"about/#4","text":"","title":"4. \u5c0f\u7ed3"},{"location":"about/#1_1","text":"\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u4f7f\u7528\u7684\u5bc6\u94a5\u76f8\u540c\u3002 \u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5b9e\u73b0\u4e86\u6570\u636e\u7684\u673a\u5bc6\u6027\uff0c\u4e14\u7b80\u5355\u3001\u5feb\u901f\u3002 \u4f46\u662f\u7531\u4e8e\u7b97\u6cd5\u4e00\u822c\u90fd\u662f\u516c\u5f00\u7684\uff0c\u56e0\u6b64\u673a\u5bc6\u6027\u51e0\u4e4e\u5b8c\u5168\u4f9d\u8d56\u4e8e\u5bc6\u94a5\u3002 \u540c\u4e00\u53d1\u9001\u65b9\u4e0e\u4e0d\u540c\u63a5\u6536\u65b9\u8fdb\u884c\u901a\u4fe1\u65f6\u5e94\u4f7f\u7528\u4e0d\u540c\u7684\u5bc6\u94a5(1 -> n)\uff0c\u9632\u6b62\u6570\u636e\u88ab\u7a83\u542c\u6216\u62e6\u622a\u540e\u88ab\u89e3\u5bc6\u3002","title":"1. \u5bf9\u79f0\u52a0\u5bc6\u7279\u70b9"},{"location":"about/#2_1","text":"DES \uff1a key -\u300b8\u5b57\u8282\uff0c \u5206\u7ec4-\u300b8\u5b57\u8282 3DES\uff1akey-\u300b24\u5b57\u8282\uff0c \u5206\u7ec4-\u300b8\u5b57\u8282 AES\uff1akey-\u300b16\u5b57\u8282\uff08128\uff09\uff0c24\u5b57\u8282\uff08192\uff09\uff0c32\u5b57\u8282\uff08256\uff09\uff0c \u5206\u7ec4-\u300b16\u5b57\u8282","title":"2. \u7262\u8bb0\u77e5\u8bc6\u70b9"},{"location":"about/#_22","text":"\u5bf9\u4e8e\u9700\u8981\u586b\u5145\u7684\u6a21\u5f0f\uff0c\u8981\u6309\u7167\u5206\u7ec4\u957f\u5ea6\u6765\u586b\u5145 \u5bf9\u4e8e\u9700\u8981iv\u5411\u91cf\u7684\uff0civ\u7684\u957f\u5ea6\u8981\u4e0e\u5206\u7ec4\u4e00\u81f4","title":"\u6a21\u5f0f\uff1a"},{"location":"about/#3","text":"\u5f53\u9700\u8981\u52a0\u5bc6\u7684\u660e\u6587\u957f\u5ea6\u8d85\u8fc7\u5206\u7ec4\u957f\u5ea6\u65f6\uff0c\u5982\u4f55\u52a0\u5bc6\uff1f \u7528\u5bf9\u79f0\u5bc6\u7801\u8fdb\u884c\u901a\u4fe1\u65f6\uff0c\u8fd8\u4f1a\u51fa\u73b0\u5bc6\u94a5\u7684\u914d\u9001\u95ee\u9898\uff0c\u5373\u5982\u4f55\u5c06\u5bc6\u94a5\u5b89\u5168\u5730\u53d1\u9001\u7ed9\u63a5\u6536\u8005\uff1f","title":"3. \u5b58\u5728\u95ee\u9898"},{"location":"about/#_23","text":"","title":"\u5206\u7ec4\u6a21\u5f0f"},{"location":"about/#1_2","text":"\u4e3a\u4ec0\u4e48\u8981\u5206\u7ec4\uff1f \u88ab\u52a0\u5bc6\u7684\u6570\u636e\u53ef\u4ee5\u5f88\u5927\uff0c\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u8fed\u4ee3\u7684\u52a0\u5bc6\uff0c\u6240\u4ee5\u7528\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7ec4","title":"1. \u57fa\u672c\u77e5\u8bc6"},{"location":"about/#_24","text":"\"\u5206\u7ec4\u5bc6\u7801\u7684\u6a21\u5f0f -- \u5206\u7ec4\u5bc6\u7801\u662f\u5982\u4f55\u8fed\u4ee3\u7684\" \u672c\u7ae0\u4e2d\u6211\u4eec\u5c06\u63a2\u8ba8\u4e00\u4e0b\u5206\u7ec4\u5bc6\u7801\u7684\u6a21\u5f0f \u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u7684DES\u548cAES\u90fd\u5c5e\u4e8e\u5206\u7ec4\u5bc6\u7801\uff0c\u5b83\u4eec\u53ea\u80fd\u52a0\u5bc6\u56fa\u5b9a\u957f\u5ea6\u7684\u660e\u6587\u3002\u5982\u679c\u9700\u8981\u52a0\u5bc6\u4efb\u610f\u957f\u5ea6\u7684\u660e\u6587\uff0c\u5c31\u9700\u8981\u5bf9\u5206\u7ec4\u5bc6\u7801\u8fdb\u884c\u8fed\u4ee3\uff0c\u800c\u5206\u7ec4\u5bc6\u7801\u7684\u8fed\u4ee3\u65b9\u6cd5\u5c31\u79f0\u4e3a\u5206\u7ec4\u5bc6\u7801\u7684\u201c\u6a21\u5f0f\u201d\u3002 \u5206\u7ec4\u5bc6\u7801\u6709\u5f88\u591a\u79cd\u6a21\u5f0f\uff0c\u5982\u679c\u6a21\u5f0f\u7684\u9009\u62e9\u4e0d\u6070\u5f53\uff0c\u5c31\u65e0\u6cd5\u4fdd\u8bc1\u673a\u5bc6\u6027\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f7f\u7528ECB\u6a21\u5f0f\uff0c\u660e\u6587\u4e2d\u7684\u4e00\u4e9b\u89c4\u5f8b\u5c31\u53ef\u4ee5\u901a\u8fc7\u5bc6\u6587\u88ab\u8bc6\u522b\u51fa\u6765\u3002 \u5206\u7ec4\u5bc6\u7801\u7684\u4e3b\u8981\u6a21\u5f0f\uff08ECB\u3001CBC\u3001CFB\u3001OFB\u3001CTR\uff09\uff0c\u6700\u540e\u518d\u6765\u8003\u5bdf\u4e00\u4e0b\u5230\u5e95\u5e94\u8be5\u4f7f\u7528\u54ea\u4e00\u79cd\u6a21\u5f0f\u3002","title":"\u6982\u8ff0"},{"location":"about/#_25","text":"\u5206\u7ec4\u5bc6\u7801\uff08blockcipher\uff09 \u662f\u6bcf\u6b21\u53ea\u80fd\u5904\u7406\u7279\u5b9a\u957f\u5ea6\u7684\u4e00\u5757\u6570\u636e\u7684\u4e00\u7c7b\u5bc6\u7801\u7b97\u6cd5\uff0c\u8fd9\u91cc\u7684\u4e00\u5757\"\u5c31\u79f0\u4e3a\u5206\u7ec4\uff08block\uff09\u3002\u6b64\u5916\uff0c\u4e00\u4e2a\u5206\u7ec4\u7684\u6bd4\u7279\u6570\u5c31\u79f0\u4e3a\u5206\u7ec4\u957f\u5ea6\uff08blocklength\uff09\u3002 \u4f8b\u5982\uff0c DES\u548c\u4e09\u91cdDES\u7684\u5206\u7ec4\u957f\u5ea6\u90fd\u662f64\u6bd4\u7279 \u3002\u8fd9\u4e9b\u5bc6\u7801\u7b97\u6cd5\u4e00\u6b21\u53ea\u80fd\u52a0\u5bc664\u6bd4\u7279\u7684\u660e\u6587\uff0e\u5e76\u751f\u621064\u6bd4\u7279\u7684\u5bc6\u6587\u3002 AES\u7684\u5206\u7ec4\u957f\u5ea6\u53ef\u4ee5\u4ece128\u6bd4\u7279\u3001192\u6bd4\u7279\u548c256\u6bd4\u7279\u4e2d\u8fdb\u884c\u9009\u62e9\u3002\u5f53\u9009\u62e9128\u6bd4\u7279\u7684\u5206\u7ec4\u957f\u5ea6\u65f6\uff0cAES\u4e00\u6b21\u53ef\u52a0\u5bc6128\u6bd4\u7279\u7684\u660e\u6587\uff0c\u5e76\u751f\u6210128\u6bd4\u7279\u7684\u5bc6\u6587\u3002","title":"\u5206\u7ec4\u5bc6\u7801"},{"location":"about/#_26","text":"\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u53ea\u80fd\u52a0\u5bc6\u56fa\u5b9a\u957f\u5ea6\u7684\u5206\u7ec4\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u52a0\u5bc6\u7684\u660e\u6587\u957f\u5ea6\u53ef\u80fd\u4f1a\u8d85\u8fc7\u5206\u7ec4\u5bc6\u7801\u7684\u5206\u7ec4\u957f\u5ea6\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u5bf9\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u8fdb\u884c\u8fed\u4ee3\uff0c\u4ee5\u4fbf\u5c06\u4e00\u6bb5\u5f88\u957f\u7684\u660e\u6587\u5168\u90e8\u52a0\u5bc6\u3002\u800c\u8fed\u4ee3\u7684\u65b9\u6cd5\u5c31\u79f0\u4e3a\u5206\u7ec4\u5bc6\u7801\u7684\u6a21\u5f0f\uff08mode\uff09 \u3002 \u8bdd\u8bf4\u5230\u8fd9\u91cc\uff0c\u5f88\u591a\u8bfb\u8005\u53ef\u80fd\u4f1a\u8bf4\uff1a\u201c\u5982\u679c\u660e\u6587\u5f88\u957f\u7684\u8bdd\uff0c\u5c06\u660e\u6587\u5206\u5272\u6210\u82e5\u5e72\u4e2a\u5206\u7ec4\u518d\u9010\u4e2a\u52a0\u5bc6\u4e0d\u5c31\u597d\u4e86\u5417\uff1f\u201d\u4e8b\u5b9e\u4e0a\u53ef\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\u3002\u5c06\u660e\u6587\u5206\u5272\u6210\u591a\u4e2a\u5206\u7ec4\u5e76\u9010\u4e2a\u52a0\u5bc6\u7684\u65b9\u6cd5\u79f0\u4e3aECB\u6a21\u5f0f\uff0c\u8fd9\u79cd\u6a21\u5f0f\u5177\u6709\u5f88\u5927\u7684\u5f31\u70b9\uff08\u7a0d\u540e\u8bb2\u89e3\uff09\u3002\u5bf9\u5bc6\u7801\u4e0d\u662f\u5f88\u4e86\u89e3\u7684\u7a0b\u5e8f\u5458\u5728\u7f16\u5199\u52a0\u5bc6\u8f6f\u4ef6\u65f6\u7ecf\u5e38\u4f1a\u4f7f\u7528ECB\u6a21\u5f0f\uff0c\u4f46\u8fd9\u6837\u505a\u4f1a\u5728\u4e0d\u7ecf\u610f\u95f4\u4ea7\u751f\u5b89\u5168\u6f0f\u6d1e\uff0c \u56e0\u6b64\u5927\u5bb6\u8981\u8bb0\u4f4f\u5343\u4e07\u4e0d\u80fd\u4f7f\u7528ECB\u6a21\u5f0f \u3002 \u6a21\u5f0f\u6709\u5f88\u591a\u79cd\u7c7b\uff0c\u5206\u7ec4\u5bc6\u7801\u7684\u4e3b\u8981\u6a21\u5f0f\u6709\u4ee5\u4e0b5\u79cd\uff1a ECB\u6a21\u5f0f \uff1aElectronic Code Book mode\uff08\u7535\u5b50\u5bc6\u7801\u672c\u6a21\u5f0f\uff09 \u4e0d\u9002\u7528 \u6dd8\u6c70 CBC\u6a21\u5f0f \uff1aCipher Block Chaining mode\uff08\u5bc6\u6587\u5206\u7ec4\u94fe\u63a5\u6a21\u5f0f\uff09 \u5e38\u7528 CFB\u6a21\u5f0f \uff1aCipher FeedBack mode\uff08\u5bc6\u6587\u53cd\u9988\u6a21\u5f0f\uff09 \u652f\u6301\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528 OFB\u6a21\u5f0f \uff1aOutput FeedBack mode\uff08\u8f93\u51fa\u53cd\u9988\u6a21\u5f0f\uff09 \u652f\u6301\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528 CTR\u6a21\u5f0f \uff1aCounTeR mode\uff08\u8ba1\u6570\u5668\u6a21\u5f0f\uff09 \u5e38\u7528","title":"\u6a21\u5f0f"},{"location":"about/#_27","text":"\u5728\u4ecb\u7ecd\u6a21\u5f0f\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u5b66\u4e60\u4e24\u4e2a\u672f\u8bed\u3002 \u660e\u6587\u5206\u7ec4: \u662f\u6307\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u4e2d\u4f5c\u4e3a\u52a0\u5bc6\u5bf9\u8c61\u7684\u660e\u6587\u3002\u660e\u6587\u5206\u7ec4\u7684\u957f\u5ea6\u4e0e\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u7684\u5206\u7ec4\u957f\u5ea6\u662f\u76f8\u7b49\u7684\u3002 \u5bc6\u6587\u5206\u7ec4: \u662f\u6307\u4f7f\u7528\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u5c06\u660e\u6587\u5206\u7ec4\u52a0\u5bc6\u4e4b\u540e\u6240\u751f\u6210\u7684\u5bc6\u6587\u3002 \u5bc6\u6587\u5206\u7ec4\u7684\u957f\u5ea6\u4e0e\u660e\u6587\u5206\u7ec4\u4e00\u81f4","title":"\u660e\u6587\u5206\u7ec4\u548c\u5bc6\u6587\u5206\u7ec4"},{"location":"about/#_28","text":"","title":"\u52a0\u5bc6\u7b97\u6cd5\u548c\u5206\u7ec4\u6a21\u5f0f\u7684\u5173\u7cfb"},{"location":"about/#2-ecb","text":"ECB(Electronic Code Book, \u7535\u5b50\u5bc6\u7801\u672c)\u6a21\u5f0f\u662f\u6700\u7b80\u5355\u7684\u52a0\u5bc6\u6a21\u5f0f\uff0c \u660e\u6587\u6d88\u606f\u88ab\u5206\u6210\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\uff08\u5206\u7ec4\uff09\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5757\u88ab\u5355\u72ec\u52a0\u5bc6\u3002 \u6bcf\u4e2a\u5757\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u4e14\u4f7f\u7528\u76f8\u540c\u7684\u65b9\u6cd5\u8fdb\u884c\u52a0\u5bc6\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u884c\u5e76\u884c\u8ba1\u7b97\uff0c==\u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u4e00\u65e6\u6709\u4e00\u4e2a\u5757\u88ab\u7834\u89e3\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u5bc6\u6240\u6709\u7684\u660e\u6587\u6570\u636e==\uff0c \u7279\u70b9\uff1a \u5b89\u5168\u6027\u6bd4\u8f83\u5dee\u3002 \u9002\u7528\u4e8e\u6570\u636e\u8f83\u5c11\u7684\u60c5\u5f62\uff0c\u52a0\u5bc6\u524d\u9700\u8981\u628a\u660e\u6587\u6570\u636e\u586b\u5145\u5230\u5757\u5927\u5c0f\u7684\u6574\u500d\u6570\u3002","title":"2. ECB\u6a21\u5f0f"},{"location":"about/#_29","text":"","title":"\u52a0\u5bc6\u6548\u679c"},{"location":"about/#_30","text":"\u52a0\u5bc6\u6548\u7387\u9ad8\uff0c\u4f46\u662f\u4e0d\u5b89\u5168\uff0c\u52a0\u5bc6\u4e0d\u5f7b\u5e95 \u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7ec4\u540e\u505a\u6570\u636e\u586b\u5145 \u6bcf\u4e00\u4e2a\u5206\u7ec4\u72ec\u7acb\u7684\u8fdb\u884c\u52a0\u89e3\u5bc6 \u53ea\u8981\u6709\u4e00\u4e2a\u5206\u7ec4\u88ab\u7834\u89e3\uff0c\u6240\u6709\u7684\u5206\u7ec4\u90fd\u88ab\u7834\u89e3 \u4e0d\u7528\u4f7f\u7528\uff0cgo\u8bed\u8a00\u6ca1\u6709\u652f\u6301\u8fd9\u79cd\u5206\u7ec4\u6a21\u5f0f \u5206\u7ec4\u957f\u5ea6\u7531\u52a0\u5bc6\u7b97\u6cd5\u51b3\u5b9a\uff08DES\uff1a8bytes, AES: 16bytes\uff09","title":"\u7279\u70b9\uff1a"},{"location":"about/#3-cbc","text":"","title":"3. CBC\u6a21\u5f0f"},{"location":"about/#_31","text":"\u6309\u4f4d\u64cd\u4f5c\u7b26\u53f7 \u903b\u8f91\u64cd\u4f5c\u7b26\u53f7 \u4e0e & && \u6216 | || \u975e ~ \uff01 \u5f02\u6216 ^ \u65e0 A & B\uff0c \u6309\u4f4d\u4e0e 0000\uff0c 1000 => 8 0000\uff0c 1001 =>9 & \u6709\u4e00\u4e2a\u4e3a0\u5219\u4e3a0 0000\uff0c 1000 => 8 \u903b\u8f91\u4e0e\uff1aA && B ==> AND if (c == 0 && a == b) { fmt.print(\"hello world\") } \u6216 A | B\uff0c \u6309\u4f4d\u6216 0000\uff0c 1000 => 8 0000\uff0c 1001 => 9 | \u6709\u4e00\u4e2a\u4e3a1\u5219\u4e3a1 0000\uff0c 1001 => 9 \u903b\u8f91\u6216\uff1aA || B ==> OR if (c == 0 || a == b) { } \u5f02\u6216\uff1a==\u89c4\u5219\uff1a\u76f8\u540c\u4e3a0\uff0c\u4e0d\u540c\u4e3a1\uff0c \uff08\u540c\u9f84\u4eba\uff09== A\u2295B\uff0c \u5f02\u6216\u64cd\u4f5c 0000\uff0c 1000 =\u300b 8 0000\uff0c 1001 =\u300b9 \u2295 0000\uff0c 0001 =\u300b 1","title":"\u57fa\u7840\u8865\u5145"},{"location":"about/#_32","text":"\u52a0\u5bc6\u8fc7\u7a0b\uff1a 0000\uff0c 1000 =\u300b 8 ====> \u660e\u6587 0000\uff0c 1001 =\u300b9 ====> \u79d8\u94a5 \u200b \u2295 =\u300b \u7b97\u6cd5 0000\uff0c 0001 =\u300b 1 =\u300b\u5bc6\u6587 \u89e3\u5bc6\u8fc7\u7a0b\uff1a 0000\uff0c 0001 =\u300b 1 =\u300b\u5bc6\u6587 0000\uff0c 1001 =\u300b9 ====> \u79d8\u94a5 \u200b \u2295 =\u300b \u7b97\u6cd5 0000\uff0c1000 =\u300b8 =\u300b\u660e\u6587","title":"\u5f02\u6216\u52a0\u5bc6\u89e3\u5bc6"},{"location":"about/#cbc-","text":"CBC(Cipher Block Chaining, \u5bc6\u6587\u5206\u7ec4\u94fe\u63a5) \u6a21\u5f0f\u4e2d\u6bcf\u4e00\u4e2a\u5206\u7ec4\u8981\u5148\u548c\u524d\u4e00\u4e2a\u5206\u7ec4\u52a0\u5bc6\u540e\u7684\u6570\u636e\u8fdb\u884cXOR\u5f02\u6216\u64cd\u4f5c\uff0c\u7136\u540e\u518d\u8fdb\u884c\u52a0\u5bc6 \u3002 \u8fd9\u6837\u6bcf\u4e2a\u5bc6\u6587\u5757\u4f9d\u8d56\u8be5\u5757\u4e4b\u524d\u7684\u6240\u6709\u660e\u6587\u5757\uff0c\u4e3a\u4e86\u4fdd\u6301\u6bcf\u6761\u6d88\u606f\u90fd\u5177\u6709\u552f\u4e00\u6027\uff0c \u7b2c\u4e00\u4e2a\u6570\u636e\u5757\u8fdb\u884c\u52a0\u5bc6\u4e4b\u524d\u9700\u8981\u7528\u521d\u59cb\u5316\u5411\u91cfIV\u8fdb\u884c\u5f02\u6216\u64cd\u4f5c \u3002 CBC\u6a21\u5f0f\u662f\u4e00\u79cd\u6700\u5e38\u7528\u7684\u52a0\u5bc6\u6a21\u5f0f\uff0c\u5b83\u4e3b\u8981\u7f3a\u70b9\u662f\u52a0\u5bc6\u662f\u8fde\u7eed\u7684\uff0c\u4e0d\u80fd\u5e76\u884c\u5904\u7406\uff0c\u5e76\u4e14\u4e0eECB\u4e00\u6837\u6d88\u606f\u5757\u5fc5\u987b\u586b\u5145\u5230\u5757\u5927\u5c0f\u7684\u6574\u500d\u6570\u3002 \u7279\u70b9\uff1a \u6570\u636e\u5206\u7ec4\u957f\u5ea6\u6839\u636e\u7b97\u6cd5\u800c\u5b9a \u9700\u8981\u63d0\u4f9b\u521d\u59cb\u5316\u5411\u91cf\uff08Initialize Vector\uff09\uff0c\u8981\u6c42\u957f\u5ea6\u5fc5\u987b\u4e0e\u5206\u7ec4\u957f\u5ea6\u76f8\u540c \u6bcf\u4e00\u4e2a\u5bc6\u6587\u90fd\u662f\u4e0b\u4e00\u6b21\u52a0\u5bc6\u64cd\u4f5c\u7684\u8f93\u5165 \u4e0d\u80fd\u591f\u5e76\u884c\u52a0\u5bc6\uff0c\u53ef\u4ee5\u5e76\u884c\u89e3\u5bc6 \u52a0\u5bc6\u5f3a\u5ea6\u9ad8 \u5982\u679c\u6570\u636e\u5207\u5272\u540e\u957f\u5ea6\u4e0d\u6ee1\u8db3\u9700\u6c42\uff0c\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u586b\u5145\u3002 ECB\u4e0eCBC\u6a21\u5f0f\u7684\u6bd4\u8f83","title":"CBC-\u5bc6\u6587\u5206\u7ec4\u94fe\u63a5\u6a21\u5f0f \uff08\u5148\u5f02\u6216\u518d\u52a0\u5bc6\uff09"},{"location":"about/#4-cfb","text":"CFB\u6a21\u5f0f\u7684\u5168\u79f0\u662fCipher FeedBack\u6a21\u5f0f\uff08\u5bc6\u6587\u53cd\u9988\u6a21\u5f0f\uff09\u3002\u5728CFB\u6a21\u5f0f\u4e2d\uff0c \u524d\u4e00\u4e2a\u5206\u7ec4\u7684\u5bc6\u6587\u52a0\u5bc6\u540e\u548c\u5f53\u524d\u5206\u7ec4\u7684\u660e\u6587XOR\u5f02\u6216\u64cd\u4f5c\u751f\u6210\u5f53\u524d\u5206\u7ec4\u7684\u5bc6\u6587 \u3002 \u6240\u8c13\u53cd\u9988\uff0c\u8fd9\u91cc\u6307\u7684\u5c31\u662f\u8fd4\u56de\u8f93\u5165\u7aef\u7684\u610f\u601d\uff0c\u5373\u524d\u4e00\u4e2a\u5bc6\u6587\u5206\u7ec4\u4f1a\u88ab\u9001\u56de\u5230\u5bc6\u7801\u7b97\u6cd5\u7684\u8f93\u5165\u7aef\u3002 CFB\u6a21\u5f0f\u7684\u89e3\u5bc6\u548cCBC\u6a21\u5f0f\u7684\u52a0\u5bc6\u5728\u6d41\u7a0b\u4e0a\u5176\u5b9e\u662f\u975e\u5e38\u76f8\u4f3c\u7684\u3002 \u7279\u70b9\uff1a \u5206\u7ec4\u957f\u5ea6\u53d6\u51b3\u4e8e\u52a0\u5bc6\u7b97\u6cd5\u3002 \u9700\u8981\u521d\u59cb\u5316\u5411\u91cf\uff0c\u957f\u5ea6\u5fc5\u987b\u4e0e\u660e\u6587\u5206\u7ec4\u76f8\u540c\u3002 \u5148\u5bf9\u5bc6\u6587\u8fdb\u884c\u52a0\u5bc6\uff0c\u7136\u540e\u518d\u4e0e\u660e\u6587\u5206\u7ec4\u8fdb\u884c\u5f02\u6216\u3002\uff08CBC\u662f\u5148\u5f02\u6216\uff0c\u518d\u52a0\u5bc6\uff09 ==\u7531\u4e8e\u6ca1\u6709\u76f4\u63a5\u5bf9\u660e\u6587\u5206\u7ec4\u8fdb\u884c\u52a0\u5bc6\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u586b\u5145== \u6ce8\u610f\uff0c\u89e3\u5bc6\u7684\u65f6\u5019\uff0c\u662f\u5bf9\u521d\u59cb\u5411\u91cf\u8fdb\u884c\u52a0\u5bc6\u64cd\u4f5c\uff0c\u8fd9\u6837\u624d\u80fd\u5f97\u5230\u540c\u6837\u7684\u6570\u636e CBC\u4e0eCFB\u6bd4\u8f83","title":"4. CFB \u6a21\u5f0f\uff08\u5148\u52a0\u5bc6\u518d\u5f02\u6216\uff09"},{"location":"about/#5-ofb","text":"OFB\u5f0f\u7684\u5168\u79f0\u662fOutput-Feedback\u6a21\u5f0f\uff08\u8f93\u51fa\u53cd\u9988\u6a21\u5f0f\uff09\u3002\u5728OFB\u6a21\u5f0f\u4e2d\uff0c\u5bc6\u7801\u7b97\u6cd5\u7684\u8f93\u51fa\u4f1a\u53cd\u9988\u5230\u5bc6\u7801\u7b97\u6cd5\u7684\u8f93\u5165\u4e2d\uff0c \u5373\u4e0a\u4e00\u4e2a\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u7684\u8f93\u51fa\u662f\u5f53\u524d\u5206\u7ec4\u5bc6\u7801\u7b97\u6cd5\u7684\u8f93\u5165\uff08\u4e0b\u56fe\uff09\u3002 OFB\u6a21\u5f0f\u5e76\u4e0d\u662f\u901a\u8fc7\u5bc6\u7801\u7b97\u6cd5\u5bf9\u660e\u6587\u76f4\u63a5\u8fdb\u884c\u52a0\u5bc6\u7684\uff0c\u800c\u662f\u901a\u8fc7\u5c06 \u201c\u660e\u6587\u5206\u7ec4\" \u548c \u201c\u5bc6\u7801\u7b97\u6cd5\u7684\u8f93\u51fa\u201d \u8fdb\u884cXOR\u6765\u4ea7\u751f \u201c\u5bc6\u6587\u5206\u7ec4\u201d \u7684\uff0c\u5728\u8fd9\u4e00\u70b9\u4e0aOFB\u6a21\u5f0f\u548cCFB\u6a21\u5f0f\u975e\u5e38\u76f8\u4f3c\u3002 \u7279\u70b9\uff1a \u5206\u7ec4\u957f\u5ea6\u53d6\u51b3\u4e8e\u52a0\u5bc6\u7b97\u6cd5 \u4e0d\u65ad\u5bf9\u521d\u59cb\u5411\u91cf\u7684\u8f93\u51fa\u8fdb\u884c\u52a0\u5bc6\uff0c\u4ece\u800c\u5f97\u5230\u6570\u636e\u6765\u6e90 \u4e0d\u9700\u8981\u8fdb\u884c\u6570\u636e\u586b\u5145 CFB\u4e0eOFB\u5bf9\u6bd4","title":"5. OFB"},{"location":"about/#6-ctr","text":"CTR\u6a21\u5f0f\u7684\u5168\u79f0\u662fCounTeR\u6a21\u5f0f\uff08\u8ba1\u6570\u5668\u6a21\u5f0f\uff09\u3002 CTR\u6478\u5f0f\u662f\u4e00\u79cd\u901a\u8fc7\u5c06\u9010\u6b21\u7d2f\u52a0\u7684\u8ba1\u6570\u5668\u8fdb\u884c\u52a0\u5bc6\u6765\u751f\u6210\u5bc6\u94a5\u6d41\u7684\u6d41\u5bc6\u7801 \uff08\u4e0b\u56fe\uff09\u3002 CTR\u6a21\u5f0f\u4e2d\uff0c\u6bcf\u4e2a\u5206\u7ec4\u5bf9\u5e94\u4e00\u4e2a\u9010\u6b21\u7d2f\u52a0\u7684\u8ba1\u6570\u5668\uff0c\u5e76\u901a\u8fc7\u5bf9\u8ba1\u6570\u5668\u8fdb\u884c\u52a0\u5bc6\u6765\u751f\u6210\u5bc6\u94a5\u6d41\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6700\u7ec8\u7684\u5bc6\u6587\u5206\u7ec4\u662f\u901a\u8fc7\u5c06\u8ba1\u6570\u5668\u52a0\u5bc6\u5f97\u5230\u7684\u6bd4\u7279\u5e8f\u5217\uff0c\u4e0e\u660e\u6587\u5206\u7ec4\u8fdb\u884cXOR\u800c\u5f97\u5230\u7684\u3002 \u7279\u70b9\uff1a \u5206\u7ec4\u957f\u5ea6\u53d6\u51b3\u4e8e\u52a0\u5bc6\u7b97\u6cd5 \u4e0d\u9700\u8981\u586b\u5145 \u53ef\u4ee5\u5e76\u884c\u52a0\u5bc6\u548c\u5e76\u884c\u89e3\u5bc6\uff0c\u6548\u7387\u9ad8\uff0c\u63a8\u8350\u4f7f\u7528","title":"6. CTR"},{"location":"about/#_33","text":"\u6bcf\u6b21\u52a0\u5bc6\u65f6\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\uff08nonce\uff09\u6765\u4f5c\u4e3a\u8ba1\u6570\u5668\u7684\u521d\u59cb\u503c\u3002\u5f53\u5206\u7ec4\u957f\u5ea6\u4e3a128\u6bd4\u7279\uff0816\u5b57\u8282\uff09\u65f6\uff0c\u8ba1\u6570\u5668\u7684\u521d\u59cb\u503c\u53ef\u80fd\u662f\u50cf\u4e0b\u9762\u8fd9\u6837\u7684\u5f62\u5f0f\u3002 \u5176\u4e2d \u524d8\u4e2a\u5b57\u8282\u4e3anonce\uff08\u968f\u673a\u6570\uff09 \uff0c\u8fd9\u4e2a\u503c\u5728\u6bcf\u6b21\u52a0\u5bc6\u65f6\u5fc5\u987b\u90fd\u662f\u4e0d\u540c\u7684\uff0c\u540e8\u4e2a\u5b57\u8282\u4e3a\u5206\u7ec4\u5e8f\u53f7\uff0c\u8fd9\u4e2a\u90e8\u5206\u662f\u4f1a\u9010\u6b21\u7d2f\u52a0\u7684\u3002\u5728\u52a0\u5bc6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8ba1\u6570\u5668\u7684\u503c\u4f1a\u4ea7\u751f\u5982\u4e0b\u53d8\u5316\uff1a \u6309\u7167\u4e0a\u8ff0\u751f\u6210\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u8ba1\u6570\u5668\u7684\u503c\u6bcf\u6b21\u90fd\u4e0d\u540c\u3002\u7531\u4e8e\u8ba1\u6570\u5668\u7684\u503c\u6bcf\u6b21\u90fd\u4e0d\u540c\uff0c\u56e0\u6b64\u6bcf\u4e2a\u5206\u7ec4\u4e2d\u5c06\u8ba1\u6570\u5668\u8fdb\u884c\u52a0\u5bc6\u6240\u5f97\u5230\u7684\u5bc6\u94a5\u6d41\u4e5f\u662f\u4e0d\u540c\u7684\u3002\u4e5f\u662f\u8bf4\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5c31\u662f\u7528\u5206\u7ec4\u5bc6\u7801\u6765\u6a21\u62df\u751f\u6210\u968f\u673a\u7684\u6bd4\u7279\u5e8f\u5217\u3002 OFB\u4e0eCTR\u5bf9\u6bd4","title":"\u8ba1\u6570\u5668\u7684\u751f\u6210\u65b9\u6cd5"},{"location":"about/#7","text":"\u9700\u8981\u586b\u5145\uff1aECB CBC \u4e0d\u9700\u8981\u586b\u5145\uff1aCFB OFB CTR","title":"7. \u5c0f\u7ed3"},{"location":"about/#8","text":"","title":"8. \u4ee3\u7801\u5b9e\u73b0"},{"location":"about/#des-cbc","text":"\u624b\u518c: https://studygolang.com/pkgdoc","title":"des + CBC"},{"location":"about/#1_3","text":"package main import \"fmt\" /* \u9700\u6c42\uff1a\u7b97\u6cd5\uff1ades \uff0c \u5206\u7ec4\u6a21\u5f0f\uff1aCBC des : \u79d8\u94a5\uff1a8bytes \u5206\u7ec4\u957f\u5ea6\uff1a8bytes cbc: 1. \u63d0\u4f9b\u521d\u59cb\u5316\u5411\u91cf\uff0c\u957f\u5ea6\u4e0e\u5206\u7ec4\u957f\u5ea6\u76f8\u540c\uff0c8bytes 2. \u9700\u8981\u586b\u5145 \u52a0\u5bc6\u5206\u6790 1. \u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u4f7f\u7528DES\u7b97\u6cd5\u7684cipher.Block\u63a5\u53e3\u3002 func NewCipher(key []byte) (cipher.Block, error) - \u5305\u540d\uff1ades - \u53c2\u6570\uff1a\u79d8\u94a5\uff0c8bytes - \u8fd4\u56de\u503c\uff1a\u4e00\u4e2acipher.Block\u63a5\u53e3 type Block interface { // \u8fd4\u56de\u52a0\u5bc6\u5b57\u8282\u5757\u7684\u5927\u5c0f BlockSize() int // \u52a0\u5bc6src\u7684\u7b2c\u4e00\u5757\u6570\u636e\u5e76\u5199\u5165dst\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 Encrypt(dst, src []byte) // \u89e3\u5bc6src\u7684\u7b2c\u4e00\u5757\u6570\u636e\u5e76\u5199\u5165dst\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 Decrypt(dst, src []byte) } 2. \u8fdb\u884c\u6570\u636e\u586b\u5145 //TODO 3. \u5f15\u5165CBC\u6a21\u5f0f, \u8fd4\u56de\u4e00\u4e2a\u5bc6\u7801\u5206\u7ec4\u94fe\u63a5\u6a21\u5f0f\u7684\u3001\u5e95\u5c42\u7528b\u52a0\u5bc6\u7684BlockMode\u63a5\u53e3\uff0c\u521d\u59cb\u5411\u91cfiv\u7684\u957f\u5ea6\u5fc5\u987b\u7b49\u4e8eb\u7684\u5757\u5c3a\u5bf8\u3002 func NewCBCEncrypter(b Block, iv []byte) BlockMode - \u5305\u540d\uff1acipher - \u53c2\u65701\uff1acipher.Block - \u53c2\u65702\uff1aiv\uff0c initialize vector - \u8fd4\u56de\u503c\uff1a\u5206\u7ec4\u6a21\u5f0f\uff0c\u91cc\u9762\u63d0\u4f9b\u52a0\u89e3\u5bc6\u65b9\u6cd5 type BlockMode interface { // \u8fd4\u56de\u52a0\u5bc6\u5b57\u8282\u5757\u7684\u5927\u5c0f BlockSize() int // \u52a0\u5bc6\u6216\u89e3\u5bc6\u8fde\u7eed\u7684\u6570\u636e\u5757\uff0csrc\u7684\u5c3a\u5bf8\u5fc5\u987b\u662f\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 CryptBlocks(dst, src []byte) } \u89e3\u5bc6\u5206\u6790 */","title":"1. \u6b65\u9aa4\u5206\u6790"},{"location":"about/#2_2","text":"//\u8f93\u5165\u660e\u6587\uff0c\u79d8\u94a5\uff0c\u8f93\u51fa\u5bc6\u6587 func desCBCEncrypt(src, key []byte) []byte { //TODO fmt.Printf(\"\u52a0\u5bc6\u5f00\u59cb\uff0c\u8f93\u5165\u7684\u6570\u636e\u4e3a\uff1a%s\\n\", src) fmt.Printf(\"\u52a0\u5bc6\u7ed3\u675f\uff0c\u52a0\u5bc6\u6570\u636e\u4e3a%x\\n\", src) return []byte{} } func main() { src := []byte(\"12345678\") key := []byte(\"12345678\") cipherData := desCBCEncrypt(src, key) fmt.Printf(\"cipherData : %x\\n\", cipherData) }","title":"2. \u6d4b\u8bd5\u6846\u67b6"},{"location":"about/#3-","text":"//\u8f93\u5165\u660e\u6587\uff0c\u79d8\u94a5\uff0c\u8f93\u51fa\u5bc6\u6587 func desCBCEncrypt(src, key []byte) []byte { fmt.Printf(\"\u52a0\u5bc6\u5f00\u59cb\uff0c\u8f93\u5165\u7684\u6570\u636e\u4e3a\uff1a%s\\n\", src) //1. \u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u4f7f\u7528DES\u7b97\u6cd5\u7684cipher.Block\u63a5\u53e3\u3002 //NewCipher(key []byte) (cipher.Block, error) block, err := des.NewCipher(key) fmt.Printf(\"block size : %d\\n\", block.BlockSize()) if err != nil { panic(err) } //2. \u8fdb\u884c\u6570\u636e\u586b\u5145 //TODO //3. \u5f15\u5165CBC\u6a21\u5f0f, \u8fd4\u56de\u4e00\u4e2a\u5bc6\u7801\u5206\u7ec4\u94fe\u63a5\u6a21\u5f0f\u7684\u3001\u5e95\u5c42\u7528b\u52a0\u5bc6\u7684BlockMode\u63a5\u53e3\uff0c\u521d\u59cb\u5411\u91cfiv\u7684\u957f\u5ea6\u5fc5\u987b\u7b49\u4e8eb\u7684\u5757\u5c3a\u5bf8\u3002 //func NewCBCEncrypter(b Block, iv []byte) BlockMode iv := bytes.Repeat([]byte(\"1\"), block.BlockSize()) blockMode := cipher.NewCBCEncrypter(block, iv) //4. \u52a0\u5bc6\u64cd\u4f5c blockMode.CryptBlocks(src /*\u52a0\u5bc6\u540e\u7684\u5bc6\u6587*/ , src /*\u660e\u6587*/) fmt.Printf(\"\u52a0\u5bc6\u7ed3\u675f\uff0c\u52a0\u5bc6\u6570\u636e\u4e3a%x\\n\", src) return src }","title":"3. \u5b9e\u73b0\u52a0\u5bc6\u51fd\u6570-\u65e0\u586b\u5145"},{"location":"about/#4_1","text":"\u586b\u5145\u903b\u8f91\u5206\u6790 //\u586b\u5145\u51fd\u6570, \u8f93\u5165\u660e\u6587, \u5206\u7ec4\u957f\u5ea6, \u8f93\u51fa\uff1a\u586b\u5145\u540e\u7684\u6570\u636e func paddingInfo(src []byte, blockSize int) []byte { //1. \u5f97\u5230\u660e\u6587\u7684\u957f\u5ea6 length := len(src) //2. \u9700\u8981\u586b\u5145\u7684\u6570\u91cf remains := length % blockSize //3 paddingNumber := blockSize - remains //5 //3. \u628a\u586b\u5145\u7684\u6570\u503c\u8f6c\u6362\u4e3a\u5b57\u7b26 s1 := byte(paddingNumber) // '5' //4. \u628a\u5b57\u7b26\u62fc\u6210\u6570\u7ec4 s2 := bytes.Repeat([]byte{s1}, paddingNumber) //[]byte{'5', '5', '5', '5, '5'} //5. \u628a\u62fc\u6210\u7684\u6570\u7ec4\u8ffd\u52a0\u5230src\u540e\u9762 srcNew := append(src, s2...) //6. \u8fd4\u56de\u65b0\u7684\u6570\u7ec4 return srcNew } \u51fd\u6570\u8c03\u7528 \u8fd0\u884c\u7ed3\u679c","title":"4.\u586b\u5145\u51fd\u6570\u5b9e\u73b0"},{"location":"about/#5","text":"\u89e3\u5bc6\u5206\u6790 1. \u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u4f7f\u7528DES\u7b97\u6cd5\u7684cipher.Block\u63a5\u53e3\u3002 func NewCipher(key []byte) (cipher.Block, error) - \u5305\u540d\uff1ades - \u53c2\u6570\uff1a\u79d8\u94a5\uff0c8bytes - \u8fd4\u56de\u503c\uff1a\u4e00\u4e2acipher.Block\u63a5\u53e3 type Block interface { // \u8fd4\u56de\u52a0\u5bc6\u5b57\u8282\u5757\u7684\u5927\u5c0f BlockSize() int // \u52a0\u5bc6src\u7684\u7b2c\u4e00\u5757\u6570\u636e\u5e76\u5199\u5165dst\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 Encrypt(dst, src []byte) // \u89e3\u5bc6src\u7684\u7b2c\u4e00\u5757\u6570\u636e\u5e76\u5199\u5165dst\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 Decrypt(dst, src []byte) } 2. \u8fd4\u56de\u4e00\u4e2a\u5bc6\u7801\u5206\u7ec4\u94fe\u63a5\u6a21\u5f0f\u7684\u3001\u5e95\u5c42\u7528b\u89e3\u5bc6\u7684BlockMode\u63a5\u53e3\uff0c\u521d\u59cb\u5411\u91cfiv\u5fc5\u987b\u548c\u52a0\u5bc6\u65f6\u4f7f\u7528\u7684iv\u76f8\u540c\u3002 func NewCBCDecrypter(b Block, iv []byte) BlockMode - \u5305\u540d\uff1acipher - \u53c2\u65701\uff1acipher.Block - \u53c2\u65702\uff1aiv\uff0c initialize vector - \u8fd4\u56de\u503c\uff1a\u5206\u7ec4\u6a21\u5f0f\uff0c\u91cc\u9762\u63d0\u4f9b\u52a0\u89e3\u5bc6\u65b9\u6cd5 type BlockMode interface { // \u8fd4\u56de\u52a0\u5bc6\u5b57\u8282\u5757\u7684\u5927\u5c0f BlockSize() int // \u52a0\u5bc6\u6216\u89e3\u5bc6\u8fde\u7eed\u7684\u6570\u636e\u5757\uff0csrc\u7684\u5c3a\u5bf8\u5fc5\u987b\u662f\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 CryptBlocks(dst, src []byte) } 3. \u89e3\u5bc6\u64cd\u4f5c 4. \u53bb\u9664\u586b\u5145 //TODO */","title":"5. \u89e3\u5bc6\u6b65\u9aa4\u5206\u6790"},{"location":"about/#6-","text":"//\u8f93\u5165\u5bc6\u6587\uff0c\u79d8\u94a5\uff0c\u5f97\u5230\u660e\u6587 func desCBCDecrypt(cipherData, key []byte) []byte { fmt.Printf(\"\u89e3\u5bc6\u5f00\u59cb\uff0c\u8f93\u5165\u7684\u6570\u636e\u4e3a\uff1a%x\\n\", cipherData) //1. \u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u4f7f\u7528DES\u7b97\u6cd5\u7684cipher.Block\u63a5\u53e3\u3002 //NewCipher(key []byte) (cipher.Block, error) block, err := des.NewCipher(key) fmt.Printf(\"block size : %d\\n\", block.BlockSize()) if err != nil { panic(err) } //3. \u5f15\u5165CBC\u6a21\u5f0f iv := bytes.Repeat([]byte(\"1\"), block.BlockSize()) blockMode := cipher.NewCBCDecrypter(block, iv) //4. \u89e3\u5bc6\u64cd\u4f5c blockMode.CryptBlocks(cipherData /*\u89e3\u5bc6\u540e\u7684\u660e\u6587*/ , cipherData /*\u5bc6\u6587*/) fmt.Printf(\"\u89e3\u5bc6\u7ed3\u675f\uff0c\u89e3\u5bc6\u6570\u636e\u4e3a%s\\n\", cipherData) //5. \u53bb\u9664\u586b\u5145 //TODO return cipherData } func main() { src := []byte(\"123456789123123123\") key := []byte(\"12345678\") cipherData := desCBCEncrypt(src, key) fmt.Printf(\"cipherData : %x\\n\", cipherData) plainText := desCBCDecrypt(cipherData, key) fmt.Printf(\"plainText str: %s\\n\", plainText) fmt.Printf(\"plainText hex: %x\\n\", plainText) }","title":"6. \u89e3\u5bc6\u51fd\u6570-\u672a\u53bb\u9664\u586b\u5145"},{"location":"about/#7_1","text":"//\u53bb\u9664\u586b\u5145 func unpaddingInfo(plainText []byte) []byte { //1. \u83b7\u53d6\u957f\u5ea6 length := len(plainText) if length == 0 { return []byte{} } //2. \u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u5b57\u7b26 lastByte := plainText[length-1] //3. \u5c06\u5b57\u7b26\u8f6c\u6362\u6210\u6570\u5b57 unpaddingNumber := int(lastByte) //4. \u5207\u7247\u83b7\u53d6\u9700\u8981\u7684\u6570\u636e return plainText[:length-unpaddingNumber] } \u8c03\u7528\u8fc7\u7a0b func main() { src := []byte(\"\u4e0d\u662f\u4e00\u756a\u5bd2\u5f7b\u9aa8\uff0c\u54ea\u5f97\u6885\u82b1\u6251\u9f3b\u9999!!!\") key := []byte(\"12345678\") cipherData := desCBCEncrypt(src, key) fmt.Printf(\"cipherData : %x\\n\", cipherData) fmt.Printf(\"+++++++++++++++++++++++++\\n\") plainText := desCBCDecrypt(cipherData, key) fmt.Printf(\"plainText str: %s\\n\", plainText) fmt.Printf(\"plainText hex: %x\\n\", plainText) } \u8fd0\u884c\u7ed3\u679c","title":"7.\u53bb\u9664\u586b\u5145\u51fd\u6570"},{"location":"about/#aes-ctr","text":"","title":"aes + CTR"},{"location":"about/#1_4","text":"/* \u9700\u6c42\uff1a \u4f7f\u7528aes\uff0c ctr aes : - \u5206\u7ec4\u957f\u5ea6\uff1a 16 - \u79d8\u94a5\uff1a16 ctr: - \u4e0d\u9700\u8981\u586b\u5145 - \u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u6570\u5b57 1. \u521b\u5efa\u4e00\u4e2acipher.Block\u63a5\u53e3\u3002\u53c2\u6570key\u4e3a\u5bc6\u94a5\uff0c\u957f\u5ea6\u53ea\u80fd\u662f16\u300124\u300132\u5b57\u8282\uff0c\u7528\u4ee5\u9009\u62e9AES-128\u3001AES-192\u3001AES-256\u3002 func NewCipher(key []byte) (cipher.Block, error) - \u5305\uff1aaes - \u79d8\u94a5 - cipher.Block\u63a5\u53e3 2. \u9009\u62e9\u5206\u7ec4\u6a21\u5f0f\uff1actr \u8fd4\u56de\u4e00\u4e2a\u8ba1\u6570\u5668\u6a21\u5f0f\u7684\u3001\u5e95\u5c42\u91c7\u7528block\u751f\u6210key\u6d41\u7684Stream\u63a5\u53e3\uff0c\u521d\u59cb\u5411\u91cfiv\u7684\u957f\u5ea6\u5fc5\u987b\u7b49\u4e8eblock\u7684\u5757\u5c3a\u5bf8\u3002 func NewCTR(block Block, iv []byte) Stream - block - iv - \u79d8\u94a5\u6d41 3. \u52a0\u5bc6\u64cd\u4f5c type Stream interface { // \u4ece\u52a0\u5bc6\u5668\u7684key\u6d41\u548csrc\u4e2d\u4f9d\u6b21\u53d6\u51fa\u5b57\u8282\u4e8c\u8005xor\u540e\u5199\u5165dst\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 XORKeyStream(dst, src []byte) } */","title":"1. \u52a0\u5bc6\u5206\u6790"},{"location":"about/#2_3","text":"package main import ( \"crypto/aes\" \"crypto/cipher\" \"bytes\" \"fmt\" ) func aesCTREncrypt(src, key []byte) []byte { //1. \u521b\u5efa\u4e00\u4e2acipher.Block\u63a5\u53e3\u3002 block, err := aes.NewCipher(key) if err != nil { panic(err) } fmt.Print(\"aes block size : \", block.BlockSize()) iv := bytes.Repeat([]byte(\"1\"), block.BlockSize()) //2. \u9009\u62e9\u5206\u7ec4\u6a21\u5f0f\uff1actr stream := cipher.NewCTR(block, iv) //3. \u52a0\u5bc6\u64cd\u4f5c stream.XORKeyStream(src /*\u5bc6\u6587*/ , src /*\u660e\u6587*/) return src } func main() { src := []byte(\"\u4e0d\u662f\u4e00\u756a\u5bd2\u5f7b\u9aa8\uff0c\u54ea\u5f97\u6885\u82b1\u6251\u9f3b\u9999!!! 123456734523452345 \") key := []byte(\"1234567887654321\") cipherData := aesCTREncrypt(src, key) fmt.Printf(\"cipherData : %x\\n\", cipherData) }","title":"2. \u52a0\u5bc6\u6d4b\u8bd5\u4ee3\u7801"},{"location":"about/#3_1","text":"func aesCTRDecrypt(cipherData, key []byte) []byte { //1. \u521b\u5efa\u4e00\u4e2acipher.Block\u63a5\u53e3\u3002 block, err := aes.NewCipher(key) if err != nil { panic(err) } iv := bytes.Repeat([]byte(\"1\"), block.BlockSize()) //2. \u9009\u62e9\u5206\u7ec4\u6a21\u5f0f\uff1actr stream := cipher.NewCTR(block, iv) //3. \u89e3\u5bc6\u64cd\u4f5c stream.XORKeyStream(cipherData /*\u660e\u6587*/ , cipherData) return cipherData }","title":"3. \u89e3\u5bc6\u5206\u6790"},{"location":"about/#4_2","text":"package main import ( \"crypto/aes\" \"crypto/cipher\" \"bytes\" \"fmt\" ) /* \u9700\u6c42\uff1a \u4f7f\u7528aes\uff0c ctr aes : - \u5206\u7ec4\u957f\u5ea6\uff1a 16 - \u79d8\u94a5\uff1a16 ctr: - \u4e0d\u9700\u8981\u586b\u5145 - \u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u6570\u5b57 1. \u521b\u5efa\u4e00\u4e2acipher.Block\u63a5\u53e3\u3002\u53c2\u6570key\u4e3a\u5bc6\u94a5\uff0c\u957f\u5ea6\u53ea\u80fd\u662f16\u300124\u300132\u5b57\u8282\uff0c\u7528\u4ee5\u9009\u62e9AES-128\u3001AES-192\u3001AES-256\u3002 func NewCipher(key []byte) (cipher.Block, error) - \u5305\uff1aaes - \u79d8\u94a5 - cipher.Block\u63a5\u53e3 2. \u9009\u62e9\u5206\u7ec4\u6a21\u5f0f\uff1actr \u8fd4\u56de\u4e00\u4e2a\u8ba1\u6570\u5668\u6a21\u5f0f\u7684\u3001\u5e95\u5c42\u91c7\u7528block\u751f\u6210key\u6d41\u7684Stream\u63a5\u53e3\uff0c\u521d\u59cb\u5411\u91cfiv\u7684\u957f\u5ea6\u5fc5\u987b\u7b49\u4e8eblock\u7684\u5757\u5c3a\u5bf8\u3002 func NewCTR(block Block, iv []byte) Stream - block - iv - \u79d8\u94a5\u6d41 3. \u52a0\u5bc6\u64cd\u4f5c type Stream interface { // \u4ece\u52a0\u5bc6\u5668\u7684key\u6d41\u548csrc\u4e2d\u4f9d\u6b21\u53d6\u51fa\u5b57\u8282\u4e8c\u8005xor\u540e\u5199\u5165dst\uff0csrc\u548cdst\u53ef\u6307\u5411\u540c\u4e00\u5185\u5b58\u5730\u5740 XORKeyStream(dst, src []byte) } */ func aesCTREncrypt(src, key []byte) []byte { fmt.Printf(\"\u660e\u6587\uff1a %s\\n\", src) //1. \u521b\u5efa\u4e00\u4e2acipher.Block\u63a5\u53e3\u3002 block, err := aes.NewCipher(key) if err != nil { panic(err) } fmt.Println(\"aes block size : \", block.BlockSize()) iv := bytes.Repeat([]byte(\"1\"), block.BlockSize()) //2. \u9009\u62e9\u5206\u7ec4\u6a21\u5f0f\uff1actr stream := cipher.NewCTR(block, iv) //3. \u52a0\u5bc6\u64cd\u4f5c stream.XORKeyStream(src /*\u5bc6\u6587*/ , src /*\u660e\u6587*/) return src } func aesCTRDecrypt(cipherData, key []byte) []byte { //1. \u521b\u5efa\u4e00\u4e2acipher.Block\u63a5\u53e3\u3002 block, err := aes.NewCipher(key) if err != nil { panic(err) } iv := bytes.Repeat([]byte(\"1\"), block.BlockSize()) //2. \u9009\u62e9\u5206\u7ec4\u6a21\u5f0f\uff1actr stream := cipher.NewCTR(block, iv) //3. \u89e3\u5bc6\u64cd\u4f5c stream.XORKeyStream(cipherData /*\u660e\u6587*/ , cipherData) return cipherData } func main() { src := []byte(\"\u4e0d\u662f\u4e00\u756a\u5bd2\u5f7b\u9aa8\uff0c\u54ea\u5f97\u6885\u82b1\u6251\u9f3b\u9999!!! 123456734523452345 \") key := []byte(\"1234567887654321\") cipherData := aesCTREncrypt(src, key) fmt.Printf(\"cipherData : %x\\n\", cipherData) fmt.Printf(\"+++++++++++++++++++++++++\\n\") plainText := aesCTRDecrypt(cipherData, key) fmt.Printf(\"plainText \uff1a %s\\n\", plainText) } \u8fd0\u884c\u622a\u56fe","title":"4.\u5b8c\u6574\u4ee3\u7801"},{"location":"about/#_34","text":"\u79d8\u94a5\u7ba1\u7406\u56f0\u96be\u2014\u2014\u5f53\u901a\u4fe1\u5bf9\u8c61\u5f88\u591a\u65f6\u4f1a\u9762\u4e34\u4f17\u591a\u79d8\u94a5\u7684\u6709\u6548\u7ba1\u7406\u95ee\u9898\u3002 \u79d8\u94a5\u5206\u53d1\u56f0\u96be\u2014\u2014\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u901a\u4fe1\u5bf9\u8c61\uff0c\u5bc6\u94a5\u600e\u6837\u8fdb\u884c\u4f20\u8f93\u7684\u95ee\u9898\u3002\u4e24\u4e2a\u4eba\u5982\u4f55\u4fdd\u8bc1\u79d8\u94a5\u4e0d\u88ab\u7a83\u53d6\uff1f","title":"\u5bf9\u79f0\u52a0\u5bc6\u5b58\u5728\u7684\u95ee\u9898"},{"location":"about/#_35","text":"#### RSA","title":"\u975e\u5bf9\u79f0\u52a0\u5bc6"},{"location":"about/#1_5","text":"\u79c1\u94a5\uff1a\u4f7f\u7528\u968f\u673a\u6570\u6309\u7167\u4e00\u5b9a\u89c4\u5219\u751f\u6210\u7684 \u516c\u94a5\uff1a\u7531\u79c1\u94a5\u63a8\u5bfc\u800c\u6765\u3002 \u968f\u673a\u6570\u636e =\u300b\u7b97\u6cd5 =\u300b \u79c1\u94a5 =\u300b \u516c\u94a5 \u79c1\u94a5\uff1a\u53ea\u6709\u81ea\u5df1\u6301\u6709\uff0c\u4e0d\u53ef\u4ee5\u5411\u4efb\u4f55\u4eba\u4f20\u64ad \u516c\u94a5\uff1a\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u6301\u6709\uff0c\u516c\u94a5\u52a0\u5bc6\u7684\u6570\u636e\u53ea\u80fd\u88ab\u914d\u5957\u7684\u79c1\u94a5\u89e3\u5f00\u3002","title":"1.\u57fa\u672c\u77e5\u8bc6"},{"location":"about/#rsa","text":"x509:https://baike.baidu.com/item/x509/1240109 pem:https://blog.csdn.net/crjmail/article/details/79095385 base64: x509\u8bc1\u4e66\u89c4\u8303\u3001pem\u3001base64 pem\u7f16\u7801\u89c4\u8303 - \u6570\u636e\u52a0\u5bc6 base64 - \u5bf9\u6570\u636e\u7f16\u7801, \u53ef\u9006 \u4e0d\u7ba1\u539f\u59cb\u6570\u636e\u662f\u4ec0\u4e48, \u5c06\u539f\u59cb\u6570\u636e\u4f7f\u752864\u4e2a\u5b57\u7b26\u6765\u66ff\u4ee3 a-z A-Z 0-9 + / ASN.1\u62bd\u8c61\u8bed\u6cd5\u6807\u8bb0 PKCS1\u6807\u51c6","title":"\u751f\u6210RSA\u7684\u79d8\u94a5\u5bf9\u51e0\u4e2a\u6982\u5ff5"},{"location":"about/#2openssl","text":"#\u76ee\u524d\u4e3b\u6d41\u5bc6\u94a5\u957f\u5ea6\u81f3\u5c11\u90fd\u662f1024bits\u4ee5\u4e0a\uff0c\u4f4e\u4e8e1024bit\u7684\u5bc6\u94a5\u5df2\u7ecf\u4e0d\u5efa\u8bae\u4f7f\u7528\uff08\u5b89\u5168\u95ee\u9898\uff09 OpenSSL> genrsa -out rsa_private_key.pem 1024 #\u751f\u6210\u79c1\u94a5, 1024\u662f\u5bc6\u94a5\u957f\u5ea6 #\u53ef\u4ee5\u4e0d\u6307\u5b9a\u79c1\u94a5\u957f\u5ea6\uff0c\u9ed8\u8ba4\u662f2048\u4f4d\uff0c\u957f\u5ea6\u5efa\u8bae1024\u4ee5\u4e0a\uff0c\u8fd9\u6837\u5b89\u5168\uff01\uff01 OpenSSL> rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem #\u751f\u6210\u516c\u94a5 OpenSSL> exit #\u9000\u51faOpenSSL\u7a0b\u5e8f","title":"2.openssl\u751f\u6210\u65b9\u5f0f"},{"location":"about/#_36","text":"","title":"\u5e38\u89c1\u4f7f\u7528\u573a\u666f"},{"location":"about/#1_6","text":"\u516c\u94a5\u52a0\u5bc6\uff0c\u79c1\u94a5\u89e3\u5bc6","title":"1. \u901a\u4fe1\u52a0\u5bc6"},{"location":"about/#2-https","text":"\u9a8c\u8bc1\u670d\u52a1\u5668\uff0c\u6570\u5b57\u8bc1\u4e66\uff0c\u4f7f\u7528ca\u8ba4\u8bc1\u516c\u94a5","title":"2. HTTPS"},{"location":"about/#3_2","text":"\u54c8\u5e0c+\u975e\u5bf9\u79f0\u52a0\u5bc6","title":"3. \u7b7e\u540d\uff08\u9632\u6b62\u7be1\u6539\uff09"},{"location":"about/#4-u","text":"\u9a8c\u8bc1client\uff0cU\u76fe\u76f8\u5f53\u4e8e\u79c1\u94a5\uff0c\u516c\u94a5\u5728\u670d\u52a1\u7aef","title":"4. \u7f51\u94f6U\u76fe"},{"location":"about/#5-github-sshsecure-shell","text":"ssh: https://blog.csdn.net/PeipeiQ/article/details/80702514 ssh: https://www.cnblogs.com/yyds/p/6992125.html ssh\u662f\u4e00\u79cd\u7f51\u7edc\u534f\u8bae\uff0c\u4e3b\u8981\u7528\u4e8e\u8ba1\u7b97\u673a\u4e4b\u95f4\u7684\u52a0\u5bc6\u767b\u5f55\u4e0e\u6570\u636e\u4f20\u8f93 ssh\u767b\u5f55\u7684\u65f6\u5019\u6ca1\u6709ca\u8ba4\u8bc1\uff0c\u9700\u8981\u7528\u6237\u81ea\u5df1\u786e\u8ba4\u767b\u5f55\u4e3b\u673a\u7684\u6307\u7eb9\uff0c\u70b9\u51fbyes\u540e\u628a\u8fdc\u7a0b\u4e3b\u673a\u7684\u6307\u7eb9\u5b58\u653e\u5230\u672c\u5730\u7684know_hosts\u4e2d\uff0c\u540e\u7eed\u767b\u5f55\u4f1a\u8df3\u8fc7\u8b66\u544a\u3002 ssh-keygen -t rsa\uff0c\u6f14\u793a","title":"5. github ssh(secure shell)\u767b\u5f55"},{"location":"about/#rsa_1","text":"","title":"RSA\u751f\u6210\u89c4\u5219"},{"location":"about/#1_7","text":"\u53c2\u8003\u94fe\u63a5\uff1ahttps://www.cnblogs.com/jiftle/p/7903762.html \u7b97\u6cd5\u63cf\u8ff0\uff1a \uff081\uff09\u9009\u62e9\u4e00\u5bf9\u4e0d\u540c\u7684\u3001\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff0cq\u3002 \uff082\uff09\u8ba1\u7b97n=pq\u3002 \uff083\uff09\u8ba1\u7b97f(n)=(p-1)(q-1)\uff0c\u540c\u65f6\u5bf9p, q\u4e25\u52a0\u4fdd\u5bc6\uff0c\u4e0d\u8ba9\u4efb\u4f55\u4eba\u77e5\u9053\u3002 \uff084\uff09\u627e\u4e00\u4e2a\u4e0ef(n)\u4e92\u8d28\u7684\u6570e\uff0c\u4e141<e<f(n)\u3002 \uff085\uff09\u8ba1\u7b97d\uff0c\u4f7f\u5f97de\u22611 mod f(n)\u3002\u8fd9\u4e2a\u516c\u5f0f\u4e5f\u53ef\u4ee5\u8868\u8fbe\u4e3ad \u2261e-1 mod f(n) \u8fd9\u91cc\u8981\u89e3\u91ca\u4e00\u4e0b\uff0c\u2261\u662f\u6570\u8bba\u4e2d\u8868\u793a\u540c\u4f59\u7684\u7b26\u53f7\u3002\u516c\u5f0f\u4e2d\uff0c\u2261\u7b26\u53f7\u7684\u5de6\u8fb9\u5fc5\u987b\u548c\u7b26\u53f7\u53f3\u8fb9\u540c\u4f59\uff0c\u4e5f\u5c31\u662f\u4e24\u8fb9\u6a21\u8fd0\u7b97\u7ed3\u679c\u76f8\u540c\u3002\u663e\u800c\u6613\u89c1\uff0c\u4e0d\u7ba1f(n)\u53d6\u4ec0\u4e48\u503c\uff0c\u7b26\u53f7\u53f3\u8fb91 mod f(n)\u7684\u7ed3\u679c\u90fd\u7b49\u4e8e1\uff1b\u7b26\u53f7\u7684\u5de6\u8fb9d\u4e0ee\u7684\u4e58\u79ef\u505a\u6a21\u8fd0\u7b97\u540e\u7684\u7ed3\u679c\u4e5f\u5fc5\u987b\u7b49\u4e8e1\u3002\u8fd9\u5c31\u9700\u8981\u8ba1\u7b97\u51fad\u7684\u503c\uff0c\u8ba9\u8fd9\u4e2a\u540c\u4f59\u7b49\u5f0f\u80fd\u591f\u6210\u7acb\u3002 \uff086\uff09\u516c\u94a5KU=(e,n)\uff0c\u79c1\u94a5KR=(d,n)\u3002 \uff087\uff09\u52a0\u5bc6\u65f6\uff0c\u5148\u5c06\u660e\u6587\u53d8\u6362\u62100\u81f3n-1\u7684\u4e00\u4e2a\u6574\u6570M\u3002\u82e5\u660e\u6587\u8f83\u957f\uff0c\u53ef\u5148\u5206\u5272\u6210\u9002\u5f53\u7684\u7ec4\uff0c\u7136\u540e\u518d\u8fdb\u884c\u4ea4\u6362\u3002\u8bbe\u5bc6\u6587\u4e3aC\uff0c\u5219\u52a0\u5bc6\u8fc7\u7a0b\u4e3a\uff1a \u3002 \uff088\uff09\u89e3\u5bc6\u8fc7\u7a0b\u4e3a\uff1a \u3002 \u9009\u62e9P\uff0cQ\uff1a100~200\u4f4d\u7684\u5927\u7d20\u6570 N: P * Q F(n) = (P -1 )(Q - 1) \u9009\u62e9E: 1 < E < F(n) D*E === 1 mod F(n)\uff0c \u540c\u4f59\u8fd0\u7b97\u7b26 =\u300b \u9000\u51faD","title":"1. \u89c4\u5219\u63cf\u8ff0"},{"location":"about/#2-demo","text":"P:3, Q:11 N : 3 * 11 = 33 F(n) = (3 -1)(11-1) = 2 * 10 = 20 E: 1 < E < 20 ==> \u9009 3 ( D * E ) %F(n) = 1 ( D * 3 ) %20 = 1 => D\u9009\u62e97 \u516c\u94a5\uff1a {E, N} => {3, 33} \u79c1\u94a5\uff1a {D, N} => {7, 33} \u52a0\u5bc6\u65f6\uff0c\u5148\u5bf9\u660e\u6587\u8fdb\u884c\u8f6c\u6362\uff0c\u5bf9\u6570\u503c\u8fdb\u884c\u52a0\u5bc6 \u89e3\u5bc6\u65f6\uff0c\u5148\u6839\u636e\u89c4\u5219\u89e3\u5bc6\uff0c\u6839\u636e\u5b57\u7b26\u8868\u8f6c\u6362\u4e3a\u660e\u6587","title":"2. demo"},{"location":"about/#gorsa","text":"","title":"GO\u521b\u5efaRSA\u79c1\u94a5"},{"location":"about/#1_8","text":"/* \u9700\u6c42: \u751f\u6210\u5e76\u4fdd\u5b58\u79c1\u94a5\uff0c\u516c\u94a5 \u751f\u6210\u79c1\u94a5\u5206\u6790\uff1a 1. GenerateKey\u51fd\u6570\u4f7f\u7528\u968f\u673a\u6570\u636e\u751f\u6210\u5668random\u751f\u6210\u4e00\u5bf9\u5177\u6709\u6307\u5b9a\u5b57\u4f4d\u6570\u7684RSA\u5bc6\u94a5\u3002 func GenerateKey(random io.Reader, bits int) (priv *PrivateKey, err error) - \u53c2\u65701\uff1a\u968f\u673a\u6570 - \u53c2\u65702\uff1a\u79d8\u94a5\u957f\u5ea6 - \u8fd4\u56de\u503c\uff1a\u79c1\u94a5 2. \u8981\u5bf9\u751f\u6210\u7684\u79c1\u94a5\u8fdb\u884c\u7f16\u7801\u5904\u7406\uff0c x509\uff0c \u6309\u7167\u89c4\u5219\uff0c\u8fdb\u884c\u5e8f\u5217\u5316\u5904\u7406, \u751f\u6210der\u7f16\u7801\u7684\u6570\u636e MarshalPKCSPv1ublicKey\u5c06\u516c\u94a5\u5e8f\u5217\u5316\u4e3aPKCS\u683c\u5f0fDER\u7f16\u7801\u3002 func MarshalPKCSPublicKey(pub *PrivateKey) ([]byte, error) 3. \u521b\u5efaBlock\u4ee3\u8868PEM\u7f16\u7801\u7684\u7ed3\u6784, \u5e76\u586b\u5165der\u7f16\u7801\u7684\u6570\u636e type Block struct { Type string // \u5f97\u81ea\u524d\u8a00\u7684\u7c7b\u578b\uff08\u5982\"RSA PRIVATE KEY\"\uff09 Headers map[string]string // \u53ef\u9009\u7684\u5934\u9879 Bytes []byte // \u5185\u5bb9\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c\u4e00\u822c\u662fDER\u7f16\u7801\u7684ASN.1\u7ed3\u6784 } 4. \u5c06Pem Block\u6570\u636e\u5199\u5165\u5230\u78c1\u76d8\u6587\u4ef6 func Encode(out io.Writer, b *Block) error */ \u79c1\u94a5\uff1a type PrivateKey struct { PublicKey // public part. D *big.Int // private exponent Primes []*big.Int // prime factors of N, has >= 2 elements. // Precomputed contains precomputed values that speed up private // operations, if available. Precomputed PrecomputedValues } \u516c\u94a5\uff1a type PublicKey struct { N *big.Int // modulus E int // public exponent }","title":"1. \u5206\u6790"},{"location":"about/#2_4","text":"package main import ( \"crypto/rsa\" \"crypto/rand\" \"crypto/x509\" \"encoding/pem\" \"os\" \"fmt\" ) const privateKeyFile = \"./privateRsaKey.pem\" //\u9700\u6c42: \u751f\u6210\u5e76\u4fdd\u5b58\u79c1\u94a5\uff0c\u516c\u94a5 func generateKeyPair(bits int) error { //\u751f\u6210\u79c1\u94a5\u5206\u6790\uff1a //1. GenerateKey\u51fd\u6570\u4f7f\u7528\u968f\u673a\u6570\u636e\u751f\u6210\u5668random\u751f\u6210\u4e00\u5bf9\u5177\u6709\u6307\u5b9a\u5b57\u4f4d\u6570\u7684RSA\u5bc6\u94a5\u3002 //func GenerateKey(random io.Reader, bits int) (priv *PrivateKey, err error) //\u5305\uff1a rsa //- \u53c2\u65701\uff1a\u968f\u673a\u6570, crypto/rand, \u968f\u673a\u6570\u751f\u6210\u5668 //- \u53c2\u65702\uff1a\u79d8\u94a5\u957f\u5ea6 //- \u8fd4\u56de\u503c\uff1a\u79c1\u94a5 privateKey, err := rsa.GenerateKey(rand.Reader, bits) if err != nil { return err } // //2. \u8981\u5bf9\u751f\u6210\u7684\u79c1\u94a5\u8fdb\u884c\u7f16\u7801\u5904\u7406\uff0c x509\uff0c \u6309\u7167\u89c4\u5219\uff0c\u8fdb\u884c\u5e8f\u5217\u5316\u5904\u7406, \u751f\u6210der\u7f16\u7801\u7684\u6570\u636e //MarshalPKCS1PrivateKey\u5c06\u516c\u94a5\u5e8f\u5217\u5316\u4e3aPKCS\u683c\u5f0fDER\u7f16\u7801\u3002 // MarshalPKCS1PrivateKey converts a private key to ASN.1 DER encoded form. //func MarshalPKCS1PrivateKey(key *rsa.PrivateKey) []byte { priDerText := x509.MarshalPKCS1PrivateKey(privateKey) //3. \u521b\u5efaBlock\u4ee3\u8868PEM\u7f16\u7801\u7684\u7ed3\u6784, \u5e76\u586b\u5165der\u7f16\u7801\u7684\u6570\u636e //type Block struct { // Type string // \u5f97\u81ea\u524d\u8a00\u7684\u7c7b\u578b\uff08\u5982\"RSA PRIVATE KEY\"\uff09 // Headers map[string]string // \u53ef\u9009\u7684\u5934\u9879 // Bytes []byte // \u5185\u5bb9\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c\u4e00\u822c\u662fDER\u7f16\u7801\u7684ASN.1\u7ed3\u6784 //} block := pem.Block{ Type: \"SZ RSA PRIVATE KEY\", //\u968f\u4fbf\u586b\u5199 Headers: nil, //\u53ef\u9009\u4fe1\u606f\uff0c\u5305\u62ec\u79c1\u94a5\u52a0\u5bc6\u65b9\u5f0f\u7b49 Bytes: priDerText, //\u79c1\u94a5\u7f16\u7801\u540e\u7684\u6570\u636e } //4. \u5c06Pem Block\u6570\u636e\u5199\u5165\u5230\u78c1\u76d8\u6587\u4ef6 fileHandler1, err := os.Create(privateKeyFile) if err != nil { return err } //func Encode(out io.Writer, b *Block) error err = pem.Encode(fileHandler1, &block) if err != nil { return err } return nil } func main() { fmt.Printf(\"generate rsa private key ...\\n\") err := generateKeyPair(1024) if err != nil { fmt.Printf(\"generate rsa private failed, err : %v\", err) } fmt.Printf(\"generate rsa private key successfully!\\n\") }","title":"2. \u751f\u6210\u79c1\u94a5\u4ee3\u7801"},{"location":"about/#3_3","text":"fmt.Println(\"++++++++++++++ \u751f\u6210\u516c\u94a5 +++++++++++\") /* 1. \u83b7\u53d6\u516c\u94a5\uff0c \u901a\u8fc7\u79c1\u94a5\u83b7\u53d6 2. \u8981\u5bf9\u751f\u6210\u7684\u79c1\u94a5\u8fdb\u884c\u7f16\u7801\u5904\u7406\uff0c x509\uff0c \u6309\u7167\u89c4\u5219\uff0c\u8fdb\u884c\u5e8f\u5217\u5316\u5904\u7406, \u751f\u6210der\u7f16\u7801\u7684\u6570\u636e 3. \u521b\u5efaBlock\u4ee3\u8868PEM\u7f16\u7801\u7684\u7ed3\u6784, \u5e76\u586b\u5165der\u7f16\u7801\u7684\u6570\u636e 4. \u5c06Pem Block\u6570\u636e\u5199\u5165\u5230\u78c1\u76d8\u6587\u4ef6 */ //1. \u83b7\u53d6\u516c\u94a5\uff0c \u901a\u8fc7\u79c1\u94a5\u83b7\u53d6 pubKey := privateKey.PublicKey //\u6ce8\u610f\u662f\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u5730\u5740 //2. \u8981\u5bf9\u751f\u6210\u7684\u79c1\u94a5\u8fdb\u884c\u7f16\u7801\u5904\u7406\uff0c x509\uff0c \u6309\u7167\u89c4\u5219\uff0c\u8fdb\u884c\u5e8f\u5217\u5316\u5904\u7406, \u751f\u6210der\u7f16\u7801\u7684\u6570\u636e pubKeyDerText := x509.MarshalPKCS1PublicKey(&pubKey) //3. \u521b\u5efaBlock\u4ee3\u8868PEM\u7f16\u7801\u7684\u7ed3\u6784, \u5e76\u586b\u5165der\u7f16\u7801\u7684\u6570\u636e block1 := pem.Block{ Type: \"SZ RSA Public Key\", Headers: nil, Bytes: pubKeyDerText, } //4. \u5c06Pem Block\u6570\u636e\u5199\u5165\u5230\u78c1\u76d8\u6587\u4ef6 fileHandler2, err := os.Create(publicKeyFile) if err != nil { return err }","title":"3. \u516c\u94a5\u751f\u6210\u4ee3\u7801"},{"location":"about/#rsa_2","text":"","title":"RSA\u52a0\u89e3\u5bc6"},{"location":"about/#1_9","text":"1. \u901a\u8fc7\u516c\u94a5\u6587\u4ef6\uff0c\u8bfb\u53d6\u516c\u94a5\u4fe1\u606f ==\u300b pem encode \u7684\u6570\u636e 2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e 3. \u89e3\u7801der\uff0c\u5f97\u5230\u516c\u94a5 4. \u516c\u94a5\u52a0\u5bc6 package main import ( \"io/ioutil\" \"encoding/pem\" \"crypto/x509\" \"crypto/rsa\" \"crypto/rand\" \"fmt\" ) const privateKeyFile = \"./RsaPrivateKey.pem\" const publicKeyFile = \"./RsaPublicKey.pem\" func rsaPubEncrypt(filename string, plainText []byte) (error, []byte) { //1. \u901a\u8fc7\u516c\u94a5\u6587\u4ef6\uff0c\u8bfb\u53d6\u516c\u94a5\u4fe1\u606f ==\u300b pem encode \u7684\u6570\u636e info, err := ioutil.ReadFile(filename) if err != nil { return err, nil } //2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e block, _ := pem.Decode(info) //\u8fd4\u56de\u503c1 \uff1apem.block //\u8fd4\u56de\u503c2\uff1arest\u53c2\u52a0\u662f\u672a\u89e3\u7801\u5b8c\u7684\u6570\u636e\uff0c\u5b58\u50a8\u5728\u8fd9\u91cc //type Block struct { // Type string // \u5f97\u81ea\u524d\u8a00\u7684\u7c7b\u578b\uff08\u5982\"RSA PRIVATE KEY\"\uff09 // Headers map[string]string // \u53ef\u9009\u7684\u5934\u9879 // Bytes []byte // \u5185\u5bb9\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c\u4e00\u822c\u662fDER\u7f16\u7801\u7684ASN.1\u7ed3\u6784 //} //3. \u89e3\u7801der\uff0c\u5f97\u5230\u516c\u94a5 //derText := block.Bytes derText := block.Bytes publicKey, err := x509.ParsePKCS1PublicKey(derText) if err != nil { return err, nil } //4. \u516c\u94a5\u52a0\u5bc6 //EncryptPKCS1v15\u4f7f\u7528PKCS#1 v1.5\u89c4\u5b9a\u7684\u586b\u5145\u65b9\u6848\u548cRSA\u7b97\u6cd5\u52a0\u5bc6msg\u3002 //func EncryptPKCS1v15(rand io.Reader, pub *PublicKey, msg []byte) (out []byte, err error) cipherData, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, plainText) if err != nil { return err, nil } return nil, cipherData } func main() { src := []byte(\"\u795d\u73ed\u4e3b\u4efb\u8282\u65e5\u5feb\u4e50!\") err, cipherData := rsaPubEncrypt(publicKeyFile, src) if err != nil { fmt.Println(\"\u516c\u94a5\u52a0\u5bc6\u5931\u8d25!\") } fmt.Printf(\"cipherData : %x\\n\", cipherData) }","title":"1. \u516c\u94a5\u52a0\u5bc6"},{"location":"about/#2_5","text":"\u601d\u8def\u5206\u6790\u540c\u4e0a \u4ee3\u7801\u5b9e\u73b0: func rsaPriKeyDecrypt(filename string, cipherData []byte) (error, []byte) { //1. \u901a\u8fc7\u79c1\u94a5\u6587\u4ef6\uff0c\u8bfb\u53d6\u79c1\u94a5\u4fe1\u606f ==\u300b pem encode \u7684\u6570\u636e info, err := ioutil.ReadFile(filename) if err != nil { return err, nil } //2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e block, _ := pem.Decode(info) //\u8fd4\u56de\u503c1 \uff1apem.block //\u8fd4\u56de\u503c2\uff1arest\u53c2\u52a0\u662f\u672a\u89e3\u7801\u5b8c\u7684\u6570\u636e\uff0c\u5b58\u50a8\u5728\u8fd9\u91cc //type Block struct { // Type string // \u5f97\u81ea\u524d\u8a00\u7684\u7c7b\u578b\uff08\u5982\"RSA PRIVATE KEY\"\uff09 // Headers map[string]string // \u53ef\u9009\u7684\u5934\u9879 // Bytes []byte // \u5185\u5bb9\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c\u4e00\u822c\u662fDER\u7f16\u7801\u7684ASN.1\u7ed3\u6784 //} //3. \u89e3\u7801der\uff0c\u5f97\u5230\u79c1\u94a5 //derText := block.Bytes derText := block.Bytes privateKey, err := x509.ParsePKCS1PrivateKey(derText) if err != nil { return err, nil } //4. \u79c1\u94a5\u89e3\u5bc6 //DecryptPKCS1v15\u4f7f\u7528PKCS#1 v1.5\u89c4\u5b9a\u7684\u586b\u5145\u65b9\u6848\u548cRSA\u7b97\u6cd5\u89e3\u5bc6\u5bc6\u6587\u3002\u5982\u679crandom\u4e0d\u662fnil\uff0c\u51fd\u6570\u4f1a\u6ce8\u610f\u89c4\u907f\u65f6\u95f4\u4fa7\u4fe1\u9053\u653b\u51fb\u3002 //func DecryptPKCS1v15(rand io.Reader, priv *PrivateKey, ciphertext []byte) (out []byte, err error) plainText, err := rsa.DecryptPKCS1v15(rand.Reader, privateKey, cipherData) if err != nil { return err, nil } return nil, plainText } main: func main() { src := []byte(\"\u795d\u73ed\u4e3b\u4efb\u8282\u65e5\u5feb\u4e50!\") err, cipherData := rsaPubEncrypt(publicKeyFile, src) if err != nil { fmt.Println(\"\u516c\u94a5\u52a0\u5bc6\u5931\u8d25!, err :\", err) } fmt.Printf(\"cipherData : %x\\n\", cipherData) fmt.Println(\"++++++++++++++++++++++++++++++\") err, plainText := rsaPriKeyDecrypt(privateKeyFile, cipherData) if err != nil { fmt.Println(\"\u79c1\u94a5\u89e3\u5bc6\u5931\u8d25!, err : \", err) } fmt.Printf(\"plainText : %s\\n\", plainText) }","title":"2. \u79c1\u94a5\u89e3\u5bc6"},{"location":"about/#_37","text":"","title":"\u8fd0\u884c\u7ed3\u679c"},{"location":"about/#base64","text":"","title":"\u56db\u3001Base64"},{"location":"about/#_38","text":"Base64\u7f16\u7801\uff0c\u662f\u6211\u4eec\u7a0b\u5e8f\u5f00\u53d1\u4e2d\u7ecf\u5e38\u4f7f\u7528\u5230\u7684\u7f16\u7801\u65b9\u6cd5\u3002\u56e0\u4e3abase64\u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u66f4\u9002\u5408\u4e0d\u540c\u5e73\u53f0\u3001\u4e0d\u540c\u8bed\u8a00\u7684\u4f20\u8f93\uff08\u4e00\u4e2a\u5b57\u7b26\u53ef\u80fd\u5176\u4ed6\u7684\u7cfb\u7edf\u6ca1\u6709\uff09\u3002\u5b83\u662f\u4e00\u79cd\u57fa\u4e8e\u752864\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u6765\u8868\u793a\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u8868\u793a\u65b9\u6cd5\u3002\u5b83\u901a\u5e38\u7528\u4f5c\u5b58\u50a8\u3001\u4f20\u8f93\u4e00\u4e9b\u4e8c\u8fdb\u5236\u6570\u636e\u7f16\u7801\u65b9\u6cd5\uff0c\u4e00\u53e5\uff1a\u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u6587\u672c\u5316\uff08\u8f6c\u6210ASCII\uff09\u3002","title":"\u6982\u8ff0"},{"location":"about/#_39","text":"\u7531\u4e8e\u67d0\u4e9b\u7cfb\u7edf\u4e2d\u53ea\u80fd\u4f7f\u7528ASCII\u5b57\u7b26\u3002Base64\u5c31\u662f\u7528\u6765\u5c06\u975eASCII\u5b57\u7b26\u7684\u6570\u636e\u8f6c\u6362\u6210ASCII\u5b57\u7b26\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 \u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u6587\u672c\u5316\u540e\u7684\u4f20\u8f93 \u524d\u540e\u53f0\u4ea4\u4e92\u65f6\uff0c\u7ecf\u5e38\u4f7f\u7528base64\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u7279\u6b8a\u5b57\u7b26\u4f20\u8f93\u9519\u8bef \u4f7f\u7528\u547d\u4ee4\u6d4b\u8bd5\u6b65\u9aa4\uff1a 1. cp /bin/ls . 2. base64 ls > 1.txt 3. \u67e5\u770b1.txt =\u300b \u53ef\u8bfb\u7684\u6587\u672c\u6570\u636e 4. base64 -D 1.txt > myls ==> \u5c06\u6587\u672c\u6570\u636e\u89e3\u7801\u4e3a\u539f\u6765\u7684ls\u6570\u636e\uff0c -D decode 5. ls -al 1.txt ./ls ./myls ===== duke ~$ ls -al 1.txt ./ls ./myls -rwxr-xr-x 1 duke staff 38704 3 6 14:49 ./ls -rwxr-xr-x 1 duke staff 38704 3 6 14:49 ./myls -rw-r--r-- 1 duke staff 51609 3 6 14:49 1.txt ===== 6. chmod +x myls => \u6dfb\u52a0\u6267\u884c\u6743\u9650 7. ./myls ==\u300b \u4e0els\u529f\u80fd\u76f8\u540c","title":"\u4f5c\u7528"},{"location":"about/#2_6","text":"\u666e\u901a\u7684base64\u5b57\u7b26\u96c6 #\u5e38\u7528 A-Z : 26 a-z : 26 0-9: 10 +, / : 2 64\u4e2a ======== URL\u4e13\u7528\u7684base64\u5b57\u7b26\u96c6 A-Z : 26 a-z : 26 0-9: 10 -\uff0c_ : 2 64\u4e2a","title":"2. \u5b57\u7b26\u96c6"},{"location":"about/#3_4","text":"MAn => 3 * 8 = 24 / 6 = 4 M => 77 = 64 + 8 + 4 + 1 => 0100, 1101 Base64\u7f16\u7801\u7684\u6570\u636e\u6bd4\u539f\u6765\u7684\u5b57\u8282\u6570\u5927\u3002 \u75313\u5b57\u8282 => 4\u5b57\u8282 man =>twfu ========== \u5f53\u9700\u8981\u7f16\u7801\u7684\u6570\u636e\u4e0d\u8db3\u65f6\uff0c\u4f7f\u7528\u7b49\u53f7\uff08=\uff09\u586b\u5145\uff0c\u89e3\u7801\u65f6\uff0c\u4f1a\u81ea\u52a8\u5254\u9664 base64\u5c31\u662f\u4e00\u79cd\u57fa\u4e8e64\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u6765\u8868\u793a\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u65b9\u6cd5\u3002 \u7f16\u7801\u540e\u4fbf\u4e8e\u4f20\u8f93\uff0c\u5c24\u5176\u662f\u4e0d\u53ef\u89c1\u5b57\u7b26\u6216\u7279\u6b8a\u5b57\u7b26\uff0c\u5bf9\u7aef\u63a5\u6536\u540e\u89e3\u7801\u5373\u53ef\u590d\u539f\u3002 base64\u53ea\u662f\u7f16\u7801\uff0c\u5e76\u4e0d\u5177\u6709\u52a0\u5bc6\u4f5c\u7528\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u6240\u8f93\u51fa\u7684\u7f16\u7801\u4f4d\u53ef\u8bfb\u5b57\u7b26\uff0cBase64\u5236\u5b9a\u4e86\u4e00\u4e2a\u7f16\u7801\u8868\uff0c\u4ee5\u4fbf\u8fdb\u884c\u7edf\u4e00\u8f6c\u6362\u3002\u7f16\u7801\u8868\u7684\u5927\u5c0f\u4e3a2^6=64\uff0c\u8fd9\u4e5f\u662fBase64\u540d\u79f0\u7684\u7531\u6765\u3002","title":"3. \u7f16\u7801\u89c4\u5219"},{"location":"about/#base64_1","text":"","title":"Base64\u7f16\u7801\u8868"},{"location":"about/#_40","text":"","title":"\u6070\u597d\u4e09\u4e2a\u5b57\u8282\u60c5\u51b5"},{"location":"about/#_41","text":"","title":"\u4e0d\u8db3\u4e09\u4e2a\u5b57\u8282\u60c5\u51b5"},{"location":"about/#4-gobase64","text":"package main import ( \"fmt\" \"encoding/base64\" ) func main() { fmt.Printf(\"\u6807\u51c6base64\u7f16\u7801...\\n\") //info := []byte(\"\u56fd\u8db3\u5b87\u5b99\u7b2c\u4e00!!!\") info := []byte(\"https://studygolang.com/pkgdoc&hell?/?=\") encodeInfo := base64.StdEncoding.EncodeToString(info) fmt.Printf(\"encode info 1 : %s\\n\", encodeInfo) fmt.Printf(\"URL base64\u7f16\u7801...\\n\") urlEncodeInfo := base64.URLEncoding.EncodeToString(info) fmt.Printf(\"url encode info : %s\\n\", urlEncodeInfo) } \u8fd0\u884c\u7ed3\u679c duke ~/go/src/01_\u6388\u8bfe\u4ee3\u7801/05-shenzhen-term3/01-\u5bc6\u7801\u5b66$ go run 06-base64-test.go \u6807\u51c6base64\u7f16\u7801... encode info 1 : aHR0cHM6Ly9zdHVkeWdvbGFuZy5jb20vcGtnZG9jJmhlbGw/Lz89 URL base64\u7f16\u7801... url encode info : aHR0cHM6Ly9zdHVkeWdvbGFuZy5jb20vcGtnZG9jJmhlbGw_Lz89 duke ~/go/src/01_\u6388\u8bfe\u4ee3\u7801/05-shenzhen-term3/01-\u5bc6\u7801\u5b66$","title":"4. go\u4ee3\u7801\u6d4b\u8bd5base64"},{"location":"about/#hash","text":"","title":"\u4e94\u3001Hash(\u54c8\u5e0c)"},{"location":"about/#_42","text":"","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"about/#1_10","text":"mac : shasum -a 256 <\u6587\u4ef6\u540d> linux : sha256Sum <\u6587\u4ef6\u540d> sha256\u54c8\u5e0c\u8fd0\u7b97\uff0c\u662f\u4e00\u4e2ahash\u7b97\u6cd5 //sha256\u8fd0\u7b97\u540e\uff0c\u5f97\u5230256\u4f4d\u7684\u54c8\u5e0c\u6570\u503c\uff0c \u4f7f\u752816\u8fdb\u5236\u6253\u5370\u5982\u4e0b\uff1a 46a546cfdc716cd3d7e49795a3b77428470778126b2b0e004932adb7844a5a54 64 * 4 = 256bit","title":"1. \u547d\u4ee4\uff1a"},{"location":"about/#2_7","text":"Hash: \u53ef\u4ee5\u5bf9\u8f93\u5165\u7684\u6570\u636e\u5185\u5bb9\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u6570\u503c \u552f\u4e00\u6807\u8bc6 \u5bf9\u4e8e#\u540c\u4e00\u4e2a\u7b97\u6cd5\uff0c\u6709\u5982\u4e0b\u7279\u6027\uff1a 1. \u8f93\u5165\u5185\u5bb9\u4e0d\u53d8\uff0c\u8f93\u51fa\u5185\u5bb9\u4e0d\u53d8 2. \u8f93\u5165\u5185\u5bb9\u6539\u53d8\uff0c\u54ea\u6015\u662f\u4e00\u70b9\u70b9\u6539\u53d8\uff0c\u8f93\u51fa\u7684\u5185\u5bb9\u5343\u5dee\u4e07\u522b 3. \u65e0\u8bba\u8f93\u5165\u7684\u5185\u5bb9\u5927\u5c0f\u5982\u4f55\uff0c\uff081M, 1K, 1G\uff09\uff0c \u751f\u6210\u7684\u54c8\u5e0c\u957f\u5ea6\u76f8\u540c 4. \u54c8\u5e0c\u8fd0\u7b97\u662f\u5bf9\u8f93\u5165\u5185\u5bb9\u505a\u6458\u8981\uff08\u6307\u7eb9\uff09\uff0c\u65e0\u6cd5\u6839\u636e\u54c8\u5e0c\u503c\u53cd\u63a8\u4f1a\u539f\u6587\u3002 \u8f93\u5165\uff1a\u539f\u50cf \u8f93\u51fa\uff1a\u6458\u8981\uff0c\u6307\u7eb9\uff0c\u54c8\u5e0c\u503c \u7b97\u6cd5\uff1a\u54c8\u5e0c\u51fd\u6570\uff0c\u6458\u8981\u51fd\u6570\uff0c\u6d88\u606f\u6458\u8981\u51fd\u6570\uff0c\u6742\u51d1\u51fd\u6570","title":"2. \u7279\u6027\uff1a"},{"location":"about/#_43","text":"\u5355\u5411\u6563\u5217\u51fd\u6570\u7684\u76f8\u5173\u672f\u8bed\u6709\u5f88\u591a\u53d8\u4f53\uff0c\u4e0d\u540c\u53c2\u8003\u8d44\u6599\u4e2d\u6240\u4f7f\u7528\u7684\u672f\u8bed\u4e5f\u4e0d\u540c\uff0c\u4e0b\u9762\u6211\u4eec\u5c31\u4ecb\u7ecd\u5176\u4e2d\u7684\u513f\u4e2a\u3002 \u5355\u5411\u6563\u5217\u51fd\u6570\u4e5f\u79f0\u4e3a \u6d88\u606f\u6458\u8981\u51fd\u6570 \uff08message digest function\uff09\u3001 \u54c8\u5e0c\u51fd\u6570 \u6216\u8005 \u6742\u51d1\u51fd\u6570 \u3002 \u8f93\u5165\u5355\u5411\u6563\u5217\u51fd\u6570\u7684\u6d88\u606f\u4e5f\u79f0\u4e3a \u539f\u50cf \uff08pre-image\uff09\u3002 \u5355\u5411\u6563\u5217\u51fd\u6570\u8f93\u51fa\u7684\u6563\u5217\u503c\u4e5f\u79f0\u4e3a \u6d88\u606f\u6458\u8981 \uff08message digest\uff09\u6216\u8005 \u6307\u7eb9 \uff08fingerprint\uff09\u3002 \u5b8c\u6574\u6027 \u4e5f\u79f0\u4e3a\u4e00\u81f4\u6027\u3002 \u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u5355\u5411\u6563\u5217\u51fd\u6570\u4e2d\u7684\u201c\u6563\u5217\u201d\u7684\u82f1\u6587\"hash\u4e00\u8bcd\uff0c\u539f\u610f\u662f\u53e4\u6cd5\u8bed\u4e2d\u7684\u201c\u65a7\u5b50\u201d\uff0c\u540e\u6765\u88ab\u5f15\u7533\u4e3a\u201c\u5241\u788e\u7684\u8089\u672b\"\uff0c\u4e5f\u8bb8\u662f\u7528\u65a7\u5b50\u4e00\u901a\u4e71\u5241\u518d\u6405\u5728\u4e00\u8d77\u7684\u90a3\u79cd\u611f\u89c9\u5427\u3002\u5355\u5411\u6563\u5217\u51fd\u6570\u7684\u4f5c\u7528\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5c06\u5f88\u957f\u7684\u6d88\u606f\u5241\u788e\uff0c\u7136\u540e\u518d\u6df7\u5408\u6210\u56fa\u5b9a\u957f\u5ea6\u7684\u6563\u5217\u503c\u3002 \u6839\u636e\u4efb\u610f\u957f\u5ea6\u7684\u6d88\u606f\u8ba1\u7b97\u51fa\u56fa\u5b9a\u957f\u5ea6\u7684\u6563\u5217\u503c \u80fd\u591f\u5feb\u901f\u8ba1\u7b97\u51fa\u6563\u5217\u503c \u6d88\u606f\u4e0d\u540c\u6563\u5217\u503c\u4e5f\u4e0d\u540c ==\u91cd\u8981\u7279\u6027\uff1a== \u539f\u50cf\u4e0d\u53ef\u9006\uff1a sh \u5177\u5907\u5355\u5411\u6027\uff0c 1k => 10G\u5185\u5bb9, \u4e0d\u53ef\u80fd \u6297\u78b0\u649e\u6027\uff1a ```sh 2^256 \u53ef\u80fd =\u300b\u5168\u5b87\u5b99\u53ef\u89c2\u6d4b\u539f\u5b50\u603b\u6570 \u7ed9\u4e00\u4e2a\u54c8\u5e0c\u503c\uff1a46a546cfdc716cd3d7e49795a3b77428470778126b2b0e004932adb7844a5a54 \u4f60\u53bb\u62fc\u88c5\u4e00\u6bb5\u5185\u5bb9\uff0c\u4f7f\u5f97\u8fd0\u884c\u540c\u6837\u7684\u7b97\u6cd5\uff0c\u540c\u6837\u7684\u54c8\u5e0c\u503c\u3002\u4e0d\u53ef\u80fd\u5b8c\u6210\u7684 ```","title":"\u5173\u4e8e\u672f\u8bed"},{"location":"about/#_44","text":"","title":"\u54c8\u5e0c\u5e94\u7528"},{"location":"about/#1_11","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u6765\u786e\u8ba4\u81ea\u5df1\u4e0b\u8f7d\u7684\u8f6f\u4ef6\u662f\u5426\u88ab\u7be1\u6539\u3002 \u5f88\u591a\u8f6f\u4ef6\uff0c\u5c24\u5176\u662f\u5b89\u5168\u76f8\u5173\u7684\u8f6f\u4ef6\u90fd\u4f1a\u628a\u901a\u8fc7\u5355\u5411\u6563\u5217\u51fd\u6570\u8ba1\u7b97\u51fa\u7684\u6563\u5217\u503c\u516c\u5e03\u5728\u81ea\u5df1\u7684\u5b98\u65b9\u7f51\u7ad9\u4e0a\u3002\u7528\u6237\u5728\u4e0b\u8f7d\u5230\u8f6f\u4ef6\u4e4b\u540e\uff0c\u53ef\u4ee5\u81ea\u884c\u8ba1\u7b97\u6563\u5217\u503c\uff0c\u7136\u540e\u4e0e\u5b98\u65b9\u7f51\u7ad9\u4e0a\u516c\u5e03\u7684\u6563\u5217\u503c\u8fdb\u884c\u5bf9\u6bd4\u3002\u901a\u8fc7\u6563\u5217\u503c\uff0c\u7528\u6237\u53ef\u4ee5\u786e\u8ba4\u81ea\u5df1\u6240\u4e0b\u8f7d\u5230\u7684\u6587\u4ef6\u4e0e\u8f6f\u4ef6\u4f5c\u8005\u6240\u63d0\u4f9b\u7684\u6587\u4ef6\u662f\u5426\u4e00\u81f4\u3002 \u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u5728\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u9014\u5f84\u5f97\u5230\u8f6f\u4ef6\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u6709\u7528\u3002\u4e3a\u4e86\u51cf\u8f7b\u670d\u52a1\u5668\u7684\u538b\u529b\uff0c\u5f88\u591a\u8f6f\u4ef6\u4f5c\u8005\u90fd\u4f1a\u501f\u52a9\u591a\u4e2a\u7f51\u7ad9\uff08\u955c\u50cf\u7ad9\u70b9\uff09\u6765\u53d1\u5e03\u8f6f\u4ef6\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5355\u5411\u6563\u5217\u51fd\u6570\u5c31\u4f1a\u5728\u68c0\u6d4b\u8f6f\u4ef6\u662f\u5426\u88ab\u7be1\u6539\u65b9\u9762\u53d1\u6325\u91cd\u8981\u4f5c\u7528\u3002","title":"1. \u68c0\u6d4b\u8f6f\u4ef6\u662f\u5426\u88ab\u7be1\u6539"},{"location":"about/#2_8","text":"\u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u53ef\u4ee5\u6784\u9020\u6d88\u606f\u8ba4\u8bc1\u7801\u3002 \u6d88\u606f\u8ba4\u8bc1\u7801\u662f\u5c06\u201c\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u4e4b\u95f4\u7684\u5171\u4eab\u5bc6\u94a5\u201d\u548c\u201c\u6d88\u606f\uff0c\u8fdb\u884c\u6df7\u5408\u540e\u8ba1\u7b97\u51fa\u7684\u6563\u5217\u503c\u3002\u4f7f\u7528\u6d88\u606f\u8ba4\u8bc1\u7801\u53ef\u4ee5\u68c0\u6d4b\u5e76\u9632\u6b62\u901a\u4fe1\u8fc7\u7a0b\u4e2d\u7684\u9519\u8bef\u3001\u7be1\u6539\u4ee5\u53ca\u4f2a\u88c5\u3002","title":"2. \u6d88\u606f\u8ba4\u8bc1\u7801"},{"location":"about/#3_5","text":"\u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u53ef\u4ee5\u6784\u9020\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002 \u5bc6\u7801\u6280\u672f\u4e2d\u6240\u4f7f\u7528\u7684\u968f\u673a\u6570\u9700\u8981\u5177\u5907\u201c\u4e8b\u5b9e\u4e0a\u4e0d\u53ef\u80fd\u6839\u636e\u8fc7\u53bb\u7684\u968f\u673a\u6570\u5217\u9884\u6d4b\u672a\u6765\u7684\u968f\u673a\u6570\u5217\u201d\u8fd9\u6837\u7684\u6027\u8d28\u3002\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u53ef\u9884\u6d4b\u6027\uff0c\u53ef\u4ee5\u5229\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u7684\u5355\u5411\u6027\u3002","title":"3. \u4f2a\u968f\u673a\u6570\u751f\u6210\u5668"},{"location":"about/#4_3","text":"\u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u53ef\u4ee5\u6784\u9020\u4e00\u6b21\u6027\u53e3\u4ee4\uff08one-time password\uff09\u3002 \u4e00\u6b21\u6027\u53e3\u4ee4\u7ecf\u5e38\u88ab\u7528\u4e8e\u670d\u52a1\u5668\u5bf9\u5ba2\u6237\u7aef\u7684\u5408\u6cd5\u6027\u8ba4\u8bc1\u3002\u5728\u8fd9\u79cd\u65b9\u5f0f\u4e2d\uff0c\u901a\u8fc7\u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u53ef\u4ee5\u4fdd\u8bc1\u53e3\u4ee4\u53ea\u5728\u901a\u4fe1\u94fe\u8def\u4e0a\u4f20\u9001\u4e00\u6b21\uff08one-time\uff09\uff0c\u56e0\u6b64\u5373\u4f7f\u7a83\u542c\u8005\u7a83\u53d6\u4e86\u53e3\u4ee4\uff0c\u4e5f\u65e0\u6cd5\u4f7f\u7528\u3002","title":"4. \u4e00\u6b21\u6027\u53e3\u4ee4"},{"location":"about/#5_1","text":"\u7f51\u7ad9\u6570\u636e\u5e93\u4e2d\uff0c\u5bf9\u5bc6\u7801\u7684\u5b58\u50a8\u5e76\u4e0d\u662f\u5bc6\u7801\u7684\u660e\u6587\uff0c\u800c\u662f\u5bc6\u7801\u7684\u54c8\u5e0c\u503c\uff0c \u6bcf\u6b21\u767b\u5f55\u65f6\uff0c\u4f1a\u5bf9\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\u5904\u7406\uff0c\u7136\u540e\u4e0e\u6570\u636e\u5e93\u5bf9\u6bd4\u3002 \u5373\u4f7f\u6570\u636e\u5e93\u88ab\u76d7\uff0c\u9ed1\u5ba2\u4e5f\u65e0\u6cd5\u62ff\u5230\u7528\u6237\u7684\u5bc6\u7801\uff0c\u4fdd\u8bc1\u7528\u6237\u8d26\u6237\u5b89\u5168","title":"5. \u5bc6\u7801\u5b58\u50a8"},{"location":"about/#6","text":"==\u79c1\u94a5\u5bf9\u6587\u4ef6\u7b7e\u540d\u65f6\uff0c\u5e76\u4e0d\u4f1a\u5bf9\u6587\u4ef6\u672c\u8eab\u505a\u7b7e\u540d\uff0c\u800c\u662f\u5bf9\u8fd9\u4e2a\u6587\u4ef6\u7684\u54c8\u5e0c\u503c\u8fdb\u884c\u7b7e\u540d== \u5728\u8fdb\u884c\u6570\u5b57\u7b7e\u540d\u65f6\u4e5f\u4f1a\u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u3002 \u6570\u5b57\u7b7e\u540d\u662f\u73b0\u5b9e\u793e\u4f1a\u4e2d\u7684\u7b7e\u540d\uff08sign\uff09\u548c\u76d6\u7ae0\u8fd9\u6837\u7684\u884c\u4e3a\u5728\u6570\u5b57\u4e16\u754c\u4e2d\u7684\u5b9e\u73b0\u3002\u6570\u5b57\u7b7e\u540d\u7684\u5904\u7406\u8fc7\u7a0b\u975e\u5e38\u8017\u65f6\uff0c\u56e0\u6b64\u4e00\u822c\u4e0d\u4f1a\u5bf9\u6574\u4e2a\u6d88\u606f\u5185\u5bb9\u76f4\u63a5\u65bd\u52a0\u6570\u5b57\u7b7e\u540d\uff0c\u800c\u662f\u5148\u901a\u8fc7\u5355\u5411\u6563\u5217\u51fd\u6570\u8ba1\u7b97\u51fa\u6d88\u606f\u7684\u6563\u5217\u503c\uff0c\u7136\u540e\u518d\u5bf9\u8fd9\u4e2a\u6563\u5217\u503c\u65bd\u52a0\u6570\u5b57\u7b7e\u540d\u3002","title":"6. \u6570\u5b57\u7b7e\u540d"},{"location":"about/#hash_1","text":"","title":"\u5e38\u7528\u7684Hash\u7b97\u6cd5"},{"location":"about/#1-md4-md5","text":"MD4\u662f\u7531Rivest\u4e8e1990\u5e74\u8bbe\u8ba1\u7684\u5355\u5411\u6563\u5217\u51fd\u6570\uff0c\u80fd\u591f\u4ea7\u751f128\u6bd4\u7279\u7684\u6563\u5217\u503c\uff08RFC1186\uff0c\u4fee\u8ba2\u7248RFC1320\uff09\u3002\u4e0d\u8fc7\uff0c\u968f\u7740Dobbertin\u63d0\u51fa\u5bfb\u627eMD4\u6563\u5217\u78b0\u649e\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u73b0\u5728\u5b83\u5df2\u7ecf\u4e0d\u5b89\u5168\u4e86\u3002 MD5\u662f\u7531Rwest\u4e8e1991\u5e74\u8bbe\u8ba1\u7684\u5355\u9879\u6563\u5217\u51fd\u6570\uff0c\u80fd\u591f\u4ea7\u751f128\u6bd4\u7279\u7684\u6563\u5217\u503c\uff08RFC1321\uff09\u3002 MD5\u7684\u5f3a\u6297\u78b0\u649e\u6027\u5df2\u7ecf\u88ab\u653b\u7834\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u73b0\u5728\u5df2\u7ecf\u80fd\u591f\u4ea7\u751f\u5177\u5907\u76f8\u540c\u6563\u5217\u503c\u7684\u4e24\u6761\u4e0d\u540c\u7684\u6d88\u606f\uff0c\u56e0\u6b64\u5b83\u4e5f\u5df2\u7ecf\u4e0d\u5b89\u5168\u4e86\u3002 MD4\u548cMD5\u4e2d\u7684MD\u662f\u6d88\u606f\u6458\u8981\uff08Message Digest\uff09\u7684\u7f29\u5199\u3002 md5: \u751f\u6210hash\u957f\u5ea6\u7684\u957f\u5ea6\uff1a128\u4f4d(32\u5b57\u8282)\u3002sha256: 256\u4f4d(64\u5b57\u8282)","title":"1. md4, md5"},{"location":"about/#-","text":"//16bytes, 128bit func md5Test1(info []byte) []byte { //\u5bf9\u591a\u91cf\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u8fd0\u7b97 //1. \u521b\u5efa\u4e00\u4e2a\u54c8\u5e0c\u5668 hasher := md5.New() io.WriteString(hasher, \"hello \") io.WriteString(hasher, \"world \") //2. \u6267\u884cSum\u64cd\u4f5c\uff0c\u5f97\u5230\u54c8\u5e0c\u503c //hash := hasher.Sum(nil) //sum(b), \u5982\u679cb\u4e0d\u662fnil\uff0c \u90a3\u4e48\u8fd4\u56de\u7684\u503c\u4e3ab+hash\u503c\uff0c b\u7684ascii\u503c\u540e\u8ffd\u52a0hello world\u7684\u54c8\u5e0c\u503c hash := hasher.Sum([]byte(\"0x\")) return hash }","title":"- \u65b9\u5f0f\u4e00"},{"location":"about/#-_1","text":"package main import ( \"crypto/md5\" \"io\" \"fmt\" ) //\u54c8\u5e0c\u8fd0\u7b97\uff0c\u4f7f\u7528go\u5305\uff0c\u6709\u4e24\u79cd\u8c03\u7528\u65b9\u5f0f //\u65b9\u5f0f\u4e00 //16bytes, 128bit func md5Test1(info []byte) []byte { //\u5bf9\u591a\u91cf\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u8fd0\u7b97 //1. \u521b\u5efa\u4e00\u4e2a\u54c8\u5e0c\u5668 hasher := md5.New() io.WriteString(hasher, \"hello \") io.WriteString(hasher, \"world!\") //2. \u6267\u884cSum\u64cd\u4f5c\uff0c\u5f97\u5230\u54c8\u5e0c\u503c //hash := hasher.Sum(nil) //sum(b), \u5982\u679cb\u4e0d\u662fnil\uff0c \u90a3\u4e48\u8fd4\u56de\u7684\u503c\u4e3ab+hash\u503c hash := hasher.Sum([]byte(\"0x\")) return hash } //\u65b9\u5f0f\u4e8c func md5Test2(info []byte) []byte { hash := md5.Sum(info) //\u5c06\u6570\u7ec4\u8f6c\u6362\u4e3a\u5207\u7247 return hash[:] } func main() { hash := md5Test1(nil) fmt.Printf(\"hash : %x\\n\", hash) fmt.Printf(\"+++++++++++++++\\n\") src := []byte(\"hello world!\") hash2 := md5Test2(src) fmt.Printf(\"hash2 : %x\\n\", hash2) }","title":"- \u65b9\u5f0f\u4e8c"},{"location":"about/#2-sha1-sha2","text":"SHA-1 SHA-224 ==SHA-256== SHA-384 SHA-512 SHA-1\u662f\u7531NIST\uff08NationalInstituteOfStandardsandTechnology\uff0c\u7f8e\u56fd\u56fd\u5bb6\u6807\u51c6\u6280\u672f\u7814\u7a76\u6240\uff09\u8bbe\u8ba1\u7684\u4e00\u79cd\u80fd\u591f\u4ea7\u751f160\u6bd4\u7279\u7684\u6563\u5217\u503c\u7684\u5355\u5411\u6563\u5217\u51fd\u6570\u30021993\u5e74\u88ab\u4f5c\u4e3a\u7f8e\u56fd\u8054\u90a6\u4fe1\u606f\u5904\u7406\u6807\u51c6\u89c4\u683c\uff08FIPS PUB 180\uff09\u53d1\u5e03\u7684\u662fSHA,1995\u5e74\u53d1\u5e03\u7684\u4fee\u8ba2\u7248FIPS PUB 180-1\u79f0\u4e3aSHA-1\u3002 SHA-1\u7684\u6d88\u606f\u957f\u5ea6\u5b58\u5728\u4e0a\u9650\uff0c\u4f46\u8fd9\u4e2a\u503c\u63a5\u8fd1\u4e8e2^64^\u6bd4\u7279\uff0c\u662f\u4e2a\u975e\u5e38\u5de8\u5927\u7684\u6570\u503c\uff0c\u56e0\u6b64\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u6ca1\u6709\u95ee\u9898\u3002 SHA-256\u3001SHA-384\u548cSHA-512\u90fd\u662f\u7531NIST\u8bbe\u8ba1\u7684\u5355\u5411\u6563\u5217\u51fd\u6570\uff0c\u5b83\u4eec\u7684\u6563\u5217\u503c\u957f\u5ea6\u5206\u522b\u4e3a256\u6bd4\u7279\u3001384\u6bd4\u7279\u548c512\u6bd4\u7279\u3002\u8fd9\u4e9b\u5355\u5411\u6563\u5217\u51fd\u6570\u5408\u8d77\u6765\u7edf\u79f0SHA-2\uff0c\u5b83\u4eec\u7684\u6d88\u606f\u957f\u5ea6\u4e5f\u5b58\u5728\u4e0a\u9650\uff08SHA-256\u7684\u4e0a\u9650\u63a5\u8fd1\u4e8e 2^64^ \u6bd4\u7279\uff0cSHA-384 \u548c SHA-512\u7684\u4e0a\u9650\u63a5\u8fd1\u4e8e 2^128^ \u6bd4\u7279\uff09\u3002\u8fd9\u4e9b\u5355\u5411\u6563\u5217\u51fd\u6570\u662f\u4e8e2002\u5e74\u548c SHA-1 \u4e00\u8d77\u4f5c\u4e3a FIPS PUB 180-2\u53d1\u5e03\u7684 SHA-1 \u7684\u5f3a\u6297\u78b0\u649e\u6027\u5df2\u4e8e2005\u5e74\u88ab\u653b\u7834, \u4e5f\u5c31\u662f\u8bf4\uff0c\u73b0\u5728\u5df2\u7ecf\u80fd\u591f\u4ea7\u751f\u5177\u5907\u76f8\u540c\u6563\u5217\u503c\u7684\u4e24\u6761\u4e0d\u540c\u7684\u6d88\u606f\u3002\u4e0d\u8fc7\uff0cSHA-2\u8fd8\u5c1a\u672a\u88ab\u653b\u7834\u3002","title":"2. sha1, sha2"},{"location":"about/#sha1","text":"","title":"sha1"},{"location":"about/#sha2","text":"- SHA-224 - SHA-256 ===> \u6bd4\u7279\u5e01\uff0c \u4ee5\u592a\u574a\uff0c\u90fd\u4f7f\u7528 - SHA-384 - SHA-512 \u6bd4\u7279\u6570 \u5b57\u8282\u6570 MD4 128bit 16byte ==MD5== ==128bit== ==16byte== SHA-1 160bit 20byte SHA-224 224bit 28byte ==SHA-256== ==256bit== ==32byte== SHA-384 384bit 48byte SHA-512 512bit 64byte","title":"sha2: \uff08\u4e00\u7cfb\u5217\u54c8\u5e0c\u7b97\u6cd5\uff0c\u66f4\u53ef\u9760\uff0c\u66f4\u5b89\u5168\uff09"},{"location":"about/#sha256","text":"package main import ( \"os\" \"crypto/sha256\" \"io\" \"fmt\" ) //\u4f7f\u7528\u6253\u5f00\u6587\u4ef6\u65b9\u5f0f\u83b7\u53d6\u54c8\u5e0c const filename = \"\u586b\u5165\u81ea\u5df1\u7684\u6587\u4ef6\" func main() { //1. open \u6587\u4ef6 file, err := os.Open(filename) defer file.Close() if err != nil { panic(err) } //2. \u521b\u5efahash hasher := sha256.New() /* type Hash interface { io.Writer Sum(b []byte) []byte Reset() Size() int BlockSize() int } */ //3. copy\u53e5\u67c4 //func Copy(dst Writer, src Reader) (written int64, err error) { length, err := io.Copy(hasher, file) if err != nil { panic(err) } fmt.Printf(\"length : %d\\n\", length) //4. hash sum\u64cd\u4f5c hash := hasher.Sum(nil) fmt.Printf(\"hash : %x\\n\", hash) } \u8fd0\u884c\u7ed3\u679c","title":"sha256"},{"location":"about/#_45","text":"","title":"\u516d\u3001\u6d88\u606f\u8ba4\u8bc1"},{"location":"about/#_46","text":"","title":"\u4f7f\u7528\u6d88\u606f\u8ba4\u8bc1\u7801\u7684\u539f\u56e0"},{"location":"about/#_47","text":"\u80cc\u666f\uff1a Alice \u5411 Bob\u8bf4\uff0c \u4f60\u597d\uff01 \u5bf9\u79f0\u52a0\u5bc6\uff1apassword A\uff1a\u4f60\u597d =\u300b \u52a0\u5bc6 =\u300b *&*\u2026\u2026*\uff08\u2026\u2026TUGG =====\u300b \u4f20\u8f93 B\uff1a\u5bc6\u6587\uff08 *&*\u2026\u2026*\uff08\u2026\u2026TUGG =====\u300b\uff09 =\u300b \u89e3\u5bc6 =\u300b \u4f60\u597d\uff01\uff01 ++++++++++++++++++++++ \u5047\u5982A\u53d1\u7684\u6d88\u606f\u5c31\u662f\u4e0d\u53ef\u8bfb\uff08&*\u2026\u2026%\uffe5\uffe5\u2026\u2026&*&%\uffe5#@\uff09 \u52a0\u5bc6\uff0c\u89e3\u5bc6 B\u6536\u5230\u5bc6\u6587\u540e\u89e3\u5bc6\uff1a\uff08&*\u2026\u2026%\uffe5\uffe5\u2026\u2026&*&%\uffe5#@\uff09 \u95ee\u9898\uff1aB\u89e3\u51fa\u6765\u7684\u662f\u4e71\u7801\uff0cB\u65e0\u6cd5\u5224\u65ad\u8fd9\u4e2a\u6d88\u606f\u5c31\u662fA\u53d1\u7684\u539f\u6587\uff01\uff01 \u89e3\u51b3\u529e\u6cd5\uff1a\u5f15\u5165\u6d88\u606f\u8ba4\u8bc1\u7801","title":"\u5bf9\u79f0\u52a0\u5bc6\u7684\u95ee\u9898\uff1a"},{"location":"about/#_48","text":"func main() { src := []byte(\"\u4e0d\u662f\u4e00\u756a\u5bd2\u5f7b\u9aa8\uff0c\u54ea\u5f97\u6885\u82b1\u6251\u9f3b\u9999!!! 123456734523452345 \") key := []byte(\"1234567887654321\") cipherData := aesCTREncrypt(src, key) fmt.Printf(\"cipherData : %x\\n\", cipherData) fmt.Printf(\"+++++++++++++++++++++++++\\n\") cipherData = append(cipherData, []byte(\"hello\")...) plainText := aesCTRDecrypt(cipherData, key) fmt.Printf(\"plainText \uff1a %x\\n\", plainText) } ==\u5bc6\u6587\u88ab\u6539\u53d8\uff0c\u4f9d\u7136\u53ef\u4ee5\u89e3\u51fa\u6570\u636e\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u6570\u636e\u662f\u5426\u53ef\u9760== duke ~/go/src/01_\u6388\u8bfe\u4ee3\u7801/05-shenzhen-term3/01-\u5bc6\u7801\u5b66$ go run 02-aes-ctr.go \u660e\u6587\uff1a \u4e0d\u662f\u4e00\u756a\u5bd2\u5f7b\u9aa8\uff0c\u54ea\u5f97\u6885\u82b1\u6251\u9f3b\u9999!!! 123456734523452345 aes block size : 16 cipherData : d8d1cfb975e7c16451a9d7fda95ea6782cc5133d42c19e3f63cb4d82e494889eac4b756e0b427b263a07a527811c16b80f3d49a4240b66fb6ae21afffa114c5e8a17f9fa +++++++++++++++++++++++++ plainText \uff1a e4b88de698afe4b880e795aae5af92e5bdbbe9aaa8efbc8ce593aae5be97e6a285e88ab1e68991e9bcbbe9a699212121203132333435367333435323334353233343509e9364ebf0b","title":"\u6f14\u793a"},{"location":"about/#mac","text":"\u6d88\u606f\u8ba4\u8bc1\u7801\uff08message authentication code\uff09\u662f\u4e00\u79cd\u786e\u8ba4\u5b8c\u6574\u6027\u5e76\u8fdb\u884c\u8ba4\u8bc1\u7684\u6280\u672f\uff0c\u53d6\u4e09\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\uff0c\u7b80\u79f0\u4e3aMAC\u3002 \u4fdd\u8bc1\u6570\u636e\u672a\u88ab\u7be1\u6539 \u5bf9\u53d1\u9001\u8005\u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1 \u53d1\u9001\u8005Alice\u4e0e\u63a5\u6536\u8005Bob\u4e8b\u5148\u5171\u4eab\u5bc6\u94a5\u3002 \u53d1\u9001\u8005Alice\u6839\u636e\u6c47\u6b3e\u8bf7\u6c42\u6d88\u606f\u8ba1\u7b97MAC\u503c\uff08\u4f7f\u7528\u5171\u4eab\u5bc6\u94a5\uff09\u3002 \u53d1\u9001\u8005Alice\u5c06\u6c47\u6b3e\u8bf7\u6c42\u6d88\u606f\u548cMAC\u503c\u4e24\u8005\u53d1\u9001\u7ed9\u63a5\u6536\u8005Bob\u3002 \u63a5\u6536\u8005Bob\u6839\u636e\u63a5\u6536\u5230\u7684\u6c47\u6b3e\u8bf7\u6c42\u6d88\u606f\u8ba1\u7b97MAC\u503c\uff08\u4f7f\u7528\u5171\u4eab\u5bc6\u94a5\uff09\u3002 \u63a5\u6536\u8005Bob\u5c06\u81ea\u5df1\u8ba1\u7b97\u7684MAC\u503c\u4e0e\u4eceAlice\u5904\u6536\u5230\u7684MAC\u503c\u8fdb\u884c\u5bf9\u6bd4\u3002 \u5982\u679c\u4e24\u4e2aMAC\u503c\u4e00\u81f4\uff0c\u5219\u63a5\u6536\u8005Bob\u5c31\u53ef\u4ee5\u65ad\u5b9a\u6c47\u6b3e\u8bf7\u6c42\u7684\u786e\u6765\u81eaAlice\uff08\u8ba4\u8bc1\u6210\u529f\uff09\uff1b\u5982\u679c\u4e0d\u4e00\u81f4\uff0c\u5219\u53ef\u4ee5\u65ad\u5b9a\u6d88\u606f\u4e0d\u662f\u6765\u81eaAlice\uff08\u8ba4\u8bc1\u5931\u8d25\uff09\u3002","title":"\u6d88\u606f\u8ba4\u8bc1\u7801\uff08MAC\uff09"},{"location":"about/#mac_1","text":"","title":"MAC\u4f7f\u7528\u573a\u666f"},{"location":"about/#1-swift","text":"\u73af\u7403\u94f6\u884c\u91d1\u878d\u7535\u4fe1\u534f\u4f1a\uff0c\u662f\u4e00\u4e2a\u7ec4\u7ec7\uff0c\u4e3a\u94f6\u884c\u95f4\u7684\u4ea4\u6613\u62a5\u4ef7\u62a4\u822a\u3002\u94f6\u884c\u95f4\u4ea4\u4e92\u4f7f\u7528\u4e86SWIFT\u8fdb\u884c\u4ea4\u4e92\uff0c\u8fd9\u91cc\u9762\u5bf9\u6d88\u606f\u7684\u5b8c\u6210\u6027\u548c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5c31\u662f\u4f7f\u7528\u4e86\u6d88\u606f\u8ba4\u8bc1\u7801\u3002 \u6700\u521d\u4f7f\u7528\u6d88\u606f\u8ba4\u8bc1\u7801\uff0c\u7531\u4eba\u5de5\u914d\u9001\u79d8\u94a5 \u540e\u6765\u4f7f\u7528\u516c\u94a5","title":"1. SWIFT"},{"location":"about/#2-https_1","text":"ssl/tls\u534f\u8bae\uff0c\u91cc\u9762\u7684\u63e1\u624b\u534f\u8bae\u4f7f\u7528\u4e86\u6d88\u606f\u8ba4\u8bc1\u7801 https = http + ssl/tls(security socket layer)","title":"2. https"},{"location":"about/#3-ipsec","text":"IP\u534f\u8bae\u7684\u589e\u5f3a\u7248\uff0c\u4f7f\u7528\u4e86\u6d88\u606f\u8ba4\u8bc1\u7801","title":"3. IPSec"},{"location":"about/#hmac","text":"","title":"HMAC"},{"location":"about/#1-h","text":"HMAC\u662f\u4e00\u79cd\u4f7f\u7528\u5355\u5411\u6563\u5217\u51fd\u6570\u6765\u6784\u9020\u6d88\u606f\u8ba4\u8bc1\u7801\u7684\u65b9\u6cd5\uff08RFC2104\uff09\uff0c\u5176\u4e2dHMAC\u7684H\u5c31\u662fHash\u7684\u610f\u601d\u3002 HMAC\u4e2d\u6240\u4f7f\u7528\u7684\u5355\u5411\u6563\u5217\u51fd\u6570\u5e76\u4e0d\u4ec5\u9650\u4e8e\u4e00\u79cd\uff0c\u4efb\u4f55\u9ad8\u5f3a\u5ea6\u7684\u5355\u5411\u6563\u5217\u51fd\u6570\u90fd\u53ef\u4ee5\u88ab\u7528\u4e8eHMAC,\u5982\u679c\u5c06\u6765\u8bbe\u8ba1\u51fa\u65b0\u7684\u5355\u5411\u6563\u5217\u51fd\u6570\uff0c\u4e5f\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u3002 \u4f7f\u7528SHA-I\u3001MD5\u3001RIPEMD-160\u6240\u6784\u9020\u7684HMAC\uff0c\u5206\u522b\u79f0\u4e3aHMAC-SHA-1\u3001HMAC-MD5\u548cHMAC-RlPEMD\u3002","title":"1. ==H\u4ee3\u8868\u54c8\u5e0c=="},{"location":"about/#2_9","text":"//\u63a5\u6536\u7aef\u548c\u9a8c\u8bc1\u7aef\u90fd\u8981\u6267\u884c //New\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u91c7\u7528hash.Hash\u4f5c\u4e3a\u5e95\u5c42hash\u63a5\u53e3\u3001key\u4f5c\u4e3a\u5bc6\u94a5\u7684HMAC\u7b97\u6cd5\u7684hash\u63a5\u53e3\u3002 func New(h func() hash.Hash, key []byte) hash.Hash - \u53c2\u65701\uff1a\u81ea\u5df1\u6307\u5b9a\u54c8\u5e0c\u7b97\u6cd5\uff0c \u662f\u4e00\u4e2a\u51fd\u6570 - md5.New - sha1.New - sha256.New - \u53c2\u65702\uff1a\u79d8\u94a5 - \u8fd4\u56de\u503c\uff1a\u54c8\u5e0c\u51fd\u6570\u5bf9\u8c61 //\u4ec5\u5728\u9a8c\u8bc1\u7aef\u6267\u884c //\u6bd4\u8f83\u4e24\u4e2aMAC\u662f\u5426\u76f8\u540c\uff0c\u800c\u4e0d\u4f1a\u6cc4\u9732\u5bf9\u6bd4\u65f6\u95f4\u4fe1\u606f\u3002\uff08\u4ee5\u89c4\u907f\u65f6\u95f4\u4fa7\u4fe1\u9053\u653b\u51fb\uff1a\u6307\u901a\u8fc7\u8ba1\u7b97\u6bd4\u8f83\u65f6\u82b1\u8d39\u7684\u65f6\u95f4\u7684\u957f\u77ed\u6765\u83b7\u53d6\u5bc6\u7801\u7684\u4fe1\u606f\uff0c\u7528\u4e8e\u5bc6\u7801\u7834\u89e3\uff09 func Equal(mac1, mac2 []byte) bool - \u53c2\u65701\uff1a\u81ea\u5df1\u8ba1\u7b97\u7684\u54c8\u5e0c\u503c - \u53c2\u65702\uff1a\u63a5\u6536\u5230\u7684\u54c8\u5e0c\u503c - \u8fd4\u56de\u503c\uff1a\u5bf9\u6bd4\u7ed3\u679c","title":"2. \u4f7f\u7528\u5206\u6790\uff1a"},{"location":"about/#3_6","text":"package main import ( \"crypto/hmac\" \"crypto/sha256\" \"fmt\" ) /* //\u63a5\u6536\u7aef\u548c\u9a8c\u8bc1\u7aef\u90fd\u8981\u6267\u884c //New\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u91c7\u7528hash.Hash\u4f5c\u4e3a\u5e95\u5c42hash\u63a5\u53e3\u3001key\u4f5c\u4e3a\u5bc6\u94a5\u7684HMAC\u7b97\u6cd5\u7684hash\u63a5\u53e3\u3002 func New(h func() hash.Hash, key []byte) hash.Hash - \u53c2\u65701\uff1a\u81ea\u5df1\u6307\u5b9a\u54c8\u5e0c\u7b97\u6cd5\uff0c \u662f\u4e00\u4e2a\u51fd\u6570 - md5.New - sha1.New - sha256.New - \u53c2\u65702\uff1a\u79d8\u94a5 - \u8fd4\u56de\u503c\uff1a\u54c8\u5e0c\u51fd\u6570\u5bf9\u8c61 //\u4ec5\u5728\u9a8c\u8bc1\u7aef\u6267\u884c //\u6bd4\u8f83\u4e24\u4e2aMAC\u662f\u5426\u76f8\u540c\uff0c\u800c\u4e0d\u4f1a\u6cc4\u9732\u5bf9\u6bd4\u65f6\u95f4\u4fe1\u606f\u3002\uff08\u4ee5\u89c4\u907f\u65f6\u95f4\u4fa7\u4fe1\u9053\u653b\u51fb\uff1a\u6307\u901a\u8fc7\u8ba1\u7b97\u6bd4\u8f83\u65f6\u82b1\u8d39\u7684\u65f6\u95f4\u7684\u957f\u77ed\u6765\u83b7\u53d6\u5bc6\u7801\u7684\u4fe1\u606f\uff0c\u7528\u4e8e\u5bc6\u7801\u7834\u89e3\uff09 func Equal(mac1, mac2 []byte) bool - \u53c2\u65701\uff1a\u81ea\u5df1\u8ba1\u7b97\u7684\u54c8\u5e0c\u503c - \u53c2\u65702\uff1a\u63a5\u6536\u5230\u7684\u54c8\u5e0c\u503c - \u8fd4\u56de\u503c\uff1a\u5bf9\u6bd4\u7ed3\u679c */ //\u751f\u6210hmac\uff08\u6d88\u606f\u8ba4\u8bc1\u7801\uff09 func generateHMAC(src []byte, key []byte) []byte { //1. \u521b\u5efa\u54c8\u5e0c\u5668 hasher := hmac.New(sha256.New, key) //2. \u751f\u6210mac\u503c //mac := hasher.Sum(src) hasher.Write(src) mac := hasher.Sum(nil) return mac } //\u8ba4\u8bc1mac func verifyHMAC(src, key, mac1 []byte) bool { //1. \u5bf9\u7aef\u63a5\u6536\u5230\u7684\u6e90\u6570\u636e //2. \u5bf9\u7aef\u63a5\u6536\u5230\u7684mac1 //3. \u5bf9\u7aef\u8ba1\u7b97\u672c\u5730\u7684mac2 mac2 := generateHMAC(src, key) //4. \u5bf9\u6bd4mac1\u4e0emac2 return hmac.Equal(mac1, mac2) } func main() { src := []byte(\"hello world\") key := []byte(\"1234567890\") mac1 := generateHMAC(src, key) fmt.Printf(\"mac1 : %x\\n\", mac1) isEqual := verifyHMAC(src, key, mac1) fmt.Printf(\"isEqual : %v\\n\", isEqual) srcChanged := []byte(\"hello world!!!!!\") isEqual = verifyHMAC(srcChanged, key, mac1) fmt.Printf(\"after changed, isEqual : %v\\n\", isEqual) }","title":"3. \u4ee3\u7801"},{"location":"about/#_49","text":"\u65e0\u6cd5\u6709\u6548\u7684\u914d\u9001\u79d8\u94a5 \u65e0\u6cd5\u8fdb\u884c\u7b2c\u4e09\u65b9\u8bc1\u660e \u65e0\u6cd5\u9632\u6b62\u53d1\u9001\u65b9\u5426\u8ba4 ==\u89e3\u51b3\u529e\u6cd5\uff1a\u975e\u5bf9\u79f0\u52a0\u5bc6\u6570\u5b57\u7b7e\u540d\uff01\uff01==","title":"\u6d88\u606f\u8ba4\u8bc1\u5b58\u5728\u7684\u95ee\u9898"},{"location":"about/#_50","text":"","title":"\u4e03\u3001\u6570\u5b57\u7b7e\u540d"},{"location":"about/#_51","text":"\"\u6570\u5b57\u7b7e\u540d --- \u6d88\u606f\u5230\u5e95\u662f\u8c01\u5199\u7684\" \u79c1\u94a5 \u516c\u94a5 \u975e\u5bf9\u79f0\u52a0\u5bc6 \u63a5\u6536\u8005\u89e3\u5bc6\u65f6\u4f7f\u7528 \u53d1\u9001\u8005\u52a0\u5bc6\u65f6\u4f7f\u7528 \u6570\u5b57\u7b7e\u540d \u7b7e\u540d\u8005\u751f\u6210\u7b7e\u540d\u65f6\u4f7f\u7528 \u9a8c\u8bc1\u8005\u9a8c\u8bc1\u7b7e\u540d\u65f6\u4f7f\u7528 \u8c01\u6301\u6709\u79d8\u94a5\uff1f \u4e2a\u4eba\u6301\u6709 \u53ea\u8981\u9700\u8981\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u6301\u6709 \u516c\u94a5\uff0c\u79c1\u94a5 \u516c\u94a5\uff1a\u52a0\u5bc6 \u79c1\u94a5\uff1a\u6570\u5b57\u7b7e\u540d","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"about/#_52","text":"\u6ce8\u610f\uff1a ==\u7b7e\u540d\u7684\u6570\u636e\u4e0d\u662f\u6570\u636e\u672c\u8eab\uff0c\u800c\u662f\u6570\u636e\u7684\u54c8\u5e0c\u503c== \u6d88\u606f\u8ba4\u8bc1\u95ee\u9898\u7684\u89e3\u51b3 \u65e0\u6cd5\u6709\u6548\u7684\u914d\u9001\u79d8\u94a5 ===\u300b \u6570\u5b57\u7b7e\u540d\u4e2d\uff0c\u4e0d\u9700\u8981\u534f\u5546\u79d8\u94a5\uff0c\u6ca1\u6709\u914d\u9001\u9700\u6c42 \u65e0\u6cd5\u8fdb\u884c\u7b2c\u4e09\u65b9\u8bc1\u660e ===\u300b \u4efb\u4f55\u4eba\u90fd\u6301\u6709\u516c\u94a5\uff0c\u90fd\u53ef\u4ee5\u5e2e\u52a9\u8ba4\u8bc1 \u65e0\u6cd5\u9632\u6b62\u53d1\u9001\u65b9\u5426\u8ba4 ===\u300b \u79c1\u94a5\u53ea\u6709\u53d1\u9001\u65b9\u6301\u6709\uff0c\u65e0\u6cd5\u8fdb\u884c\u62b5\u8d56","title":"\u7b7e\u540d\u8ba4\u8bc1\u6d41\u7a0b"},{"location":"about/#rsa_3","text":"package main import ( \"io/ioutil\" \"encoding/pem\" \"crypto/x509\" \"crypto/sha256\" \"crypto/rsa\" \"crypto/rand\" \"crypto\" \"fmt\" ) /* \u79c1\u94a5\u7b7e\u540d: 1. \u63d0\u4f9b\u79c1\u94a5\u6587\u4ef6\uff0c \u89e3\u6790\u51fa\u79c1\u94a5\u5185\u5bb9\uff08decode, parse....\uff09 2. \u4f7f\u7528\u79c1\u94a5\u8fdb\u884c\u6570\u5b57\u7b7e\u540d \u516c\u94a5\u8ba4\u8bc1 1. \u63d0\u4f9b\u516c\u94a5\u6587\u4ef6\uff0c \u89e3\u6790\u51fa\u516c\u94a5\u5185\u5bb9\uff08decode, parse....\uff09 2. \u4f7f\u7528\u516c\u94a5\u8fdb\u884c\u6570\u5b57\u7b7e\u540d\u8ba4\u8bc1 */ //\u79c1\u94a5\u7b7e\u540d: \u63d0\u4f9b\u79c1\u94a5\uff0c\u7b7e\u540d\u6570\u636e\uff0c\u5f97\u5230\u6570\u5b57\u7b7e\u540d func rsaSignData(filename string, src []byte) ([]byte, error) { //\u4e00\u3001 \u63d0\u4f9b\u79c1\u94a5\u6587\u4ef6\uff0c \u89e3\u6790\u51fa\u79c1\u94a5\u5185\u5bb9\uff08decode, parse....\uff09 //1. \u901a\u8fc7\u79c1\u94a5\u6587\u4ef6\uff0c\u8bfb\u53d6\u79c1\u94a5\u4fe1\u606f ==\u300b pem encode \u7684\u6570\u636e info, err := ioutil.ReadFile(filename) if err != nil { return nil, err } //2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e block, _ := pem.Decode(info) //\u8fd4\u56de\u503c1 \uff1apem.block //\u8fd4\u56de\u503c2\uff1arest\u53c2\u52a0\u662f\u672a\u89e3\u7801\u5b8c\u7684\u6570\u636e\uff0c\u5b58\u50a8\u5728\u8fd9\u91cc //type Block struct { // Type string // \u5f97\u81ea\u524d\u8a00\u7684\u7c7b\u578b\uff08\u5982\"RSA PRIVATE KEY\"\uff09 // Headers map[string]string // \u53ef\u9009\u7684\u5934\u9879 // Bytes []byte // \u5185\u5bb9\u89e3\u7801\u540e\u7684\u6570\u636e\uff0c\u4e00\u822c\u662fDER\u7f16\u7801\u7684ASN.1\u7ed3\u6784 //} //3. \u89e3\u7801der\uff0c\u5f97\u5230\u79c1\u94a5 //derText := block.Bytes derText := block.Bytes privateKey, err := x509.ParsePKCS1PrivateKey(derText) if err != nil { return nil, err } //\u4e8c. \u4f7f\u7528\u79c1\u94a5\u8fdb\u884c\u6570\u5b57\u7b7e\u540d //1. \u83b7\u53d6\u539f\u6587\u7684\u54c8\u5e0c\u503c hash := sha256.Sum256(src) //\u8fd4\u56de\u503c\u662f[32]byte\uff0c \u4e00\u4e2a\u6570\u7ec4 //SignPKCS1v15\u4f7f\u7528RSA PKCS#1 v1.5\u89c4\u5b9a\u7684RSASSA-PKCS1-V1_5-SIGN\u7b7e\u540d\u65b9\u6848\u8ba1\u7b97\u7b7e\u540d //func SignPKCS1v15(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte) (s []byte, err error) //2. \u6267\u884c\u7b7e\u540d\u64cd\u4f5c signature, err := rsa.SignPKCS1v15(rand.Reader, privateKey, crypto.SHA256, hash[:]) if err != nil { return nil, err } return signature, nil } //\u516c\u94a5\u8ba4\u8bc1 func rsaVerifySignature(sig []byte, src []byte, filename string) error { //\u4e00. \u63d0\u4f9b\u516c\u94a5\u6587\u4ef6\uff0c \u89e3\u6790\u51fa\u516c\u94a5\u5185\u5bb9\uff08decode, parse....\uff09 //1. \u901a\u8fc7\u516c\u94a5\u6587\u4ef6\uff0c\u8bfb\u53d6\u516c\u94a5\u4fe1\u606f ==\u300b pem encode \u7684\u6570\u636e info, err := ioutil.ReadFile(filename) if err != nil { return err } //2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e block, _ := pem.Decode(info) //3. \u89e3\u7801der\uff0c\u5f97\u5230\u516c\u94a5 //derText := block.Bytes derText := block.Bytes publicKey, err := x509.ParsePKCS1PublicKey(derText) if err != nil { return err } //\u4e8c. \u4f7f\u7528\u516c\u94a5\u8fdb\u884c\u6570\u5b57\u7b7e\u540d\u8ba4\u8bc1 //1. \u83b7\u53d6\u539f\u6587\u7684\u54c8\u5e0c\u503c hash := sha256.Sum256(src) //\u8fd4\u56de\u503c\u662f[32]byte\uff0c \u4e00\u4e2a\u6570\u7ec4 //VerifyPKCS1v15\u8ba4\u8bc1RSA PKCS#1 v1.5\u7b7e\u540d\u3002hashed\u662f\u4f7f\u7528\u63d0\u4f9b\u7684hash\u53c2\u6570\u5bf9\uff08\u8981\u7b7e\u540d\u7684\uff09\u539f\u59cb\u6570\u636e\u8fdb\u884chash\u7684\u7ed3\u679c\u3002\u5408\u6cd5\u7684\u7b7e\u540d\u4f1a\u8fd4\u56denil\uff0c\u5426\u5219\u8868\u793a\u7b7e\u540d\u4e0d\u5408\u6cd5\u3002 //func VerifyPKCS1v15(pub *PublicKey, hash crypto.Hash, hashed []byte, sig []byte) error { err = rsa.VerifyPKCS1v15(publicKey, crypto.SHA256, hash[:], sig) return err } func main() { src := []byte(\"hello world!!!!\") signature, err := rsaSignData(PrivateKeyFile, src) if err != nil { fmt.Printf(\"\u7b7e\u540d\u5931\u8d25!, err: %s\\n\", err) } fmt.Printf(\"signature \uff1a %x\\n\", signature) //fmt.Printf(\"signature \uff1a %s\\n\", signature) fmt.Printf(\"++++++++++\\n\") src1 := []byte(\"hello world!!!!=======\") err = rsaVerifySignature(signature, src1, PublicKeyFile) if err != nil { fmt.Printf(\"\u7b7e\u540d\u6821\u9a8c\u5931\u8d25!, err: %s\\n\", err) return } fmt.Printf(\"\u7b7e\u540d\u6821\u9a8c\u6210\u529f!\\n\") }","title":"RSA\u6570\u5b57\u7b7e\u540d\u4e0e\u8ba4\u8bc1"},{"location":"about/#_53","text":"\u6982\u5ff5 \u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u5b66\uff08\u82f1\u8bed\uff1aElliptic curve cryptography\uff0c\u7f29\u5199\u4e3a ECC\uff09\uff0c\u4e00\u79cd\u5efa\u7acb\u516c\u5f00\u5bc6\u94a5\u52a0\u5bc6\u7684\u7b97\u6cd5\uff0c\u57fa\u4e8e\u692d\u5706\u66f2\u7ebf\u6570\u5b66\u3002\u692d\u5706\u66f2\u7ebf\u5728\u5bc6\u7801\u5b66\u4e2d\u7684\u4f7f\u7528\u662f\u57281985\u5e74\u7531Neal Koblitz\u548cVictor Miller\u5206\u522b\u72ec\u7acb\u63d0\u51fa\u7684\u3002 ECC\u7684\u4e3b\u8981\u4f18\u52bf\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5b83\u6bd4\u5176\u4ed6\u7684\u65b9\u6cd5\u4f7f\u7528\u66f4\u5c0f\u7684\u5bc6\u94a5\u2014\u2014\u6bd4\u5982RSA\u52a0\u5bc6\u7b97\u6cd5\u2014\u2014\u63d0\u4f9b\u76f8\u5f53\u7684\u6216\u66f4\u9ad8\u7b49\u7ea7\u7684\u5b89\u5168\u3002 \u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u5b66\u7684\u8bb8\u591a\u5f62\u5f0f\u6709\u7a0d\u5fae\u7684\u4e0d\u540c\uff0c\u6240\u6709\u7684\u90fd\u4f9d\u8d56\u4e8e\u88ab\u5e7f\u6cdb\u627f\u8ba4\u7684\u89e3\u51b3\u692d\u5706\u66f2\u7ebf\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\u4e0a\u3002\u4e0e\u4f20\u7edf\u7684\u57fa\u4e8e\u5927\u8d28\u6570\u56e0\u5b50\u5206\u89e3\u56f0\u96be\u6027\u7684\u52a0\u5bc6\u65b9\u6cd5\u4e0d\u540c\uff0cECC\u901a\u8fc7\u692d\u5706\u66f2\u7ebf\u65b9\u7a0b\u5f0f\u7684\u6027\u8d28\u4ea7\u751f\u5bc6\u94a5\u3002 ECC 164\u4f4d\u7684\u5bc6\u94a5\u4ea7\u751f\u7684\u4e00\u4e2a\u5b89\u5168\u7ea7\u76f8\u5f53\u4e8eRSA 1024\u4f4d\u5bc6\u94a5\u63d0\u4f9b\u7684\u4fdd\u5bc6\u5f3a\u5ea6\uff0c\u800c\u4e14\u8ba1\u7b97\u91cf\u8f83\u5c0f\uff0c\u5904\u7406\u901f\u5ea6\u66f4\u5feb\uff0c\u5b58\u50a8\u7a7a\u95f4\u548c\u4f20\u8f93\u5e26\u5bbd\u5360\u7528\u8f83\u5c11\u3002==\u76ee\u524d\u6211\u56fd\u5c45\u6c11\u4e8c\u4ee3\u8eab\u4efd\u8bc1\u6b63\u5728\u4f7f\u7528 256 \u4f4d\u7684\u692d\u5706\u66f2\u7ebf\u5bc6\u7801\uff0c\u865a\u62df\u8d27\u5e01 \u6bd4\u7279\u5e01 \u4e5f\u9009\u62e9ECC\u4f5c\u4e3a\u52a0\u5bc6\u7b97\u6cd5\u3002==","title":"\u692d\u5706\u66f2\u7ebf\u4ecb\u7ecd"},{"location":"about/#_54","text":"// PublicKey represents an ECDSA public key. type PublicKey struct { elliptic.Curve X, Y *big.Int } // PrivateKey represents an ECDSA private key. type PrivateKey struct { PublicKey D *big.Int } \u6ce8\u610f\u70b9\uff1a //1. - \u9009\u62e9\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\uff08\u5728elliptic\u5305\uff09//rsa\u9700\u8981\u4f20\u5165\u79d8\u94a5\u4f4d\u6570 //type Curve //func P224() Curve //func P256() Curve //func P384() Curve //func P521() Curve //2.\u79c1\u94a5\u7f16\u7801\u7684\u51fd\u6570 derText, err := x509.MarshalECPrivateKey(privateKey) //3. \u516c\u94a5\u7f16\u7801\u51fd\u6570\uff0c \u4e00\u5b9a\u8981\u4f20\u9012\u5730\u5740\uff0c\u5426\u5219\u51fa\u9519 derText2, err := x509.MarshalPKIXPublicKey(&publicKey) package main import ( \"crypto/elliptic\" \"crypto/ecdsa\" \"crypto/rand\" \"crypto/x509\" \"encoding/pem\" \"os\" \"fmt\" ) //\u751f\u6210\u79c1\u94a5\u516c\u94a5 func generateEccKeypair() { //- \u9009\u62e9\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\uff08\u5728elliptic\u5305\uff09 //type Curve //func P224() Curve //func P256() Curve //func P384() Curve //func P521() Curve curve := elliptic.P521() //- \u4f7f\u7528ecdsa\u5305\uff0c\u521b\u5efa\u79c1\u94a5 //ecdsa\u692d\u5706\u66f2\u7ebf\u6570\u5b57\u7b7e\u540d //GenerateKey\u51fd\u6570\u751f\u6210\u79d8\u94a5\u5bf9 //func GenerateKey(c elliptic.Curve, rand io.Reader) (priv *PrivateKey, err error) privateKey, err := ecdsa.GenerateKey(curve, rand.Reader) checkErr(\"generate key failed!\", err) //- \u4f7f\u7528x509\u8fdb\u884c\u7f16\u7801 //MarshalECPrivateKey\u5c06ecdsa\u79c1\u94a5\u5e8f\u5217\u5316\u4e3aASN.1 DER\u7f16\u7801\u3002 //func MarshalECPrivateKey(key *ecdsa.PrivateKey) ([]byte, error) derText, err := x509.MarshalECPrivateKey(privateKey) checkErr(\"MarshalECPrivateKey\", err) //- \u5199\u5165pem.Block\u4e2d block1 := pem.Block{ Type: \"ECC PRIVATE KEY\", Headers: nil, Bytes: derText, } //- pem.Encode fileHander, err := os.Create(EccPrivateKeyFile) checkErr(\"os.Create Failed\", err) defer fileHander.Close() err = pem.Encode(fileHander, &block1) checkErr(\"pem Encode failed\", err) fmt.Printf(\"++++++++++++++++++++++\\n\") //\u83b7\u53d6\u516c\u94a5 publicKey := privateKey.PublicKey //- \u4f7f\u7528x509\u8fdb\u884c\u7f16\u7801 //\u901a\u7528\u7684\u5e8f\u5217\u5316\u65b9\u5f0f //derText2, err := x509.MarshalPKIXPublicKey(publicKey) derText2, err := x509.MarshalPKIXPublicKey(&publicKey) //\u4f20\u9012\u5730\u5740 checkErr(\"MarshalPKIXPublicKey\", err) //- \u5199\u5165pem.Block\u4e2d block2 := pem.Block{ Type: \"ECC PUBLICK KEY\", Headers: nil, Bytes: derText2, } //- pem.Encode fileHander2, err := os.Create(EccPublicKeyFile) checkErr(\"public key os.Create Failed\", err) defer fileHander2.Close() err = pem.Encode(fileHander2, &block2) checkErr(\"public key pem Encode failed\", err) } func main() { generateEccKeypair() } ==Golang\uff0c\u4e0d\u652f\u6301\u52a0\u89e3\u5bc6\uff0c\u652f\u6301ECC\u7b7e\u540d==","title":"\u751f\u6210\u79c1\u94a5\u516c\u94a5"},{"location":"about/#_55","text":"package main import ( \"io/ioutil\" \"encoding/pem\" \"crypto/x509\" \"crypto/sha256\" \"crypto/ecdsa\" \"crypto/rand\" \"math/big\" \"fmt\" ) //\u81ea\u5df1\u5b9a\u4e49\u7684\u7b7e\u540d\u7ed3\u6784 type Signature struct { r *big.Int s *big.Int } //\u4f7f\u7528\u79c1\u94a5\u7b7e\u540d func eccSignData(filename string, src []byte) (Signature, error) { //1. \u8bfb\u53d6\u79c1\u94a5\uff0c\u89e3\u7801 info, err := ioutil.ReadFile(filename) if err != nil { return Signature{}, err } //2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e block, _ := pem.Decode(info) //\u8fd4\u56de\u503c1 \uff1apem.block //\u8fd4\u56de\u503c2\uff1arest\u53c2\u52a0\u662f\u672a\u89e3\u7801\u5b8c\u7684\u6570\u636e\uff0c\u5b58\u50a8\u5728\u8fd9\u91cc //3. \u89e3\u7801der\uff0c\u5f97\u5230\u79c1\u94a5 //derText := block.Bytes derText := block.Bytes privateKey, err := x509.ParseECPrivateKey(derText) if err != nil { return Signature{}, err } //2. \u5bf9\u539f\u6587\u751f\u6210\u54c8\u5e0c hash /*[32]byte*/ := sha256.Sum256(src) //3. \u4f7f\u7528\u79c1\u94a5\u7b7e\u540d //\u4f7f\u7528\u79c1\u94a5\u5bf9\u4efb\u610f\u957f\u5ea6\u7684hash\u503c\uff08\u5fc5\u987b\u662f\u8f83\u5927\u4fe1\u606f\u7684hash\u7ed3\u679c\uff09\u8fdb\u884c\u7b7e\u540d\uff0c\u8fd4\u56de\u7b7e\u540d\u7ed3\u679c\uff08\u4e00\u5bf9\u5927\u6574\u6570\uff09\u3002\u79c1\u94a5\u7684\u5b89\u5168\u6027\u53d6\u51b3\u4e8e\u5bc6\u7801\u8bfb\u53d6\u5668 //func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err error) r, s, err := ecdsa.Sign(rand.Reader, privateKey, hash[:]) if err != nil { return Signature{}, err } sig := Signature{r, s} return sig, nil } //\u4f7f\u7528\u516c\u94a5\u6821\u9a8c func eccVerifySig(filename string, src []byte, sig []byte) bool { //1. \u8bfb\u53d6\u516c\u94a5\uff0c\u89e3\u7801 //2. \u5bf9\u539f\u6587\u751f\u6210\u54c8\u5e0c //3. \u4f7f\u7528\u516c\u94a5\u9a8c\u8bc1 //TODO return true } func main() { src := []byte(\"Golang\uff0c\u4e0d\u652f\u6301\u52a0\u89e3\u5bc6\uff0c\u652f\u6301ECC\u7b7e\u540d\") sig, err := eccSignData(EccPrivateKeyFile, src) if err != nil { fmt.Printf(\"err : %s\\n\", err) } fmt.Printf(\"signature : %s\\n\", sig) fmt.Printf(\"signature hex : %x\\n\", sig) }","title":"\u79c1\u94a5\u7b7e\u540d"},{"location":"about/#_56","text":"//\u4f7f\u7528\u516c\u94a5\u6821\u9a8c func eccVerifySig(filename string, src []byte, sig Signature) error { //1. \u8bfb\u53d6\u516c\u94a5\uff0c\u89e3\u7801 info, err := ioutil.ReadFile(filename) if err != nil { return err } //2. pem decode\uff0c \u5f97\u5230block\u4e2d\u7684der\u7f16\u7801\u6570\u636e block, _ := pem.Decode(info) //3. \u89e3\u7801der\uff0c\u5f97\u5230\u516c\u94a5 //derText := block.Bytes derText := block.Bytes //publicKey, err := x509.ParsePKCS1PublicKey(derText) publicKeyInterface, err := x509.ParsePKIXPublicKey(derText) if err != nil { return err } publicKey, ok := publicKeyInterface.(*ecdsa.PublicKey) if !ok { return errors.New(\"\u65ad\u8a00\u5931\u8d25\uff0c\u975eecds\u516c\u94a5!\\n\") } //2. \u5bf9\u539f\u6587\u751f\u6210\u54c8\u5e0c hash := sha256.Sum256(src) //3. \u4f7f\u7528\u516c\u94a5\u9a8c\u8bc1 //\u4f7f\u7528\u516c\u94a5\u9a8c\u8bc1hash\u503c\u548c\u4e24\u4e2a\u5927\u6574\u6570r\u3001s\u6784\u6210\u7684\u7b7e\u540d\uff0c\u5e76\u8fd4\u56de\u7b7e\u540d\u662f\u5426\u5408\u6cd5\u3002 //func Verify(pub *PublicKey, hash []byte, r, s *big.Int) bool isValid := ecdsa.Verify(publicKey, hash[:], sig.r, sig.s) if !isValid { return errors.New(\"\u6821\u9a8c\u5931\u8d25!\") } return nil } main.go func main() { src := []byte(\"Golang\uff0c\u4e0d\u652f\u6301\u52a0\u89e3\u5bc6\uff0c\u652f\u6301ECC\u7b7e\u540d\") sig, err := eccSignData(EccPrivateKeyFile, src) if err != nil { fmt.Printf(\"err : %s\\n\", err) } fmt.Printf(\"signature : %s\\n\", sig) fmt.Printf(\"signature hex : %x\\n\", sig) fmt.Printf(\"++++++++++++++++++=\\n\") src1 := []byte(\"Golang\uff0c\u4e0d\u652f\u6301\u52a0\u89e3\u5bc6\uff0c\u652f\u6301ECC\u7b7e\u540d!!!!!!!!!!!\") err = eccVerifySig(EccPublicKeyFile, src1, sig) if err != nil { fmt.Println(err) return } fmt.Printf(\"\u7b7e\u540d\u6821\u9a8c\u6210\u529f!\\n\") }","title":"\u516c\u94a5\u9a8c\u8bc1"},{"location":"about/#bigint","text":"bytes() setBytes() setString() Lsh()\u5de6\u79fb Rsh\uff08\uff09\u53f3\u79fb Cmp\uff08\uff09\u5bf9\u6bd4 package main import ( \"math/big\" \"fmt\" ) func main() { var b1 big.Int var b2 big.Int var b3 big.Int var b4 big.Int b1.SetString(\"10000\", 10) b2.SetString(\"20000\", 10) fmt.Printf(\"b2 bytes : %v\\n\", b2.Bytes()) b4.Add(&b1, &b2) fmt.Printf(\"b4 : %d\\n\", b4.Int64()) s1 := []byte(\"4000\") b3.SetBytes(s1) b3.Add(&b1, &b2) fmt.Printf(\"b3 : %v\\n\", b3) fmt.Printf(\"b3 : %v\\n\", b3.Int64()) }","title":"bigint\u4ecb\u7ecd"},{"location":"about/#rsbytes","text":"r,s \u90fd\u662fbig.int\u7c7b\u578b\uff0c\u5b83\u4eec\u7684\u957f\u5ea6\u76f8\u540c \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7bigint\u7684bytes\uff08\uff09\u65b9\u6cd5\uff0c\u5c06r\uff0cs\u7684\u5b57\u8282\u6d41\u62fc\u63a5\u5230\u4e00\u8d77\uff0c\u6574\u4f53\u8fd4\u56de \u5728\u9a8c\u8bc1\u7aef\uff0c\u5c06bytes\u4ece\u4e2d\u95f4\u4e00\u5206\u4e3a\u4e8c\uff0c\u5f97\u5230\u4e24\u6bb5bytes \u901a\u8fc7bigint setBytes\u65b9\u6cd5\u5c06r,s \u8fd8\u539f","title":"\u5c06r,s\u62fc\u63a5\u6210bytes\u8fd4\u56de"},{"location":"about/#_57","text":"","title":"\u6570\u5b57\u7b7e\u540d\u5b58\u5728\u7684\u95ee\u9898"},{"location":"about/#ca","text":"","title":"\u89e3\u51b3\u65b9\u6cd5\uff1a\u5f15\u5165CA\u673a\u6784"},{"location":"about/#_58","text":"","title":"\u6d4f\u89c8\u5668\u8bc1\u4e66"},{"location":"about/#_59","text":"","title":"\u516b\u3001\u8bc1\u4e66\u4f7f\u7528"},{"location":"about/#_60","text":"\u6240\u6709\u7684\u7f51\u7ad9\u90fd\u8f6c\u6210https\uff0c https = http + ssl ssl : Secure Socket Layer\uff0c \u662f\u4e00\u4e2a\u901a\u8baf\u534f\u8bae\uff0c\u5728\u901a\u8baf\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u7528\u4e86\u6570\u5b57\u8bc1\u4e66","title":"\u8bc1\u4e66\u4f7f\u7528"},{"location":"about/#https","text":"\u6240\u6709\u7684\u901a\u4fe1\u4e0d\u518d\u4f20\u8f93\u516c\u94a5\uff0c\u800c\u662f\u4f20\u8f93\u6570\u5b57\u8bc1\u4e66\u3002 \u8bc1\u4e66\u91cc\u9762\u5305\u542b\u4e86\u516c\u94a5\uff0c\u53ef\u4ee5\u7531CA\u673a\u6784\u8ba4\u8bc1\u3002 1. \u7f51\u7ad9\u63d0\u4f9b\u8005\u4f1a\u81ea\u5df1\u751f\u6210\u516c\u94a5\u79c1\u94a5\u3002 - \u4e5f\u53ef\u4ee5\u4e0d\u81ea\u5df1\u751f\u6210\uff0c\u5168\u90e8\u7531CA\u5e2e\u52a9\u751f\u6210 2. \u670d\u52a1\u5668\u63d0\u4f9b\u8005\u5c06\u516c\u94a5\u53d1\u9001\u7ed9\u9009\u62e9\u7684CA\u673a\u6784 3. CA\u673a\u6784\u4e5f\u6709\u81ea\u5df1\u7684\u79c1\u94a5\u516c\u94a5\u3002CA\u4f7f\u7528\u81ea\u5df1\u7684\u79c1\u94a5\u5bf9\u670d\u52a1\u5668\u7684\u516c\u94a5\u8fdb\u884c\u7b7e\u540d - \u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u8f85\u52a9\u4fe1\u606f\uff08\u53d1\u884c\u673a\u6784\uff0c\u4e3b\u9898\uff0c\u6307\u7eb9\uff09 - \u516c\u94a5 - \u7b7e\u540d CA\u5411\u670d\u52a1\u5668\u9881\u53d1\u4e00\u4e2a\u6570\u5b57\u8bc1\u4e66 4. \u5f53\u7528\u6237\u8bbf\u95ee\u670d\u52a1\u5668\u7684\u65f6\u5019\uff0c\u670d\u52a1\u5668\u4f1a\u5c06CA\u8bc1\u4e66\u53d1\u9001\u7ed9\u5ba2\u6237 5. \u5728\u5ba2\u6237\u7684\u6d4f\u89c8\u5668\u4e2d\uff0c\u5df2\u7ecf\u968f\u7740\u64cd\u4f5c\u7cfb\u7edf\u9884\u88c5\u4e86\u77e5\u540dCA\u673a\u6784\u7684\u6839\u8bc1\u4e66\uff0c\u8fd9\u91cc\u9762\u5305\u542b\u4e86CA\u673a\u6784\u7684\u516c\u94a5\uff0c\u6d4f\u89c8\u5668\u5c31\u4f1a\u5bf9\u670d\u52a1\u5668\u7684\u8bc1\u4e66\u8fdb\u884c\u9a8c\u8bc1 6. \u5982\u679c\u9a8c\u8bc1\u6210\u529f\uff0c\u8bf4\u660e\u670d\u52a1\u5668\u53ef\u9760\uff0c\u53ef\u4ee5\u6b63\u5e38\u901a\u4fe1\uff08\u5c0f\u9501\u5934\uff09 7. \u5982\u679c\u9a8c\u8bc1\u5931\u8d25\uff0c\u663e\u793a\uff08Not Secure\uff09\uff0c \u63d0\u793aWarning 8. \u8bc1\u4e66\u6709\u6548\u65f6\uff0c \u6d4f\u89c8\u5668\u4f1a\u5c06\u81ea\u5df1\u652f\u6301\u7684\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\uff08des, 3des, aes\uff09\u53d1\u9001\u7ed9\u670d\u52a1\u5668\uff0c \u751f\u6210\u968f\u673a\u79d8\u94a5\uff08\u5bf9\u79f0\uff09\uff0c\u4f7f\u7528\u670d\u52a1\u5668\u7684\u516c\u94a5\uff0c\u5bf9\u4e0a\u8ff0\u4fe1\u606f\u52a0\u5bc6\u3002\u53d1\u9001\u7ed9\u670d\u52a1\u5668 9. \u670d\u52a1\u5668\u9009\u62e9\u4e00\u4e2a\u52a0\u5bc6\u7b97\u6cd5\uff0c\u4f7f\u7528\u5bf9\u79f0\u79d8\u94a5\u52a0\u5bc6\u6d88\u606f\uff0c\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef 10. \u53cc\u65b9\u8fbe\u6210\u4e00\u81f4\uff0c\u63a5\u4e0b\u6765\u901a\u4fe1\u8f6c\u6362\u4e3a\u5bf9\u79f0\u52a0\u5bc6","title":"https\u901a\u4fe1\u8be6\u60c5"},{"location":"about/#windows","text":"#\u6253\u5f00\u8bc1\u4e66\u7ba1\u7406\u5668 Win + R certmgr.msc \u5bfc\u51fader\u683c\u5f0f\u6570\u5b57\u8bc1\u4e66 \u4f7f\u7528openssl\u547d\u4ee4\u67e5\u770b\u8bc1\u4e66\u4fe1\u606f openssl x509 -in <\u8bc1\u4e66\u540d\u5b57.crt> -inform der -text //-pubkey //-noout \u8bc1\u4e66\u8be6\u60c5\uff1a duke ~/Desktop$ openssl x509 -in GlobalSignTest.cer -inform der -text -pubkey Certificate: Data: Version: 3 (0x2) Serial Number: 04:00:00:00:00:01:21:58:53:08:a2 Signature Algorithm: sha256WithRSAEncryption Issuer: OU=GlobalSign Root CA - R3, O=GlobalSign, CN=GlobalSign Validity Not Before: Mar 18 10:00:00 2009 GMT Not After : Mar 18 10:00:00 2029 GMT Subject: OU=GlobalSign Root CA - R3, O=GlobalSign, CN=GlobalSign Subject Public Key Info: Public Key Algorithm: rsaEncryption Public-Key: (2048 bit) Modulus: 00:cc:25:76:90:79:06:78:22:16:f5:c0:83:b6:84: ca:28:9e:fd:05:76:11:c5:ad:88:72:fc:46:02:43: c7:b2:8a:9d:04:5f:24:cb:2e:4b:e1:60:82:46:e1: 52:ab:0c:81:47:70:6c:dd:64:d1:eb:f5:2c:a3:0f: 82:3d:0c:2b:ae:97:d7:b6:14:86:10:79:bb:3b:13: 80:77:8c:08:e1:49:d2:6a:62:2f:1f:5e:fa:96:68: df:89:27:95:38:9f:06:d7:3e:c9:cb:26:59:0d:73: de:b0:c8:e9:26:0e:83:15:c6:ef:5b:8b:d2:04:60: ca:49:a6:28:f6:69:3b:f6:cb:c8:28:91:e5:9d:8a: 61:57:37:ac:74:14:dc:74:e0:3a:ee:72:2f:2e:9c: fb:d0:bb:bf:f5:3d:00:e1:06:33:e8:82:2b:ae:53: a6:3a:16:73:8c:dd:41:0e:20:3a:c0:b4:a7:a1:e9: b2:4f:90:2e:32:60:e9:57:cb:b9:04:92:68:68:e5: 38:26:60:75:b2:9f:77:ff:91:14:ef:ae:20:49:fc: ad:40:15:48:d1:02:31:61:19:5e:b8:97:ef:ad:77: b7:64:9a:7a:bf:5f:c1:13:ef:9b:62:fb:0d:6c:e0: 54:69:16:a9:03:da:6e:e9:83:93:71:76:c6:69:85: 82:17 Exponent: 65537 (0x10001) X509v3 extensions: X509v3 Key Usage: critical Certificate Sign, CRL Sign X509v3 Basic Constraints: critical CA:TRUE X509v3 Subject Key Identifier: 8F:F0:4B:7F:A8:2E:45:24:AE:4D:50:FA:63:9A:8B:DE:E2:DD:1B:BC Signature Algorithm: sha256WithRSAEncryption 4b:40:db:c0:50:aa:fe:c8:0c:ef:f7:96:54:45:49:bb:96:00: 09:41:ac:b3:13:86:86:28:07:33:ca:6b:e6:74:b9:ba:00:2d: ae:a4:0a:d3:f5:f1:f1:0f:8a:bf:73:67:4a:83:c7:44:7b:78: e0:af:6e:6c:6f:03:29:8e:33:39:45:c3:8e:e4:b9:57:6c:aa: fc:12:96:ec:53:c6:2d:e4:24:6c:b9:94:63:fb:dc:53:68:67: 56:3e:83:b8:cf:35:21:c3:c9:68:fe:ce:da:c2:53:aa:cc:90: 8a:e9:f0:5d:46:8c:95:dd:7a:58:28:1a:2f:1d:de:cd:00:37: 41:8f:ed:44:6d:d7:53:28:97:7e:f3:67:04:1e:15:d7:8a:96: b4:d3:de:4c:27:a4:4c:1b:73:73:76:f4:17:99:c2:1f:7a:0e: e3:2d:08:ad:0a:1c:2c:ff:3c:ab:55:0e:0f:91:7e:36:eb:c3: 57:49:be:e1:2e:2d:7c:60:8b:c3:41:51:13:23:9d:ce:f7:32: 6b:94:01:a8:99:e7:2c:33:1f:3a:3b:25:d2:86:40:ce:3b:2c: 86:78:c9:61:2f:14:ba:ee:db:55:6f:df:84:ee:05:09:4d:bd: 28:d8:72:ce:d3:62:50:65:1e:eb:92:97:83:31:d9:b3:b5:ca: 47:58:3f:5f -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzCV2kHkGeCIW9cCDtoTK KJ79BXYRxa2IcvxGAkPHsoqdBF8kyy5L4WCCRuFSqwyBR3Bs3WTR6/Usow+CPQwr rpfXthSGEHm7OxOAd4wI4UnSamIvH176lmjfiSeVOJ8G1z7JyyZZDXPesMjpJg6D FcbvW4vSBGDKSaYo9mk79svIKJHlnYphVzesdBTcdOA67nIvLpz70Lu/9T0A4QYz 6IIrrlOmOhZzjN1BDiA6wLSnoemyT5AuMmDpV8u5BJJoaOU4JmB1sp93/5EU764g SfytQBVI0QIxYRleuJfvrXe3ZJp6v1/BE++bYvsNbOBUaRapA9pu6YOTcXbGaYWC FwIDAQAB -----END PUBLIC KEY----- -----BEGIN CERTIFICATE----- MIIDXzCCAkegAwIBAgILBAAAAAABIVhTCKIwDQYJKoZIhvcNAQELBQAwTDEgMB4G A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjMxEzARBgNVBAoTCkdsb2JhbFNp Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDkwMzE4MTAwMDAwWhcNMjkwMzE4 MTAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEG A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI hvcNAQEBBQADggEPADCCAQoCggEBAMwldpB5BngiFvXAg7aEyiie/QV2EcWtiHL8 RgJDx7KKnQRfJMsuS+FggkbhUqsMgUdwbN1k0ev1LKMPgj0MK66X17YUhhB5uzsT gHeMCOFJ0mpiLx9e+pZo34knlTifBtc+ycsmWQ1z3rDI6SYOgxXG71uL0gRgykmm KPZpO/bLyCiR5Z2KYVc3rHQU3HTgOu5yLy6c+9C7v/U9AOEGM+iCK65TpjoWc4zd QQ4gOsC0p6Hpsk+QLjJg6VfLuQSSaGjlOCZgdbKfd/+RFO+uIEn8rUAVSNECMWEZ XriX7613t2Saer9fwRPvm2L7DWzgVGkWqQPabumDk3F2xmmFghcCAwEAAaNCMEAw DgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFI/wS3+o LkUkrk1Q+mOai97i3Ru8MA0GCSqGSIb3DQEBCwUAA4IBAQBLQNvAUKr+yAzv95ZU RUm7lgAJQayzE4aGKAczymvmdLm6AC2upArT9fHxD4q/c2dKg8dEe3jgr25sbwMp jjM5RcOO5LlXbKr8EpbsU8Yt5CRsuZRj+9xTaGdWPoO4zzUhw8lo/s7awlOqzJCK 6fBdRoyV3XpYKBovHd7NADdBj+1EbddTKJd+82cEHhXXipa0095MJ6RMG3NzdvQX mcIfeg7jLQitChws/zyrVQ4PkX4268NXSb7hLi18YIvDQVETI53O9zJrlAGomecs Mx86OyXShkDOOyyGeMlhLxS67ttVb9+E7gUJTb0o2HLO02JQZR7rkpeDMdmztcpH WD9f -----END CERTIFICATE-----","title":"windows\u4e0b\u67e5\u770b\u6570\u5b57\u8bc1\u4e66"},{"location":"about/#_61","text":"\u8bc1\u4e66\u76f4\u63a5\u662f\u53ef\u4ee5\u6709\u4fe1\u4efb\u5173\u7cfb\u7684, \u901a\u8fc7\u4e00\u4e2a\u8bc1\u4e66\u53ef\u4ee5\u8bc1\u660e\u53e6\u4e00\u4e2a\u8bc1\u4e66\u4e5f\u662f\u771f\u5b9e\u53ef\u4fe1\u7684. \u5b9e\u9645\u4e0a\uff0c\u8bc1\u4e66\u4e4b\u95f4\u7684\u4fe1\u4efb\u5173\u7cfb\uff0c\u662f\u53ef\u4ee5\u5d4c\u5957\u7684\u3002\u6bd4\u5982\uff0cC \u4fe1\u4efb A1\uff0cA1 \u4fe1\u4efb A2\uff0cA2 \u4fe1\u4efb A3......\u8fd9\u4e2a\u53eb\u505a\u8bc1\u4e66\u7684\u4fe1\u4efb\u94fe\u3002\u53ea\u8981\u4f60\u4fe1\u4efb\u94fe\u4e0a\u7684\u5934\u4e00\u4e2a\u8bc1\u4e66\uff0c\u90a3\u540e\u7eed\u7684\u8bc1\u4e66\uff0c\u90fd\u662f\u53ef\u4ee5\u4fe1\u4efb\u6ef4\u3002 \u5047\u8bbe C \u8bc1\u4e66\u4fe1\u4efb A \u548c B\uff1b\u7136\u540e A \u4fe1\u4efb A1 \u548c A2\uff1bB \u4fe1\u4efb B1 \u548c B2\u3002\u5219\u5b83\u4eec\u4e4b\u95f4\uff0c\u6784\u6210\u5982\u4e0b\u7684\u4e00\u4e2a\u6811\u5f62\u5173\u7cfb\uff08\u4e00\u4e2a\u5012\u7acb\u7684\u6811\uff09\u3002 \u5904\u4e8e\u6700\u9876\u4e0a\u7684\u6811\u6839\u4f4d\u7f6e\u7684\u90a3\u4e2a\u8bc1\u4e66\uff0c\u5c31\u662f\u201c \u6839\u8bc1\u4e66 \u201d\u3002\u9664\u4e86\u6839\u8bc1\u4e66\uff0c\u5176\u5b83\u8bc1\u4e66\u90fd\u8981\u4f9d\u9760\u4e0a\u4e00\u7ea7\u7684\u8bc1\u4e66\uff0c\u6765\u8bc1\u660e\u81ea\u5df1\u3002\u90a3\u8c01\u6765\u8bc1\u660e\u201c\u6839\u8bc1\u4e66\u201d\u53ef\u9760\u634f\uff1f\u5b9e\u9645\u4e0a\uff0c\u6839\u8bc1\u4e66\u81ea\u5df1\u8bc1\u660e\u81ea\u5df1\u662f\u53ef\u9760\u6ef4\uff08\u6216\u8005\u6362\u53e5\u8bdd\u8bf4\uff0c\u6839\u8bc1\u4e66\u662f\u4e0d\u9700\u8981\u88ab\u8bc1\u660e\u6ef4)\u3002","title":"\u8bc1\u4e66\u4fe1\u4efb\u94fe"},{"location":"about/#_62","text":"\u4e0b\u5217\u4e24\u79cd\u65b9\u5f0f\u751f\u6210\u7684\u8bc1\u4e66\u90fd\u662fpem\u683c\u5f0f\u7684\uff0c\u53ef\u4ee5\u5bfc\u5165\u5230\u8ba1\u7b97\u673a\u3002 \u79c1\u94a5\u6587\u4ef6 \u6570\u5b57\u8bc1\u4e66\uff08\u5305\u542b\u516c\u94a5\uff09","title":"\u751f\u6210\u81ea\u7b7e\u540d\u8bc1\u4e66"},{"location":"about/#1_12","text":"\u521b\u5efa\u79c1\u94a5 \u300b \u521b\u5efa\u8bf7\u6c42 \u300b\u751f\u6210\u8bc1\u4e66 \u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u5982Mytest, \u8fdb\u5165\u8be5\u76ee\u5f55, \u5728\u8be5\u76ee\u5f55\u4e0b\u6253\u5f00\u547d\u4ee4\u884c\u7a97\u53e3 \u542f\u52a8openssl shell openssl # \u6267\u884c\u8be5\u547d\u4ee4\u5373\u53ef \u4f7f\u7528openssl\u5de5\u5177\u751f\u6210\u4e00\u4e2aRSA\u79c1\u94a5, \u6ce8\u610f\uff1a\u751f\u6210\u79c1\u94a5\uff0c\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u81f3\u5c114\u4f4d\u7684\u5bc6\u7801\u3002 shell genrsa -des3 -out server.key 2048 // 2048\u79c1\u94a5\u7684\u4f4d\u6570\uff0c\u53ef\u4ee5\u4e0d\u6307\u5b9a\uff0c\u9ed8\u8ba4\u503c\uff1a\uff1f\uff1f\uff1f - des3: \u4f7f\u75283des\u5bf9\u79c1\u94a5\u8fdb\u884c\u52a0\u5bc6\uff0c//\u4f7f\u7528req\u53c2\u6570\u7684\u53ef\u4ee5\u4e0d\u6307\u5b9a\u8fd9\u4e2a\u53c2\u6570\uff0c\u52a0\u4e0b\u9762 \u751f\u6210CSR\uff08\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff09 \u4f1a\u5f15\u5bfc\u6211\u4eec\u586b\u5199\u7533\u8bf7\u65b9\u7684\u4fe1\u606f\uff1a\u56fd\u5bb6\uff0c\u7701\u4efd\uff0c\u57ce\u5e02\uff0c\u90e8\u95e8\u2026, \u683c\u5f0f\u662fpem\u683c\u5f0f ```shell req -new -key server.key -out server.csr #\u67e5\u770b\u8bf7\u6c42 req -in server.csr -text ``` \u5220\u9664\u79c1\u94a5\u4e2d\u7684\u5bc6\u7801, \u7b2c\u4e00\u6b65\u7ed9\u79c1\u94a5\u6587\u4ef6\u8bbe\u7f6e\u5bc6\u7801\u662f\u5fc5\u987b\u8981\u505a\u7684, \u5982\u679c\u4e0d\u60f3\u8981\u53ef\u4ee5\u5220\u6389 shell rsa -in server.key -out server.key -out \u53c2\u6570\u540e\u7684\u6587\u4ef6\u540d\u53ef\u4ee5\u968f\u610f\u8d77 \u751f\u6210\u81ea\u7b7e\u540d\u8bc1\u4e66 ```shell x509 -req -days 365 -in server.csr -signkey server.key -out server.crt #\u751f\u6210\u7684\u8bc1\u4e66\u662fpem\u8fdb\u884cbase64\u7f16\u7801\u7684 #\u67e5\u770b\u65b9\u5f0f ``` \u5728Windows\u4e0b\u5b89\u88c5\uff0cOpenssl-Win64.exe \u8fdb\u5165\u5230\uff1aC:\\Program Files\\OpenSSL-Win64\\bin\\openssl.exe \u53f3\u952e\u5355\u51fb->\u7ba1\u7406\u5458\u8fd0\u884c -> OPenSSL > \u5982\u679c\u4e0d\u662f\u7ba1\u7406\u5458\u6253\u5f00: Permission Denied \u2014> \u6743\u9650\u4e0d\u591f \u6267\u884c : genrsa -des3 -out server.key 2048 ==\u81ea\u7b7e\u540d\u8bc1\u4e66\uff0c\u81ea\u5df1\u9881\u53d1\u7ed9\u81ea\u5df1\uff0c\u81ea\u5df1\u9a8c\u8bc1\u81ea\u5df1\u3002==","title":"1. \u65b9\u5f0f\u4e00"},{"location":"about/#2_10","text":"\u4e0d\u9700\u8981\u751f\u6210csr\uff0c\u76f4\u63a5\u751f\u6210\u8bc1\u4e66\uff0c\u6ca1\u6709\u6307\u5b9aSubject\u76f8\u5173\u7684\u6570\u636e\uff0c\u6240\u4ee5\u8fd8\u4f1a\u5f15\u5bfc\u8f93\u5165 openssl req -x509 -newkey rsa:4096 -keyout server2.key -out cert.crt -days 365 -nodes -nodes \u4e0d\u8bbe\u7f6e\u5bc6\u7801 \u89e3\u6790\u8bc1\u4e66\uff1a openssl x509 -in cert.pem -text","title":"2. \u65b9\u5f0f\u4e8c"},{"location":"about/#_63","text":"","title":"\u5e38\u89c1\u7684\u8bc1\u4e66\u683c\u5f0f"},{"location":"about/#1-pem","text":"\u6211\u4eec\u4f7f\u7528openssl\u751f\u6210\u7684\u90fd\u662fpem\u683c\u5f0f\u7684 \u89e3\u6790\u8fc7\u7a0b openssl x509 -in cert.crt -text Privacy Enhanced Mail(\u4fe1\u5c01) \u67e5\u770b\u5185\u5bb9\uff0c\u4ee5\"-----BEGIN...\"\u5f00\u5934\uff0c\u4ee5\"-----END...\"\u7ed3\u5c3e\u3002 \u67e5\u770bPEM\u683c\u5f0f\u8bc1\u4e66\u7684\u4fe1\u606f\uff1a sh `Apache\u548c*NIX\u670d\u52a1\u5668\u504f\u5411\u4e8e\u4f7f\u7528\u8fd9\u79cd\u7f16\u7801\u683c\u5f0f\u3002 openssl x509 -in certificate.pem -text -noout","title":"1. pem\u683c\u5f0f"},{"location":"about/#2-der","text":"\u6211\u4eec\u4f7f\u7528Windows\u5bfc\u51fa\u7684\u53ef\u4ee5\u662fder \u5bf9\u4e8eder\u683c\u5f0f\u7684\uff0c\u89e3\u6790\u65b9\u5f0f\u5982\u4e0b\uff1a openssl x509 -in itcastcrt.cer -text -inform der // \u989d\u5916\u7684\u53c2\u6570 -inform der Distinguished Encoding Rules \u6253\u5f00\u770b\u662f\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u4e0d\u53ef\u8bfb\u3002 Java\u548cWindows\u670d\u52a1\u5668\u504f\u5411\u4e8e\u4f7f\u7528\u8fd9\u79cd\u7f16\u7801\u683c\u5f0f\u3002 \u67e5\u770bDER\u683c\u5f0f\u8bc1\u4e66\u7684\u4fe1\u606f sh `der\u662f\u683c\u5f0f\uff0c\u4e0e\u8bc1\u4e66\u7684\u540e\u7f00\u540d\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb openssl x509 -in certificate.der -inform der -text -noout `\u8bf7\u8bd5\u8bd5-pubkey\u53c2\u6570","title":"2. der\u683c\u5f0f"},{"location":"about/#3-windows","text":"","title":"3. windows\u5bfc\u51fa\u683c\u5f0f\u9009\u62e9"},{"location":"about/#pki","text":"\u4ec5\u5236\u5b9a\u8bc1\u4e66\u7684\u89c4\u8303\u8fd8\u4e0d\u8db3\u4ee5\u652f\u6301\u516c\u94a5\u7684\u5b9e\u9645\u8fd0\u7528\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5f88\u591a\u5176\u4ed6\u7684\u89c4\u8303\uff0c\u4f8b\u5982\u8bc1\u4e66\u5e94\u8be5\u7531\u8c01\u6765\u9881\u53d1\uff0c\u5982\u4f55\u9881\u53d1\uff0c\u79c1\u94a5\u6cc4\u9732\u65f6\u5e94\u8be5\u5982\u4f55\u4f5c\u5e9f\u8bc1\u4e66\uff0c\u8ba1\u7b97\u673a\u4e4b\u95f4\u7684\u6570\u636e\u4ea4\u6362\u5e94\u91c7\u7528\u600e\u6837\u7684\u683c\u5f0f\u7b49\u3002\u8fd9\u4e00\u8282\u6211\u4eec\u5c06\u4ecb\u7ecd\u80fd\u591f\u4f7f\u516c\u94a5\u7684\u8fd0\u7528\u66f4\u52a0\u6709\u6548\u7684\u516c\u94a5\u57fa\u7840\u8bbe\u65bd\u3002","title":"\u516c\u94a5\u57fa\u7840\u8bbe\u65bd\uff08PKI\uff09"},{"location":"about/#1_13","text":"\u516c\u94a5\u57fa\u7840\u8bbe\u65bd\uff08Public-Key infrastructure\uff09\u662f\u4e3a\u4e86\u80fd\u591f\u66f4\u6709\u6548\u5730\u8fd0\u7528\u516c\u94a5\u800c\u5236\u5b9a\u7684\u4e00\u7cfb\u5217\u89c4\u8303\u548c\u89c4\u683c\u7684\u603b\u79f0\u3002\u516c\u94a5\u57fa\u7840\u8bbe\u65bd\u4e00\u822c\u6839\u636e\u5176\u82f1\u8bed\u7f29\u5199\u800c\u7b80\u79f0\u4e3aPKI\u3002 PKI\u53ea\u662f\u4e00\u4e2a\u603b\u79f0\uff0c\u800c\u5e76\u975e\u6307\u67d0\u4e00\u4e2a\u5355\u72ec\u7684\u89c4\u8303\u6216\u89c4\u683c\u3002\u4f8b\u5982\uff0cRSA\u516c\u53f8\u6240\u5236\u5b9a\u7684PKCS\uff08Public-Key Cryptography Standards\uff0c\u516c\u94a5\u5bc6\u7801\u6807\u51c6\uff09\u7cfb\u5217\u89c4\u8303\u4e5f\u662fPKI\u7684\u4e00\u79cd\uff0c\u800c\u4e92\u8054\u7f51\u89c4\u683cRFC\uff08Requestfor Comments\uff09\u4e2d\u4e5f\u6709\u5f88\u591a\u4e0ePKI\u76f8\u5173\u7684\u6587\u6863\u3002\u6b64\u5916\uff0cX.509\u8fd9\u6837\u7684\u89c4\u8303\u4e5f\u662fPKI\u7684\u4e00\u79cd\u3002\u5728\u5f00\u53d1PKI\u7a0b\u5e8f\u65f6\u6240\u4f7f\u7528\u7684\u7531\u5404\u4e2a\u516c\u53f8\u7f16\u5199\u7684API\uff08Application Programming Interface, \u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3\uff09\u548c\u89c4\u683c\u8bbe\u8ba1\u4e66\u4e5f\u53ef\u4ee5\u7b97\u662fPKI\u7684\u76f8\u5173\u89c4\u683c\u3002 \u56e0\u6b64\uff0c\u6839\u636e\u5177\u4f53\u6240\u91c7\u7528\u7684\u89c4\u683c\uff0cPKI\u4e5f\u4f1a\u6709\u5f88\u591a\u53d8\u79cd\uff0c\u8fd9\u4e5f\u662f\u5f88\u591a\u4eba\u96be\u4ee5\u6574\u4f53\u7406\u89e3PKI\u7684\u539f\u56e0\u4e4b\u4e00\u3002 \u4e3a\u4e86\u5e2e\u52a9\u5927\u5bb6\u6574\u4f53\u7406\u89e3PKI,\u6211\u4eec\u6765\u7b80\u5355\u603b\u7ed3\u4e00\u4e0bPKI\u7684\u57fa\u672c\u7ec4\u6210\u8981\u7d20\uff08\u7528\u6237\u3001\u8ba4\u8bc1\u673a\u6784\u3001\u4ed3\u5e93\uff09\u4ee5\u53ca\u8ba4\u8bc1\u673a\u6784\u6240\u8d1f\u8d23\u7684\u5de5\u4f5c\u3002","title":"1. \u4ec0\u4e48\u662f\u516c\u94a5\u57fa\u7840\u8bbe\u65bd"},{"location":"about/#2-pki","text":"PKI\u7684\u7ec4\u6210\u8981\u7d20\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e09\u4e2a\uff1a \u7528\u6237 --- \u4f7f\u7528PKI\u7684\u4eba \u8ba4\u8bc1\u673a\u6784 --- \u9881\u53d1\u8bc1\u4e66\u7684\u4eba \u4ed3\u5e93 --- \u4fdd\u5b58\u8bc1\u4e66\u7684\u6570\u636e\u5e93 \u4f5c\u5e9f\u8bc1\u4e66 \u5f53\u7528\u6237\u7684\u79c1\u94a5\u4e22\u5931\u3001\u88ab\u76d7\u65f6\uff0c\u8ba4\u8bc1\u673a\u6784\u9700\u8981\u5bf9\u8bc1\u4e66\u8fdb\u884c\u4f5c\u5e9f\uff08revoke\uff09\u3002\u6b64\u5916\uff0c\u5373\u4fbf\u79c1\u94a5\u5b89\u7136\u65e0\u6059\uff0c\u6709\u65f6\u5019\u4e5f\u9700\u8981\u4f5c\u5e9f\u8bc1\u4e66\uff0c\u4f8b\u5982\u7528\u6237\u4ece\u516c\u53f8\u79bb\u804c\u5bfc\u81f4\u5176\u5931\u53bb\u79c1\u94a5\u7684\u4f7f\u7528\u6743\u9650\uff0c\u6216\u8005\u662f\u540d\u79f0\u53d8\u66f4\u5bfc\u81f4\u548c\u8bc1\u4e66\u4e2d\u8bb0\u8f7d\u7684\u5185\u5bb9\u4e0d\u4e00\u81f4\u7b49\u60c5\u51b5\u3002 \u7eb8\u8d28\u8bc1\u4e66\u53ea\u8981\u6495\u6bc1\u5c31\u53ef\u4ee5\u4f5c\u5e9f\u4e86\uff0c\u4f46\u8fd9\u91cc\u7684\u8bc1\u4e66\u662f\u6570\u5b57\u4fe1\u606f\uff0c\u5373\u4fbf\u4ece\u4ed3\u5e93\u4e2d\u5220\u9664\u4e5f\u65e0\u6cd5\u4f5c\u5e9f\uff0c\u56e0\u4e3a\u7528\u6237\u4f1a\u4fdd\u5b58\u8bc1\u4e66\u7684\u526f\u672c\uff0c\u4f46\u8ba4\u8bc1\u673a\u6784\u53c8\u4e0d\u80fd\u4eba\u4fb5\u7528\u6237\u7684\u7535\u8111\u5c06\u526f\u672c\u5220\u9664\u3002 \u8981\u4f5c\u5e9f\u8bc1\u4e66\uff0c\u8ba4\u8bc1\u673a\u6784\u9700\u8981\u5236\u4f5c\u4e00\u5f20\u8bc1\u4e66== \u4f5c\u5e9f\u6e05\u5355\uff08Certificate Revocation List),\u7b80\u79f0\u4e3aCRL ==\u3002 CRL\u662f\u8ba4\u8bc1\u673a\u6784\u5ba3\u5e03\u4f5c\u5e9f\u7684\u8bc1\u4e66\u4e00\u89c8\u8868\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u662f\u4e00\u5f20\u5df2\u4f5c\u5e9f\u7684\u8bc1\u4e66\u5e8f\u5217\u53f7\u7684\u6e05\u5355\uff0c\u5e76\u7531\u8ba4\u8bc1\u673a\u6784\u52a0\u4e0a\u6570\u5b57\u7b7e\u540d\u3002\u8bc1\u4e66\u5e8f\u5217\u53f7\u662f\u8ba4\u8bc1\u673a\u6784\u5728\u9881\u53d1\u8bc1\u4e66\u65f6\u6240\u8d4b\u4e88\u7684\u7f16\u53f7\uff0c\u5728\u8bc1\u4e66\u4e2d\u90fd\u4f1a\u8bb0\u8f7d\u3002 PKI\u7528\u6237\u9700\u8981\u4ece\u8ba4\u8bc1\u673a\u6784\u83b7\u53d6\u6700\u65b0\u7684CRL,\u5e76\u67e5\u8be2\u81ea\u5df1\u8981\u7528\u4e8e\u9a8c\u8bc1\u7b7e\u540d\uff08\u6216\u8005\u662f\u7528\u4e8e\u52a0\u5bc6\uff09\u7684\u516c\u94a5\u8bc1\u4e66\u662f\u5426\u5df2\u7ecf\u4f5c\u5e9f\u8fd9\u4e2a\u6b65\u9aa4\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002 \u5047\u8bbe\u6211\u4eec\u624b\u4e0a\u6709Bob\u7684\u8bc1\u4e66\uff0c\u8be5\u8bc1\u4e66\u6709\u5408\u6cd5\u7684\u8ba4\u8bc1\u673a\u6784\u7b7e\u540d\uff0c\u800c\u4e14\u4e5f\u5728\u6709\u6548\u671f\u5185\uff0c\u4f46\u4ec5\u51ed\u8fd9\u4e9b\u8fd8\u4e0d\u80fd\u8bf4\u660e\u8be5\u8bc1\u4e66\u4e00\u5b9a\u662f\u6709\u6548\u7684\uff0c\u8fd8\u9700\u8981\u67e5\u8be2\u8ba4\u8bc1\u673a\u6784\u6700\u65b0\u7684CRL\uff0c\u5e76\u786e\u8ba4\u8be5\u8bc1\u4e66\u662f\u5426\u6709\u6548\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u4e2a\u68c0\u67e5\u4e0d\u662f\u7531\u7528\u6237\u81ea\u8eab\u6765\u5b8c\u6210\u7684\uff0c\u800c\u662f\u5e94\u8be5\u7531\u5904\u7406\u8be5\u8bc1\u4e66\u7684\u8f6f\u4ef6\u6765\u5b8c\u6210\uff0c\u4f46\u6709\u5f88\u591a\u8f6f\u4ef6\u5e76\u6ca1\u6709\u53ca\u65f6\u66f4\u80fdCRL\u3002","title":"2. PKI\u7684\u7ec4\u6210\u8981\u7d20"},{"location":"about/#ssl","text":"","title":"\u4e5d\u3001SSL"},{"location":"about/#http-https-ssltls","text":"HTTPS = HTTP + SSL/TLS \u65e9\u671f\u7684\u7248\u672cSSL \uff083.0\u4e4b\u540e\u53ebTLS\uff09 \u73b0\u5728\uff1aTLS 1.0 TLS = 3.0 SSL 1.1 TLS = 3.1 SSL, \u76ee\u524d\u7248\u672cTLS1.2","title":"HTTP, HTTPS, SSL/TLS"},{"location":"about/#_64","text":"","title":"\u5173\u7cfb\u56fe\u793a"},{"location":"about/#ssl_1","text":"","title":"SSL\u901a\u4fe1\u56fe\u793a"},{"location":"about/#ssl_2","text":"SSL\u4e24\u5c42\u534f\u8bae \u63e1\u624b\u76f8\u5173 \u6570\u636e\u8bb0\u5f55","title":"SSL\u534f\u8bae\u7ec6\u8282\uff08\u62d3\u5c55\uff09"},{"location":"about/#_65","text":"","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"about/#http-server","text":"\u5ba2\u6237\u7aef\u8ba4\u8bc1\u670d\u52a1\u5668 \u670d\u52a1\u5668\u4e0d\u8ba4\u8bc1\u5ba2\u6237\u7aef \u670d\u52a1\u5668\u7684\u8bc1\u4e66\u4f7f\u7528openssl\u81ea\u7b7e\u540d\u8bc1\u4e66\uff08\u6211\u4eec\u4f7f\u7528server.crt\u5c31\u53ef\u4ee5\u5f53\u505aca\u8bc1\u4e66\uff09","title":"\u4e00\u3001http server\u5355\u5411\u8ba4\u8bc1"},{"location":"about/#1_14","text":"\u5206\u6790\u6d41\u7a0b 1. \u521b\u5efahttp server 2. \u542f\u52a8http server\uff0c\u542f\u52a8\u65f6\u52a0\u8f7d\u81ea\u5df1\u7684\u8bc1\u4e66\uff0c \u542f\u52a8\u65f6\u4f7f\u7528tls \u751f\u6210\u670d\u52a1\u5668\u8bc1\u4e66 \u4f7f\u7528-subj\u53c2\u6570\uff0c\u6307\u5b9a\u670d\u52a1\u5668\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u4e0e\u4e4b\u524d\u7684\u4e0d\u540c\uff0c\u6b64\u65f6\u4e0d\u9700\u8981\u5f15\u5bfc\u8f93\u5165\u3002 openssl req \\ -x509 \\ -nodes \\ -newkey rsa:2048 \\ -keyout server.key \\ -out server.crt \\ -days 3650 \\ -subj \"/C=CN/ST=Beijing/L=Beijing/O=Global Security/OU=IT Department/CN=*\" \u4ee3\u7801 package main import ( \"net/http\" \"log\" \"fmt\" ) func main() { //1. \u521b\u5efahttp server server := http.Server{ //Addr string // TCP address to listen on, \":http\" if empty Addr: \":8848\", //\u76d1\u542c\u7aef\u53e3 //Handler Handler // handler to invoke, http.DefaultServeMux if nil Handler: nil, //\u586b\u5199nil\u65f6\uff0c \u4f1a\u4f7f\u7528\u9ed8\u8ba4\u7684\u5904\u7406\u5668\uff0c \u8fd8\u662f\u8981\u81ea\u5df1\u5b9e\u73b0\u5904\u7406\u903b\u8f91 //TLSConfig *tls.Config TLSConfig: nil, } //\u7f16\u5199\u5904\u7406\u903b\u8f91 http.HandleFunc(\"/\", func(writer http.ResponseWriter, request *http.Request) { fmt.Println(\"HandleFunc called!\\n\") writer.Write([]byte(\"hello world!!!!!\")) }) //2. \u542f\u52a8http server\uff0c\u542f\u52a8\u65f6\u52a0\u8f7d\u81ea\u5df1\u7684\u8bc1\u4e66\uff0c \u542f\u52a8\u65f6\u4f7f\u7528tls err := server.ListenAndServeTLS(\"./server.crt\", \"./server.key\") if err != nil { log.Fatal(err) } }","title":"1. \u670d\u52a1\u5668\u7aef"},{"location":"about/#_66","text":"localhost\u662f\u672c\u673a\u7684ip\uff1a 127.0.0.1 ``` \u4e00\u5b9a\u8981\u5199\u6210\uff1ahttps, => https://localhost:8848\uff0c \u6d4f\u89c8\u5668\u5efa\u8bae\u4f7f\u7528chrome server.crt\uff0c server.key\u4e0eserver.go\u653e\u5230\u540c\u7ea7\u76ee\u5f55\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u4ee3\u7801\u6ca1\u6709\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84 func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {} \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u56de\u8c03\u51fd\u6570\uff0c\u53ea\u6709\u5ba2\u6237\u7aef\u6709\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u89e6\u53d1\u3002 ```","title":"\u9644\u52a0\u77e5\u8bc6\uff1a"},{"location":"about/#2_11","text":"\u5206\u6790\u6d41\u7a0b 1. \u6ce8\u518c\u7ed9\u670d\u52a1\u5668\u9881\u53d1\u8bc1\u4e66\u7684ca - \u8bfb\u53d6ca\u8bc1\u4e66 - \u628aca\u7684\u8bc1\u4e66\u6dfb\u52a0\u5230ca\u6c60\u4e2d 2. \u914d\u7f6etls 3.\u521b\u5efahttp client 4. client\u53d1\u8d77\u8bf7\u6c42 5. \u6253\u5370\u8fd4\u56de\u503c \u4ee3\u7801 package main import ( \"io/ioutil\" \"log\" \"crypto/x509\" \"crypto/tls\" \"net/http\" \"fmt\" ) func main() { //1. \u6ce8\u518c\u7ed9\u670d\u52a1\u5668\u9881\u53d1\u8bc1\u4e66\u7684ca //- \u8bfb\u53d6ca\u8bc1\u4e66, \u6211\u4eec\u7684\u8bc1\u4e66\u662f\u81ea\u7b7e\u540d\u7684\uff0cserver.crt\u80fd\u591f\u8ba4\u8bc1\u81ea\u5df1\uff0cserver.crt\u5f53\u6210CA\u8bc1\u4e66 caCerInfo /*pem\u683c\u5f0f*/ , err := ioutil.ReadFile(\"./server.crt\") if err != nil { log.Fatal(err) } //- \u628aca\u7684\u8bc1\u4e66\u6dfb\u52a0\u5230ca\u6c60\u4e2d //- \u521b\u5efaca\u6c60 cerPool := x509.NewCertPool() //- \u5c06ca\u6dfb\u52a0\u5230ca\u6c60 cerPool.AppendCertsFromPEM(caCerInfo) // //2. \u914d\u7f6etls // RootCAs defines the set of root certificate authorities // that clients use when verifying server certificates. // If RootCAs is nil, TLS uses the host's root CA set. //RootCAs *x509.CertPool //\u5c06\u6211\u4eec\u627f\u8ba4ca\u6c60\u914d\u7f6e\u7ed9tls cfg := tls.Config{ RootCAs: cerPool, } //fmt.Printf(\"cfg : %s\", cfg) //3.\u521b\u5efahttp client client := http.Client{ Transport: &http.Transport{ TLSClientConfig: &cfg, //TLSClientConfig: nil, }, } //4. client\u53d1\u8d77\u8bf7\u6c42 response, err := client.Get(\"https://localhost:8848\") if err != nil { log.Fatal(err) } //5. \u6253\u5370\u8fd4\u56de\u503c bodyInfo, err := ioutil.ReadAll(response.Body) if err != nil { log.Fatal(err) } //\u52ff\u5fd8 response.Body.Close() //body fmt.Printf(\"body : %s\\n\", bodyInfo) //\u72b6\u6001\u7801 fmt.Printf(\"status code : %s\\n\", response.Status) }","title":"2. \u5ba2\u6237\u7aef"},{"location":"about/#_67","text":"\u5ba2\u6237\u7aef\u8ba4\u8bc1\u670d\u52a1\u5668 \u670d\u52a1\u5668\u8ba4\u8bc1\u5ba2\u6237\u7aef \u670d\u52a1\u5668\u7684\u8bc1\u4e66\u4f7f\u7528openssl\u81ea\u7b7e\u540d\u8bc1\u4e66\uff08\u6211\u4eec\u4f7f\u7528server.crt\u5c31\u53ef\u4ee5\u5f53\u505aca\u8bc1\u4e66\uff09 \u5ba2\u6237\u7aef\u7684\u8bc1\u4e66\u4f7f\u7528openssl\u81ea\u7b7e\u540d\u8bc1\u4e66\uff08\u6211\u4eec\u4f7f\u7528client.crt\u5c31\u53ef\u4ee5\u5f53\u505aca\u8bc1\u4e66\uff09","title":"\u4e8c\u3001\u53cc\u5411\u8ba4\u8bc1"},{"location":"about/#1_15","text":"\u5206\u6790\u6d41\u7a0b 1. \u6ce8\u518cclient ca\u8bc1\u4e66 - \u8bfb\u53d6client\u7684ca\u8bc1\u4e66 - \u521b\u5efaca\u6c60 - \u628aclient \u7684 ca \u6dfb\u52a0\u5230ca\u6c60 2. \u914d\u7f6etls ==> cfg 3. \u521b\u5efahttp server\uff0c \u4f7f\u7528cfg 4. \u542f\u52a8http server\uff0c\u542f\u52a8\u65f6\u52a0\u8f7d\u81ea\u5df1\u7684\u8bc1\u4e66\uff0c \u542f\u52a8\u65f6\u4f7f\u7528tls \u5b9e\u73b0\u4ee3\u7801 package main import ( \"io/ioutil\" \"log\" \"crypto/x509\" \"crypto/tls\" \"net/http\" \"fmt\" ) func main() { //1. \u6ce8\u518cclient ca\u8bc1\u4e66 //- \u8bfb\u53d6client\u7684ca\u8bc1\u4e66, client\u7684\u8bc1\u4e66\u4e5f\u662f\u81ea\u7b7e\u540d\u7684\uff0c\u81ea\u5df1\u8ba4\u8bc1\u81ea\u5df1 caInfo, err := ioutil.ReadFile(\"./client.crt\") if err != nil { log.Fatal(err) } //- \u521b\u5efaca\u6c60 caCertPool := x509.NewCertPool() //- \u628aclient \u7684 ca \u6dfb\u52a0\u5230ca\u6c60 caCertPool.AppendCertsFromPEM(caInfo) //2. \u914d\u7f6etls ==> cfg cfg := tls.Config{ // \u6211\u4eec\u8981\u8ba4\u8bc1client, \u9700\u8981\u4e24\u4e2a\u5b57\u6bb5 // ClientAuth determines the server's policy for // TLS Client Authentication. The default is NoClientCert. //ClientAuth ClientAuthType // const ( // NoClientCert ClientAuthType = iota // RequestClientCert // RequireAnyClientCert // VerifyClientCertIfGiven // RequireAndVerifyClientCert //) //\u6211\u4eec\u8bbe\u7f6e\u670d\u52a1\u5668\u8ba4\u8bc1\u5ba2\u6237\u7aef ClientAuth: tls.RequireAndVerifyClientCert, // ClientCAs defines the set of root certificate authorities // that servers use if required to verify a client certificate // by the policy in ClientAuth. //ClientCAs *x509.CertPool ClientCAs: caCertPool, //\u5ba2\u6237\u7aef\u7684ca\u6c60\u586b\u5145\u5728\u8fd9\u91cc } //3. \u521b\u5efahttp server\uff0c \u4f7f\u7528cfg server := http.Server{ //\u4e09\u4e2a\u5b57\u6bb5Addr, Handler, TLSConfig Addr: \":8848\", //Handler: nil, Handler: myhandler{}, TLSConfig: &cfg, } fmt.Printf(\"\u51c6\u5907\u542f\u52a8\u670d\u52a1\u5668...\\n\") //4. \u542f\u52a8http server\uff0c\u542f\u52a8\u65f6\u52a0\u8f7d\u81ea\u5df1\u7684\u8bc1\u4e66\uff0c \u542f\u52a8\u65f6\u4f7f\u7528tls err = server.ListenAndServeTLS(\"./server.crt\", \"./server.key\") if err != nil { log.Fatal(err) } } type myhandler struct { } func (h myhandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { fmt.Printf(\"ServeHTTP called!\\n\") w.Write([]byte(\"hello world!!!!\")) }","title":"1.\u670d\u52a1\u5668"},{"location":"about/#2_12","text":"\u5206\u6790\u6d41\u7a0b 1. \u6ce8\u518c\u7ed9\u670d\u52a1\u5668\u9881\u53d1\u8bc1\u4e66\u7684ca - \u8bfb\u53d6ca\u8bc1\u4e66 - \u628aca\u7684\u8bc1\u4e66\u6dfb\u52a0\u5230ca\u6c60\u4e2d 1.5 \u52a0\u8f7d\u5ba2\u6237\u7aef\u7684\u8bc1\u4e66\u548c\u79d8\u94a5 ==> clientCert(\u4fee\u6539\u4e86) 2. \u914d\u7f6etls, ==\u300b \u589e\u52a0clientCert(\u4fee\u6539\u4e86) 3.\u521b\u5efahttp client 4. client\u53d1\u8d77\u8bf7\u6c42 5. \u6253\u5370\u8fd4\u56de\u503c \u5b9e\u73b0\u4ee3\u7801 package main import ( \"io/ioutil\" \"log\" \"crypto/x509\" \"crypto/tls\" \"net/http\" \"fmt\" ) func main() { //1. \u6ce8\u518c\u7ed9\u670d\u52a1\u5668\u9881\u53d1\u8bc1\u4e66\u7684ca //- \u8bfb\u53d6ca\u8bc1\u4e66 caCertInfo, err := ioutil.ReadFile(\"./server.crt\") if err != nil { log.Fatal(err) } //- \u628aca\u7684\u8bc1\u4e66\u6dfb\u52a0\u5230ca\u6c60\u4e2d //- \u521b\u5efaca pool caCertPool := x509.NewCertPool() //\u6dfb\u52a0caCert caCertPool.AppendCertsFromPEM(caCertInfo) // //1.5 \u52a0\u8f7d\u5ba2\u6237\u7aef\u7684\u8bc1\u4e66\u548c\u79d8\u94a5 ==> clientCert(\u4fee\u6539\u4e86) //func LoadX509KeyPair(certFile, keyFile string) (Certificate, error) { clientCert, err := tls.LoadX509KeyPair(\"./client.crt\", \"./client.key\") if err != nil { log.Fatal(err) } // //2. \u914d\u7f6etls, ==\u300b \u589e\u52a0clientCert(\u4fee\u6539\u4e86) //- RootCAs //Certificates cfg := tls.Config{ //\u670d\u52a1\u5668\u7684ca\u6c60 RootCAs: caCertPool, //\u5ba2\u6237\u7aef\u8bc1\u4e66 Certificates: []tls.Certificate{clientCert}, } // //3.\u521b\u5efahttp client client := http.Client{ Transport: &http.Transport{ TLSClientConfig: &cfg, }, } //4. client\u53d1\u8d77\u8bf7\u6c42 response, err := client.Get(\"https://localhost:8848\") if err != nil { log.Fatal(err) } bodyInfo, err := ioutil.ReadAll(response.Body) if err != nil { log.Fatal(err) } defer response.Body.Close() //5. \u6253\u5370\u8fd4\u56de\u503c fmt.Printf(\"body info : %s\\n\", bodyInfo) fmt.Printf(\"status code : %s\\n\", response.Status) }","title":"2.\u5ba2\u6237\u7aef"},{"location":"about/#_68","text":"","title":"\u8865\u5145"},{"location":"about/#_69","text":"hello world -> \u52a0\u5bc6 =\u300bkhoor zrug -> \u89e3\u5bc6 -> hello world \u52a0\u5bc6\uff1a\u5de6\u79fbk\u4f4d \u660e\u6587\uff1a hello world \u7b97\u6cd5\uff1a\u5411\u53f3\u79fb\u52a8 \u79d8\u94a5\uff1a3 \u89e3\u5bc6\uff1a\u53f3\u79fbk\u4f4d \u5bc6\u6587\uff1akhoor zrug \u7b97\u6cd5\uff1a\u5411\u5de6\u79fb\u52a8\uff08\u4e0e\u52a0\u5bc6\u7b97\u6cd5\u4e0d\u540c\uff09 \u79d8\u94a5\uff1a3","title":"\u51ef\u6492\u5bc6\u7801"},{"location":"index0/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"index0/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"index0/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"index0/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"%E4%BA%A4%E6%98%93/","text":"\u4ea4\u6613 1.\u4ea4\u6613\u7b80\u4ecb \u4ece\u5e7f\u4e49\u4e0a\u8bb2\uff0c\u6709go-sdk\u652f\u6301\u4e09\u79cd\u7c7b\u578b\u7684TelChain\u4ea4\u6613\uff1a 1.\u79ef\u5206\u4ece\u4e00\u65b9\u4ea4\u6613\u5230\u53e6\u4e00\u65b9 2.\u521b\u5efa\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6 3.\u4e0e\u667a\u80fd\u5408\u7ea6\u4ea4\u6613 \u4e3a\u4e86\u8fdb\u884c\u8fd9\u4e9b\u4ea4\u6613\uff0c\u5fc5\u987b\u6709\u79ef\u5206(TelChain\u533a\u5757\u94fe\u7684\u4ee3\u5e01)\u5b58\u5728\u4e8e\u4ea4\u6613\u53d1\u751f\u7684TelChain\u8d26\u6237\u4e2d\u3002\u8fd9\u662f\u4e3a\u4e86\u652f\u4ed8 gas \u6210\u672c\uff0c\u8fd9\u662f\u4e3a\u652f\u4ed8\u53c2\u4e0e\u4ea4\u6613\u7684TelChain\u5ba2\u6237\u7aef\u7684\u4ea4\u6613\u6267\u884c\u6210\u672c\uff0c\u652f\u4ed8\u4e86\u8fd9\u4e2a\u6210\u672c\u5c31\u80fd\u5c06\u7ed3\u679c\u63d0\u4ea4\u5230TelChain\u533a\u5757\u94fe\u4e0a\u3002\u83b7\u5f97\u79ef\u5206\u7684\u8bf4\u660e\u4e0b\u6587\u4f1a\u8bf4\u5230\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u67e5\u8be2\u667a\u80fd\u5408\u7ea6\u7684\u72b6\u6001\u3002 2.\u5982\u4f55\u83b7\u5f97\u4ee5\u592a\u5e01Ether \u5982\u4f55\u83b7\u5f97\u79ef\u5206Bifer \u8981\u60f3\u83b7\u5f97\u79ef\u5206Bifer\u4f60\u6709\u4e24\u79cd\u9014\u5f84\u53ef\u4ee5\u9009\u62e9\uff1a 1.\u81ea\u5df1\u5f00\u91c7\u6316\u77ff 2.\u4ece\u522b\u4eba\u90a3\u91cc\u83b7\u53d6\u79ef\u5206 \u5728\u79c1\u6709\u94fe\u4e2d\u81ea\u5df1\u6316\u77ff\uff0c\u6216\u8005\u516c\u5171\u6d4b\u8bd5\u94fe( testnet )\u662f\u975e\u5e38\u7b80\u5355\u76f4\u63a5\u7684\u3002\u4f46\u662f\uff0c\u5728\u4e3b\u8981\u7684\u516c\u6709\u94fe( mainnet )\u4e2d\uff0c\u5b83\u9700\u8981\u5f88\u591a\u5f88\u660e\u663e\u7684\u4e13\u7528GPU\u65f6\u95f4\uff0c\u9664\u975e\u4f60\u5df2\u7ecf\u62e5\u6709\u591a\u4e2a\u4e13\u7528GPU\u7684\u77ff\u673a\uff0c\u5426\u5219\u57fa\u672c\u4e0a\u4e0d\u592a\u53ef\u884c\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528\u79c1\u6709\u94fe\uff0c\u5219\u5728\u8fd9\u4e2a \u5b98\u65b9\u6587\u6863 \u4e2d\u6709\u4e00\u4e9b\u6307\u5bfc\u3002 \u8981\u8d2d\u4e70\u79ef\u5206Bifer\uff0c\u4f60\u9700\u8981\u901a\u8fc7\u4ea4\u6613\u6240\u3002\u7531\u4e8e\u4e0d\u540c\u7684\u5730\u533a\u6709\u4e0d\u540c\u7684\u4ea4\u6613\u6240\uff0c\u4f60\u8fd8\u9700\u8981\u7814\u7a76\u81ea\u5df1\u53bb\u54ea\u513f\u5408\u9002\u3002 \u5b98\u65b9\u6587\u6863 \u4e2d\u5305\u542b\u591a\u4e2a\u4ea4\u6613\u6240\uff0c\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u53c2\u8003\u3002 3.\u4ee5\u592a\u574a\u6d4b\u8bd5\u94fe TelChain\u6d4b\u8bd5\u94fe \u9488\u5bf9BifereumTelChain\u6709\u8bb8\u591a\u4e13\u7528\u6d4b\u8bd5\u7f51\u7edc\u6216\u8005\u53eb\u6d4b\u8bd5\u94fe\uff0c\u4ed6\u4eec\u7531\u5404\u79cd\u5ba2\u6237\u7aef\u652f\u6301\u3002 1.Rinkeby\uff1a\u53ea\u652f\u6301geth\u5ba2\u6237\u7aef\u3002 2.Kovan\uff1a\u53ea\u652f\u6301Parity\u5ba2\u6237\u7aef\u3002 3.Ropsten\uff1a\u652f\u6301geth\u548cParity\u5ba2\u6237\u7aef\u3002 \u5bf9\u4e8e\u5f00\u53d1\uff0c\u5efa\u8bae\u4f60\u4f7f\u7528 Rinkeby \u6216 KoVan \u6d4b\u8bd5\u94fe\u3002\u8fd9\u662f\u56e0\u4e3a\u4ed6\u4eec\u4f7f\u7528\u7684\u5de5\u4f5c\u91cf\u8bc1\u660e POA \u5171\u8bc6\u673a\u5236\uff0c\u786e\u4fdd\u4ea4\u6613\u548c\u5757\u80fd\u591f\u4e00\u81f4\u5e76\u53ca\u65f6\u7684\u521b\u5efa\u3002 Ropsten \u6d4b\u8bd5\u94fe\uff0c\u867d\u7136\u6700\u63a5\u8fd1\u516c\u6709\u94fe( Mainnet )\uff0c\u4f46\u662f\u56e0\u4e3a\u5b83\u4f7f\u7528\u7684\u5de5\u4f5c\u91cf\u8bc1\u660e\u662f POW \u5171\u8bc6\u673a\u5236\uff0c\u8fc7\u53bb\u5df2\u53d7\u5230\u653b\u51fb\uff0c\u5bf9TelChain\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\u5f80\u5f80\u6709\u66f4\u591a\u7684\u95ee\u9898\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 Rinkeby \u6d4b\u8bd5\u94fe\u7684 Rinkeby Crypto Fauce \u8bf7\u6c42TelChain\u5e01\uff0c\u5177\u4f53\u600e\u4e48\u505a\u53ef\u4ee5\u770b\u8fd9\u91cc https://www.rinkeby.io/ \u3002 \u6709\u5173\u5982\u4f55\u8bf7\u6c42 Kovan \u6d4b\u8bd5\u94fe\u7684\u7ec6\u8282\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 \u5982\u679c\u4f60\u9700\u8981\u5728 Ropsten \u4e0a\u7684\u5f97\u5230\u4e00\u4e9b\u79ef\u5206\uff0c\u5c06\u4f60\u7684\u94b1\u5305\u5730\u5740\u7684\u6d88\u606f\u53d1\u5e03\u5230 bifj gitter channel \uff0c\u7136\u540e\u4f1a\u53d1\u9001\u4e00\u4e9b\u7ed9\u4f60\u3002 4.\u5728testnet\u6d4b\u8bd5\u94fe\u6216\u8005\u79c1\u6709\u94fe\u4e0a\u6316\u6398 \u5728ethereumTelChain\u6d4b\u8bd5\u94fe testnet \u4e2d\uff0c\u6316\u6398\u96be\u5ea6\u4f4e\u4e8e\u516c\u6709\u94fe mainnet \u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u7528\u666e\u901a\u7684CPU\uff0c\u6bd4\u5982\u4f60\u7684\u7b14\u8bb0\u672c\u7535\u8111\u6765\u6316\u6398\u65b0\u7684\u79ef\u5206\u3002\u4f60\u9700\u8981\u505a\u7684\u662f\u8fd0\u884c\u4e00\u4e2aTelChain\u5ba2\u6237\u7aef\uff0c\u4f8b\u5982 geth \u6216 Parity \uff0c\u5f00\u59cb\u505a\u4e00\u4e9b\u50a8\u5907\u3002\u8fdb\u4e00\u6b65\u7684\u8d44\u6599\u53ef\u5728\u4ed6\u4eec\u7684\u5b98\u65b9\u7f51\u7ad9\u4e0a\u83b7\u5f97\u3002 geth \uff1a https://github.com/ethereum/go-ethereum/wiki/Mining Parity : https://github.com/paritytech/parity/wiki/Mining \u4e00\u65e6\u4f60\u5f00\u91c7\u4e86\u4e00\u4e9b\u79ef\u5206\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528TelChain\u533a\u5757\u94fe\u4e86\u3002 \u7136\u800c\uff0c\u5982\u4e0a\u6240\u8ff0\uff0c\u4f7f\u7528 Kovan \u6216\u8005 Rinkeby \u6d4b\u8bd5\u7f51\u7edc\u66f4\u7b80\u5355\u4e9b\u3002 5.gas \u5f53\u5728BifereumTelChain\u53d1\u751f\u4ea4\u6613\u65f6\uff0c\u5fc5\u987b\u4e3a\u6267\u884c\u8be5\u4ea4\u6613\u7684\u5ba2\u6237\u7aef\u652f\u4ed8\u4ea4\u6613\u6210\u672c\uff0c\u5c06\u8be5\u4ea4\u6613\u7684\u8f93\u51fa\u63d0\u4ea4\u5230TelChain\u533a\u5757\u94feBifereum blockchain\u3002 \u6b64\u6210\u672c\u662f\u901a\u8fc7gas\u6765\u6d4b\u91cf\u7684\uff0c\u5176\u4e2dgas\u662f\u7528\u4e8e\u5728TelChain\u865a\u62df\u673a\u4e2d\u6267\u884c\u4ea4\u6613\u6307\u4ee4\u7684\u6570\u91cf\u3002\u8bf7\u53c2\u9605 \u5b98\u65b9\u6587\u6863 \u4ee5\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002 \u5f53\u4f60\u4f7f\u7528TelChain\u5ba2\u6237\u7aef\u65f6\uff0c\u8fd9\u610f\u5473\u7740\uff0c\u6709\u4e24\u4e2a\u53c2\u6570\u7528\u6765\u6307\u793a\u4f60\u5e0c\u671b\u82b1\u8d39\u591a\u5c11\u79ef\u5206\u6765\u5b8c\u6210\u4f20\u8f93\uff1a gas price \uff1a\u6c14\u4f53\u4ef7\u683c\uff0c\u8fd9\u662f\u6bcf\u5355\u4f4dgas\u4e2d\u79ef\u5206\u7684\u6d88\u8017\u91cf\u3002go-sdk\u4f7f\u7528\u7684\u9ed8\u8ba4\u4ef7\u683c\u4e3a22000000000 wei(22\u00d710-8 Bifer)\u3002\u8fd9\u662f\u5728 \u4ea4\u6613\u7ba1\u7406 \u4e2d\u5b9a\u4e49\u7684\u3002 gas limit\uff1a\u6c14\u4f53\u6700\u5927\u91cf\uff0c\u8fd9\u662f\u4f60\u613f\u610f\u5728\u4ea4\u6613\u6267\u884c\u4e0a\u82b1\u8d39\u7684gas\u7684\u6700\u5927\u603b\u91cf\u3002\u5355\u4e2a\u4ea4\u6613\u5728\u4e00\u4e2aTelChain\u533a\u5757\u4e2d\u6709\u591a\u5927\u7684\u4e0a\u9650\uff0c\u901a\u5e38\u5c06\u8be5\u503c\u9650\u5236\u4e3a\u5c0f\u4e8e6700000\u3002\u5f53\u524d\u7684gas\u9650\u5236\u5728\u8fd9\u91cc\u67e5 https://ethstats.net/ \u3002 \u8fd9\u4e24\u4e2a\u53c2\u6570\u5171\u540c\u51b3\u5b9a\u4e86\u4f60\u613f\u610f\u82b1\u8d39\u5728\u4ea4\u6613\u6210\u672c\u4e0a\u7684\u6700\u5927\u91cf\u7684\u79ef\u5206Bifer\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u82b1\u8d39\u7684gas\u4e0d\u4f1a\u8d85\u8fc7 gas price * gas limit \u3002gas\u4ef7\u683c\u4e5f\u4f1a\u5f71\u54cd\u4ea4\u6613\u53d1\u751f\u7684\u901f\u5ea6\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5176\u4ed6\u4ea4\u6613\u662f\u5426\u80fd\u4e3a\u77ff\u5de5\u63d0\u4f9b\u66f4\u6709\u5229\u7684gas\u4ef7\u683c\u3002 \u4f60\u53ef\u80fd\u9700\u8981\u8c03\u6574\u8fd9\u4e9b\u53c2\u6570\u4ee5\u786e\u4fdd\u4ea4\u6613\u80fd\u53ca\u65f6\u8fdb\u884c\u3002 6.\u4ea4\u6613\u673a\u5236 \u5f53\u4f60\u7528\u4e00\u4e9b\u79ef\u5206Bifer\u521b\u5efa\u4e86\u4e00\u4e2a\u6709\u6548\u7684\u5e10\u6237\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e24\u79cd\u673a\u5236\u6765\u4e0eTelChain\u8fdb\u884c\u4ea4\u6613\u3002 \u901a\u8fc7TelChainethereum\u5ba2\u6237\u7aef\u8fdb\u884c\u8ba4\u8bc1\u7b7e\u540d\u4ea4\u6613 \u79bb\u7ebf\u4ea4\u6613\u7b7e\u540d\u8ba4\u8bc1 \u8fd9\u4e24\u79cd\u673a\u5236\u90fd\u662fgo-sdk\u6240\u652f\u6301\u7684\u3002 7.\u901a\u8fc7\u5ba2\u6237\u7aef\u8fdb\u884c\u8ba4\u8bc1\u7b7e\u540d\u4ea4\u6613 \u4e3a\u4e86\u901a\u8fc7TelChain\u5ba2\u6237\u7aef\u8fdb\u884c\u4ea4\u6613\uff0c\u9996\u5148\u9700\u8981\u786e\u4fdd\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u5ba2\u6237\u7aef\u77e5\u9053\u4f60\u7684\u94b1\u5305\u5730\u5740\u3002\u6700\u597d\u662f\u8fd0\u884c\u81ea\u5df1\u7684TelChain\u5ba2\u6237\u7aef\uff0c\u6bd4\u5982 geth / Parity \uff0c\u4ee5\u4fbf\u53ef\u4ee5\u66f4\u65b9\u4fbf\u7684\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4e00\u65e6\u4f60\u6709\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fd0\u884c\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2aTelChain\u94b1\u5305\uff0c\u901a\u8fc7\uff1a geth Wiki \u5305\u542b\u4e86geth\u652f\u6301\u7684\u826f\u597d\u8fd0\u884c\u7684\u4e0d\u540c\u673a\u5236\uff0c\u4f8b\u5982\u5bfc\u5165\u79c1\u6709\u5bc6\u94a5\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7\u63a7\u5236\u53f0\u521b\u5efa\u65b0\u7684TelChain\u5e10\u6237\u3002 \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5ba2\u6237\u7aef\u4f7f\u7528JSON-RPC\u7ba1\u7406\u547d\u4ee4\uff0c\u4f8b\u5982\u7528 personal_newAccount \u4e3a geth / Parity \u521b\u5efa\u65b0TelChain\u8d26\u6237\u3002 \u901a\u8fc7\u521b\u5efa\u4f60\u7684\u94b1\u5305\u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7go-sdk\u6253\u5f00\u5e10\u6237\uff0c\u9996\u5148\u521b\u5efa\u652f\u6301 geth / Parity \u7ba1\u7406\u547d\u4ee4\u7684go-sdk\u5b9e\u4f8b\uff1a //Admin bifj = Admin.build(new HttpService()); var connection = newPersonal(providers.NewHTTPProvider(resources.IP00+\":\"+strconv.FormatUint(resources.Port, 10), 10, false)) \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u89e3\u9501\u5e10\u6237\uff0c\u5e76\u5982\u679c\u662f\u6210\u529f\u7684\uff0c\u5c31\u53ef\u4ee5\u53d1\u9001\u4e00\u4e2a\u4ea4\u6613\uff1a PersonalUnlockAccount personalUnlockAccount = gbif.personalUnlockAccount(\"0x000...\", \"a password\").send(); if (personalUnlockAccount.accountUnlocked()) { // send a transaction } func TestPersonalUnLockAccount(t *testing.T) { var connection = newPersonal(providers.NewHTTPProvider(resources.IP00+\":\"+strconv.FormatUint(resources.Port, 10), 10, false)) for _, test := range []struct { address string password string duration uint64 }{ {\"did:bid:ZFT4Y87Xdg83GEDDbiNknHLWs3Hfq58\", \"node\", 50}, } { res, err := connection.personalUnLockAccount(test.address, test.password, test.duration) if err != nil { t.Logf(\"error is %s \", err) } t.Log(res) } } Transaction transaction = Transaction.createContractTransaction( <from address>, <nonce>, BigInteger.valueOf(<gas price>), // we use default gas limit \"0x...<smart contract code to execute>\" ); org.gbif.protocol.core.methods.response.coreSendTransaction transactionResponse = parity.coreSendTransaction(ethSendTransaction) .send(); String transactionHash = transactionResponse.getTransactionHash(); // poll for transaction response via org.gbif.protocol.Gbif.coreGetTransactionReceipt(<txhash>) </txhash></smart></gas></nonce></from> func TestCoreSendTransactionInteractContract(t *testing.T) { // \u5408\u7ea6\u90e8\u7f72 // txHash := ballotDeploy(t) // txHash is 0x8e17880962519fa1421f1eea19a3503290758db10ce37524239030b9b7aa17c3 // Contract Address: did:bid:qwer:sfjGbVtUc3RNBNhMdPBJXrmRN2tzTCH8 // // \u5408\u7ea6\u4ea4\u4e92 \u67e5\u8be2 call \u65b9\u6cd5 // ballotCallWinnerName(t) // // \u5408\u7ea6\u4ea4\u4e92 \u4ea4\u6613 send \u65b9\u6cd5 // ballotSend(t) // // call voters ballotCallVoters(t) } 8.\u79bb\u7ebf\u4ea4\u6613\u7b7e\u540d\u8ba4\u8bc1 \u5982\u679c\u4f60\u4e0d\u60f3\u7ba1\u7406\u81ea\u5df1\u7684TelChain\u5ba2\u6237\u7aef\uff0c\u6216\u8005\u4e0d\u60f3\u5411TelChain\u5ba2\u6237\u7aef\u63d0\u4f9b\u8bf8\u5982\u5bc6\u7801\u4e4b\u7c7b\u7684\u94b1\u5305\u8be6\u7ec6\u4fe1\u606f\uff0c\u90a3\u4e48\u5c31\u901a\u8fc7\u79bb\u7ebf\u4ea4\u6613\u8ba4\u8bc1\u7b7e\u540d\u3002 \u79bb\u7ebf\u4ea4\u6613\u7b7e\u540d\u8ba4\u8bc1\u5141\u8bb8\u4f60\u5728go-sdk\u4e2d\u4f7f\u7528\u4f60\u7684TelChain\u94b1\u5305\u7b7e\u7f72\u4ea4\u6613\uff0c\u5141\u8bb8\u4f60\u5b8c\u5168\u63a7\u5236\u4f60\u7684\u79c1\u6709\u51ed\u636e\u3002\u7136\u540e\uff0c\u79bb\u7ebf\u521b\u5efa\u7684\u4ea4\u6613\u53ef\u4ee5\u88ab\u53d1\u9001\u5230\u7f51\u7edc\u4e0a\u7684\u4efb\u4f55TelChain\u5ba2\u6237\u7aef\uff0c\u53ea\u8981\u5b83\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4ea4\u6613\uff0c\u5b83\u4f1a\u5c06\u4ea4\u6613\u4f20\u64ad\u5230\u5176\u4ed6\u8282\u70b9\u3002 \u5982\u679c\u9700\u8981\uff0c\u8fd8\u53ef\u4ee5\u6267\u884c\u8fdb\u7a0b\u5916\u4ea4\u6613\u7b7e\u540d\u8ba4\u8bc1\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 ECKeyPair \u7684 sign \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002 9.\u521b\u5efa\u548c\u4f7f\u7528\u94b1\u5305\u6587\u4ef6 \u4e3a\u4e86\u79bb\u7ebf\u8131\u673a\u4ea4\u6613\uff0c\u4f60\u9700\u8981\u6709\u4f60\u7684\u94b1\u5305\u6587\u4ef6\u6216\u4e0e\u79c1\u5bc6\u94b1\u5305/\u8d26\u6237\u76f8\u5173\u7684\u516c\u5171\u548c\u79c1\u4eba\u5bc6\u94a5\u3002 go-sdk\u80fd\u591f\u4e3a\u4f60\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5b89\u5168\u7684TelChain\u94b1\u5305\u6587\u4ef6Bifereum wallet file\uff0c\u6216\u8005\u4e0e\u4e5f\u53ef\u4ee5\u901a\u8fc7\u79c1\u94a5\u6765\u548c\u73b0\u6709\u7684\u94b1\u5305\u6587\u4ef6\u4e00\u8d77\u5de5\u4f5c\u3002 \u521b\u5efa\u65b0\u7684\u94b1\u5305\u6587\u4ef6: String fileName = WalletUtils.generateNewWalletFile( \"your password\", new File(\"/path/to/destination\")); \u52a0\u8f7d\u51ed\u636e\u4ece\u94b1\u5305\u6587\u4ef6: Credentials credentials = WalletUtils.loadCredentials( \"your password\", \"/path/to/walletfile\"); \u7136\u540e\u8fd9\u4e9b\u51ed\u636e\u4f1a\u88ab\u7528\u6765\u7b7e\u7f72\u4ea4\u6613\uff0c\u8bf7\u53c2\u9605go-sdk\u5b89\u5168\u5b58\u50a8\u5b9a\u4e49\u94b1\u5305\u6587\u4ef6\u89c4\u8303 Web3 Secret Storage Definition 10.\u7b7e\u7f72\u4ee5\u592a\u574a\u4ea4\u6613 \u8981\u4f7f\u8131\u673a\u7b7e\u540d\u4ea4\u6613\u5f97\u5230\u7b7e\u7f72\uff0c\u9700\u8981\u8bbe\u5b9a\u4e00\u4e2a RawTransaction \u7c7b\u578b\u3002 RawTransaction \u7c7b\u4f3c\u4e8e\u524d\u9762\u63d0\u5230\u7684 Transaction \u7c7b\u578b\uff0c\u4f46\u662f\u5b83\u4e0d\u9700\u8981\u901a\u8fc7\u5177\u4f53\u7684\u8d26\u53f7\u5730\u5740\u6765\u8bf7\u6c42\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4ece\u7b7e\u540d\u4e2d\u63a8\u65ad\u51fa\u6765\u3002 \u4e3a\u4e86\u521b\u5efa\u548c\u7b7e\u7f72\u539f\u751f\u4ea4\u6613\uff0c\u4ea4\u6613\u7684\u987a\u5e8f\u5982\u4e0b\uff1a 1.\u786e\u5b9a\u4ea4\u6613\u53d1\u8d77\u8005\u5e10\u6237\u7684\u4e0b\u4e00\u4e2a\u53ef\u7528\u968f\u673a\u6570 nonce 2.\u521b\u5efa RawTransaction \u5bf9\u8c61 3.\u4f7f\u7528\u9012\u5f52\u957f\u5ea6\u524d\u7f00\u7f16\u7801(RLP\u5373 Recursive Length Prefix )\u5bf9 RawTransaction \u5bf9\u8c61\u8fdb\u884c\u7f16\u7801 4.\u7b7e\u7f72 RawTransaction \u5bf9\u8c61 5.\u5c06 RawTransaction \u5bf9\u8c61\u53d1\u9001\u5230\u8282\u70b9\u8fdb\u884c\u5904\u7406 nonce \u662f\u4e00\u4e2a\u4e0d\u65ad\u589e\u957f\u7684\u6570\u503c\uff0c\u7528\u6765\u552f\u4e00\u5730\u6807\u8bc6\u4ea4\u6613\u3002\u4e00\u4e2a nonce \u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u76f4\u5230\u4ea4\u6613\u88ab\u6316\u6398\u5b8c\u6210\uff0c\u53ef\u4ee5\u4ee5\u76f8\u540c\u7684\u968f\u673a\u6570\u53d1\u9001\u4ea4\u6613\u7684\u591a\u4e2a\u7248\u672c\uff0c\u4f46\u662f\u4e00\u65e6\u5176\u4e2d\u4e00\u4e2a\u88ab\u6316\u6398\u5b8c\u6210\uff0c\u5176\u4ed6\u540e\u7eed\u63d0\u4ea4\u7684\u90fd\u5c06\u88ab\u62d2\u7edd\u3002 \u4e00\u65e6\u83b7\u5f97\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684 nonce \uff0c\u8be5\u503c\u5c31\u53ef\u4ee5\u7528\u6765\u521b\u5efa transaction \u5bf9\u8c61\uff1a RawTransaction rawTransaction = RawTransaction.createBiferTransaction( nonce, <gas price>, <gas limit>, <toaddress>, <value>); </value></toaddress></gas></gas> \u7136\u540e\u53ef\u4ee5\u5bf9\u4ea4\u6613\u8fdb\u884c\u7b7e\u540d\u548c\u7f16\u7801\uff1a byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, <credentials>); String hexValue = Numeric.toHexString(signedMessage); </credentials> CorSendTransaction coreSendTransaction = gbif.coreSendRawTransaction(hexValue).sendAsync().get(); String transactionHash = coreSendTransaction.getTransactionHash(); // poll for transaction response via org.gbif.protocol.Gbif.coreGetTransactionReceipt(<txhash>) </txhash> func TestCoreSendRawTransaction(t *testing.T) { var connection = bif.NewBif(providers.NewHTTPProvider(resources.IP00+\":\"+strconv.FormatUint(resources.Port, 10), 10, false)) sender := \"did:bid:qwer:sf25XGBQU8E8wGFo9wGKo95jUgtYPM24Y\" nonce, err := connection.Core.GetTransactionCount(sender, block.LATEST) if err != nil { t.Error(err) t.FailNow() } priKey := \"e41219552564c956edeb0fa782c7760a6f5ade504768b3570c68dc0459a7889a\" recipientStr := \"did:bid:qwer:zftAgNtnQzLMGJHKPMdn9quPvuikNWUZ\" chainId, err := connection.Core.GetChainId() if err != nil { t.Error(err) t.FailNow() } var recipient utils.Address recipient = utils.StringToAddress(recipientStr) tx := &account.SignTxParams{ Recipient: &recipient, Nonce: nonce, GasPrice: big.NewInt(2000000), GasLimit: uint64(41000), Amount: big.NewInt(50000000000), Payload: nil, ChainId: chainId, } res, err := account.SignTransaction(tx, priKey, false) if err != nil { t.Error(err) t.FailNow() } txIDRaw, err := connection.Core.SendRawTransaction(hexutil.Encode(res.Raw)) if err != nil { t.Error(err) t.FailNow() } t.Log(txIDRaw) } 11.\u4ea4\u6613\u968f\u673a\u6570nonce nonce \u662f\u4e00\u4e2a\u4e0d\u65ad\u589e\u957f\u7684\u6570\u503c\uff0c\u7528\u6765\u552f\u4e00\u5730\u6807\u8bc6\u4ea4\u6613\u3002\u4e00\u4e2a nonce \u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u76f4\u5230\u4ea4\u6613\u88ab\u6316\u6398\u5b8c\u6210\uff0c\u53ef\u4ee5\u4ee5\u76f8\u540c\u7684\u968f\u673a\u6570\u53d1\u9001\u4ea4\u6613\u7684\u591a\u4e2a\u7248\u672c\uff0c\u4f46\u662f\u4e00\u65e6\u5176\u4e2d\u4e00\u4e2a\u88ab\u6316\u6398\u5b8c\u6210\uff0c\u5176\u4ed6\u540e\u7eed\u63d0\u4ea4\u7684\u90fd\u5c06\u88ab\u62d2\u7edd\u3002 \u53ef\u4ee5\u901a\u8fc7 eth_getTransactionCount \u65b9\u6cd5\u83b7\u5f97\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684 nonce \uff1a CorGetTransactionCount coreGetTransactionCount = gbif.coreGetTransactionCount( address, DefaultBlockParameterName.LATEST).sendAsync().get(); BigInteger nonce = coreGetTransactionCount.getTransactionCount(); func TestCoreGetTransactionCount(t *testing.T) { var connection = bif.NewBif(providers.NewHTTPProvider(resources.IP00+\":\"+strconv.FormatUint(resources.Port, 10), 10, false)) generator, _ := connection.Core.GetGenerator() count, err := connection.Core.GetTransactionCount(generator, block.LATEST) if err != nil { t.Error(err) t.FailNow() } countTwo, err := connection.Core.GetTransactionCount(generator, block.LATEST) if err != nil { t.Error(err) t.FailNow() } // count should not change if count.Cmp(countTwo) != 0 { t.Errorf(\"Count incorrect, changed between calls\") t.FailNow() } } \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 nonce \u521b\u5efa\u4f60\u7684\u4ea4\u6613\u5bf9\u8c61\uff1a RawTransaction rawTransaction = RawTransaction.createBiferTransaction( nonce, <gas price>, <gas limit>, <toaddress>, <value>); </value></toaddress></gas></gas> func TestCoreSendRawTransaction(t *testing.T) { var connection = bif.NewBif(providers.NewHTTPProvider(resources.IP00+\":\"+strconv.FormatUint(resources.Port, 10), 10, false)) sender := \"did:bid:qwer:sf25XGBQU8E8wGFo9wGKo95jUgtYPM24Y\" nonce, err := connection.Core.GetTransactionCount(sender, block.LATEST) if err != nil { t.Error(err) t.FailNow() } priKey := \"e41219552564c956edeb0fa782c7760a6f5ade504768b3570c68dc0459a7889a\" recipientStr := \"did:bid:qwer:zftAgNtnQzLMGJHKPMdn9quPvuikNWUZ\" chainId, err := connection.Core.GetChainId() if err != nil { t.Error(err) t.FailNow() } var recipient utils.Address recipient = utils.StringToAddress(recipientStr) tx := &account.SignTxParams{ Recipient: &recipient, Nonce: nonce, GasPrice: big.NewInt(2000000), GasLimit: uint64(41000), Amount: big.NewInt(50000000000), Payload: nil, ChainId: chainId, } res, err := account.SignTransaction(tx, priKey, false) if err != nil { t.Error(err) t.FailNow() } txIDRaw, err := connection.Core.SendRawTransaction(hexutil.Encode(res.Raw)) if err != nil { t.Error(err) t.FailNow() } t.Log(txIDRaw) } 12.\u4ea4\u6613\u7c7b\u578b go-sdk\u4e2d\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u4ea4\u6613\u90fd\u4f7f\u7528 Transaction \u548c RawTransaction \u5bf9\u8c61\u3002\u5173\u952e\u7684\u533a\u522b\u662f\u4ea4\u6613\u5bf9\u8c61\u5fc5\u987b\u59cb\u7ec8\u6709\u4e00\u4e2a\u5730\u5740\uff0c\u4ee5\u4fbf\u5904\u7406 eth_sendTransaction \u8bf7\u6c42\u7684TelChain\u5ba2\u6237\u7aef\u77e5\u9053\u8981\u4f7f\u7528\u54ea\u4e2a\u94b1\u5305\u6765\u4ee3\u8868\u6d88\u606f\u53d1\u9001\u8005\u5e76\u53d1\u9001\u8be5\u4ea4\u6613\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u5bf9\u4e8e\u79bb\u7ebf\u7b7e\u540d\u8ba4\u8bc1\u7b7e\u7f72\u7684\u539f\u59cb\u4ea4\u6613\u800c\u8a00\uff0c\u8fd9\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u63a5\u4e0b\u6765\u7684\u90e8\u5206\u6982\u8ff0\u4e86\u4e0d\u540c\u4ea4\u6613\u7c7b\u578b\u6240\u9700\u7684\u5173\u952e\u4ea4\u6613\u5c5e\u6027\u3002\u4e0b\u5217\u5c5e\u6027\u5bf9\u6240\u6709\u4eba\u90fd\u662f\u4e0d\u53d8\uff1a Gas price \u5929\u7136\u6c14\u6c14\u4f53\u4ef7\u683c Gas limit \u5929\u7136\u6c14\u6c14\u4f53\u9650\u5236 Nonce \u968f\u673a\u6570 from \u53d1\u9001\u5730\u5740 Transaction \u548c RawTransaction \u5bf9\u8c61\u5728\u6240\u6709\u540e\u7eed\u793a\u4f8b\u4e2d\u90fd\u53ef\u4e92\u6362\u4f7f\u7528\u3002 13.\u79ef\u5206\u4ece\u4e00\u65b9\u4ea4\u6613\u5230\u53e6\u4e00\u65b9 \u5728\u53cc\u65b9\u4e4b\u95f4\u53d1\u9001\u79ef\u5206Bifer\u9700\u8981\u4ea4\u6613\u5bf9\u8c61\u7684\u6700\u5c11\u91cf\u7684\u4fe1\u606f\uff1a to \uff1a\u76ee\u7684\u5730\u94b1\u5305\u5730\u5740 value\uff1a\u4ef7\u503c\uff0c\u5e0c\u671b\u53d1\u9001\u5230\u76ee\u7684\u5730\u7684\u79ef\u5206\u6570\u91cf BigInteger value = Convert.toWei(\"1.0\", Convert.Unit.coreER).toBigInteger(); RawTransaction rawTransaction = RawTransaction.createBiferTransaction( <nonce>, <gas price>, <gas limit>, <toaddress>, value); // send... </toaddress></gas></gas></nonce> \u4f46\u662f\uff0c\u5efa\u8bae\u4f60\u4f7f\u7528 TransferClass \u6765\u53d1\u9001\u79ef\u5206Bifer\uff0c\u5b83\u8d1f\u8d23\u5bf9 nonce \u7ba1\u7406\u548c\u901a\u8fc7\u4e0d\u65ad\u7684\u8f6e\u8be2\u4e3a\u4f60\u63d0\u4f9b\u54cd\u5e94\uff1a Gbif gbif = Gbif.build(new HttpService()); // defaults to http://localhost:8545/ Credentials credentials = WalletUtils.loadCredentials(\"password\", \"/path/to/walletfile\"); TransactionReceipt transactionReceipt = Transfer.sendFunds( gbif, credentials, \"0x<address>|<ensname>\", BigDecimal.valueOf(1.0), Convert.Unit.coreER).send(); </ensname></address> 14.\u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u6253\u5305\u5668 \u5f53\u4f7f\u7528\u4e0b\u9762\u5217\u51fa\u7684\u667a\u80fd\u5408\u7ea6\u6253\u5305\u5668\u65f6\uff0c\u5c06\u4e0d\u5f97\u4e0d\u624b\u52a8\u6267\u884c\u4eceSolidity\u5230\u672c\u673ago\u7c7b\u578b\u7684\u6240\u6709\u8f6c\u6362\u3002\u4f7f\u7528 Solidity smart contract wrappers \u662f\u975e\u5e38\u6709\u6548\u7684\uff0c\u5b83\u8d1f\u8d23\u6240\u6709\u7684\u4ee3\u7801\u751f\u6210\u548c\u8f6c\u6362\u3002 15.\u521b\u5efa\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6 \u8981\u90e8\u7f72\u65b0\u7684\u667a\u80fd\u5408\u7ea6\uff0c\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u5c5e\u6027\uff1a value \uff1a\u5728\u667a\u80fd\u5408\u7ea6\u4e2d\u5e0c\u671b\u5b58\u653e\u7684TelChainBifer\u91cf(\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u9ed8\u8ba4\u4e3a\u96f6) data \uff1a\u5341\u516d\u8fdb\u5236\u683c\u5f0f\u5316\u3001\u7f16\u8bd1\u7684\u667a\u80fd\u5408\u7ea6\u521b\u5efa\u4ee3\u7801 // using a raw transaction RawTransaction rawTransaction = RawTransaction.createContractTransaction( <nonce>, <gasprice>, <gaslimit>, <value>, \"0x <compiled smart contract code>\"); // send... // get contract address CorGetTransactionReceipt transactionReceipt = gbif.coreGetTransactionReceipt(transactionHash).send(); if (transactionReceipt.getTransactionReceipt.isPresent()) { String contractAddress = transactionReceipt.get().getContractAddress(); } else { // try again } </compiled></value></gaslimit></gasprice></nonce> func TestCoreGetTransactionReceipt(t *testing.T) { var connection = bif.NewBif(providers.NewHTTPProvider(resources.IP00+\":\"+strconv.FormatUint(resources.Port, 10), 10, false)) sender := \"did:bid:qwer:sf25XGBQU8E8wGFo9wGKo95jUgtYPM24Y\" priKey := \"e41219552564c956edeb0fa782c7760a6f5ade504768b3570c68dc0459a7889a\" recipient := \"did:bid:qwer:zftAgNtnQzLMGJHKPMdn9quPvuikNWUZ\" txID, err := signAndSingTx(connection, recipient, sender, priKey, false) if err != nil { t.Error(err) t.FailNow() } var receipt *dto.TransactionReceipt for receipt == nil { time.Sleep(time.Second) receipt, err = connection.Core.GetTransactionReceipt(txID) } if err != nil { t.Error(err) t.FailNow() } if len(receipt.ContractAddress) == 0 { t.Log(\"No contract address\") } if len(receipt.TransactionHash) == 0 { t.Error(\"No transaction hash\") t.FailNow() } if receipt.TransactionIndex == nil { t.Error(\"No transaction index\") t.FailNow() } if len(receipt.BlockHash) == 0 { t.Error(\"No block hash\") t.FailNow() } if receipt.BlockNumber == nil || receipt.BlockNumber.Cmp(big.NewInt(0)) == 0 { t.Error(\"No block number\") t.FailNow() } if receipt.Logs == nil || len(receipt.Logs) == 0 { t.Log(\"No logs\") } if !receipt.Status { t.Error(\"False status\") t.FailNow() } } \u5982\u679c\u667a\u80fd\u5408\u7ea6\u5305\u542b\u6784\u9020\u51fd\u6570\uff0c\u5219\u5fc5\u987b\u5bf9\u5173\u8054\u7684\u6784\u9020\u51fd\u6570\u5b57\u6bb5\u503c\u8fdb\u884c\u7f16\u7801\uff0c\u5e76\u5c06\u5176\u9644\u52a0\u5230\u7f16\u8bd1\u7684\u667a\u80fd\u5408\u7ea6\u4ee3\u7801\u4e2d compiled smart contract code \uff1a String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.asList(new Type(value), ...)); // using a regular transaction Transaction transaction = Transaction.createContractTransaction( <fromaddress>, <nonce>, <gasprice>, <gaslimit>, <value>, \"0x <compiled smart contract code>\" + encodedConstructor); // send... </compiled></value></gaslimit></gasprice></nonce></fromaddress> 16.\u4e0e\u667a\u80fd\u5408\u7ea6\u4ea4\u6613 \u8981\u4e0e\u73b0\u6709\u7684\u667a\u80fd\u5408\u7ea6\u8fdb\u884c\u4ea4\u6613\uff0c\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u5c5e\u6027\uff1a to\uff1a\u667a\u80fd\u5408\u540c\u5730\u5740 value\uff1a\u5728\u667a\u80fd\u5408\u7ea6\u4e2d\u4f60\u5e0c\u671b\u5b58\u653e\u7684\u79ef\u5206Bifer\u91cf(\u5982\u679c\u667a\u80fd\u5408\u7ea6\u63a5\u53d7\u79ef\u5206Bifer\u7684\u8bdd) data: \u5df2\u7f16\u7801\u7684\u51fd\u6570\u9009\u62e9\u5668\u548c\u81ea\u53d8\u91cf\u53c2\u6570 go-sdk\u8d1f\u8d23\u51fd\u6570\u7f16\u7801\uff0c\u6709\u5173\u5b9e\u73b0\u7684\u8fdb\u4e00\u6b65\u7ec6\u8282\uff0c\u8bf7\u53c2\u9605\u5e94\u7528\u7a0b\u5e8f\u4e8c\u8fdb\u5236\u63a5\u53e3\u90e8\u5206 Application Binary Interface \u3002 Function function = new Function<>( \"functionName\", // function we're calling Arrays.asList(new Type(value), ...), // Parameters to pass as Solidity Types Arrays.asList(new TypeReference<type>() {}, ...)); String encodedFunction = FunctionEncoder.encode(function) Transaction transaction = Transaction.createFunctionCallTransaction( <from>, <gasprice>, <gaslimit>, contractAddress, <funds>, encodedFunction); org.gbif.protocol.core.methods.response.coreSendTransaction transactionResponse = gbif.coreSendTransaction(transaction).sendAsync().get(); String transactionHash = transactionResponse.getTransactionHash(); // wait for response using CoreGetTransactionReceipt... </funds></gaslimit></gasprice></from></type> \u65e0\u8bba\u6d88\u606f\u7b7e\u540d\u7684\u8fd4\u56de\u7c7b\u578b\u5982\u4f55\uff0c\u90fd\u4e0d\u53ef\u80fd\u4ece\u4e8b\u52a1\u6027\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c\u3002\u4f46\u662f\uff0c\u4f7f\u7528\u8fc7\u6ee4\u5668\u6355\u83b7\u51fd\u6570\u8fd4\u56de\u7684\u503c\u662f\u53ef\u80fd\u7684\u3002\u8be6\u60c5\u8bf7\u53c2\u9605\u8fc7\u6ee4\u5668\u548c\u4e8b\u4ef6\u90e8\u5206\u3002 17.\u67e5\u8be2\u667a\u80fd\u5408\u7ea6\u72b6\u6001 \u8fd9\u79cd\u529f\u80fd\u662f\u7531 eth_call \u901a\u8fc7 JSON-RPC \u8c03\u7528\u6765\u5b9e\u73b0\u7684\u3002 eth_call\u5141\u8bb8\u4f60\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u4e0a\u7684\u65b9\u6cd5\u6765\u67e5\u8be2\u67d0\u4e2a\u503c\u3002\u6b64\u51fd\u6570\u6ca1\u6709\u5173\u8054\u4ea4\u6613\u6210\u672c\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u4e0d\u6539\u53d8\u4efb\u4f55\u667a\u80fd\u5408\u7ea6\u65b9\u6cd5\u7684\u72b6\u6001\uff0c\u5b83\u53ea\u8fd4\u56de\u5b83\u4eec\u7684\u503c\uff1a Function function = new Function<>( \"functionName\", Arrays.asList(new Type(value)), // Solidity Types in smart contract functions Arrays.asList(new TypeReference<type>() {}, ...)); String encodedFunction = FunctionEncoder.encode(function) org.gbif.protocol.core.methods.response.coreCall response = gbif.coreCall( Transaction.createCorCallTransaction(<from>, contractAddress, encodedFunction), DefaultBlockParameterName.LATEST) .sendAsync().get(); List<type> someTypes = FunctionReturnDecoder.decode( response.getValue(), function.getOutputParameters()); </type></from></type> \u6ce8\u610f \uff1a\u5982\u679c\u4e00\u4e2a\u65e0\u6548\u7684\u51fd\u6570\u8c03\u7528\u88ab\u6267\u884c\uff0c\u6216\u8005\u5f97\u5230\u4e00\u4e2a\u7a7anull\u8fd4\u56de\u7ed3\u679c\u65f6\uff0c\u8fd4\u56de\u503c\u5c06\u662f\u4e00\u4e2a Collections.emptyList \u5b9e\u4f8b\u3002","title":"\u4ea4\u6613"},{"location":"%E4%BA%A4%E6%98%93/#_1","text":"","title":"\u4ea4\u6613"},{"location":"%E4%BA%A4%E6%98%93/#1","text":"\u4ece\u5e7f\u4e49\u4e0a\u8bb2\uff0c\u6709go-sdk\u652f\u6301\u4e09\u79cd\u7c7b\u578b\u7684TelChain\u4ea4\u6613\uff1a 1.\u79ef\u5206\u4ece\u4e00\u65b9\u4ea4\u6613\u5230\u53e6\u4e00\u65b9 2.\u521b\u5efa\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6 3.\u4e0e\u667a\u80fd\u5408\u7ea6\u4ea4\u6613 \u4e3a\u4e86\u8fdb\u884c\u8fd9\u4e9b\u4ea4\u6613\uff0c\u5fc5\u987b\u6709\u79ef\u5206(TelChain\u533a\u5757\u94fe\u7684\u4ee3\u5e01)\u5b58\u5728\u4e8e\u4ea4\u6613\u53d1\u751f\u7684TelChain\u8d26\u6237\u4e2d\u3002\u8fd9\u662f\u4e3a\u4e86\u652f\u4ed8 gas \u6210\u672c\uff0c\u8fd9\u662f\u4e3a\u652f\u4ed8\u53c2\u4e0e\u4ea4\u6613\u7684TelChain\u5ba2\u6237\u7aef\u7684\u4ea4\u6613\u6267\u884c\u6210\u672c\uff0c\u652f\u4ed8\u4e86\u8fd9\u4e2a\u6210\u672c\u5c31\u80fd\u5c06\u7ed3\u679c\u63d0\u4ea4\u5230TelChain\u533a\u5757\u94fe\u4e0a\u3002\u83b7\u5f97\u79ef\u5206\u7684\u8bf4\u660e\u4e0b\u6587\u4f1a\u8bf4\u5230\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u67e5\u8be2\u667a\u80fd\u5408\u7ea6\u7684\u72b6\u6001\u3002","title":"1.\u4ea4\u6613\u7b80\u4ecb"},{"location":"%E4%BA%A4%E6%98%93/#2ether","text":"","title":"2.\u5982\u4f55\u83b7\u5f97\u4ee5\u592a\u5e01Ether"},{"location":"%E4%BA%A4%E6%98%93/#bifer","text":"\u8981\u60f3\u83b7\u5f97\u79ef\u5206Bifer\u4f60\u6709\u4e24\u79cd\u9014\u5f84\u53ef\u4ee5\u9009\u62e9\uff1a 1.\u81ea\u5df1\u5f00\u91c7\u6316\u77ff 2.\u4ece\u522b\u4eba\u90a3\u91cc\u83b7\u53d6\u79ef\u5206 \u5728\u79c1\u6709\u94fe\u4e2d\u81ea\u5df1\u6316\u77ff\uff0c\u6216\u8005\u516c\u5171\u6d4b\u8bd5\u94fe( testnet )\u662f\u975e\u5e38\u7b80\u5355\u76f4\u63a5\u7684\u3002\u4f46\u662f\uff0c\u5728\u4e3b\u8981\u7684\u516c\u6709\u94fe( mainnet )\u4e2d\uff0c\u5b83\u9700\u8981\u5f88\u591a\u5f88\u660e\u663e\u7684\u4e13\u7528GPU\u65f6\u95f4\uff0c\u9664\u975e\u4f60\u5df2\u7ecf\u62e5\u6709\u591a\u4e2a\u4e13\u7528GPU\u7684\u77ff\u673a\uff0c\u5426\u5219\u57fa\u672c\u4e0a\u4e0d\u592a\u53ef\u884c\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528\u79c1\u6709\u94fe\uff0c\u5219\u5728\u8fd9\u4e2a \u5b98\u65b9\u6587\u6863 \u4e2d\u6709\u4e00\u4e9b\u6307\u5bfc\u3002 \u8981\u8d2d\u4e70\u79ef\u5206Bifer\uff0c\u4f60\u9700\u8981\u901a\u8fc7\u4ea4\u6613\u6240\u3002\u7531\u4e8e\u4e0d\u540c\u7684\u5730\u533a\u6709\u4e0d\u540c\u7684\u4ea4\u6613\u6240\uff0c\u4f60\u8fd8\u9700\u8981\u7814\u7a76\u81ea\u5df1\u53bb\u54ea\u513f\u5408\u9002\u3002 \u5b98\u65b9\u6587\u6863 \u4e2d\u5305\u542b\u591a\u4e2a\u4ea4\u6613\u6240\uff0c\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u53c2\u8003\u3002","title":"\u5982\u4f55\u83b7\u5f97\u79ef\u5206Bifer"},{"location":"%E4%BA%A4%E6%98%93/#3","text":"","title":"3.\u4ee5\u592a\u574a\u6d4b\u8bd5\u94fe"},{"location":"%E4%BA%A4%E6%98%93/#telchain","text":"\u9488\u5bf9BifereumTelChain\u6709\u8bb8\u591a\u4e13\u7528\u6d4b\u8bd5\u7f51\u7edc\u6216\u8005\u53eb\u6d4b\u8bd5\u94fe\uff0c\u4ed6\u4eec\u7531\u5404\u79cd\u5ba2\u6237\u7aef\u652f\u6301\u3002 1.Rinkeby\uff1a\u53ea\u652f\u6301geth\u5ba2\u6237\u7aef\u3002 2.Kovan\uff1a\u53ea\u652f\u6301Parity\u5ba2\u6237\u7aef\u3002 3.Ropsten\uff1a\u652f\u6301geth\u548cParity\u5ba2\u6237\u7aef\u3002 \u5bf9\u4e8e\u5f00\u53d1\uff0c\u5efa\u8bae\u4f60\u4f7f\u7528 Rinkeby \u6216 KoVan \u6d4b\u8bd5\u94fe\u3002\u8fd9\u662f\u56e0\u4e3a\u4ed6\u4eec\u4f7f\u7528\u7684\u5de5\u4f5c\u91cf\u8bc1\u660e POA \u5171\u8bc6\u673a\u5236\uff0c\u786e\u4fdd\u4ea4\u6613\u548c\u5757\u80fd\u591f\u4e00\u81f4\u5e76\u53ca\u65f6\u7684\u521b\u5efa\u3002 Ropsten \u6d4b\u8bd5\u94fe\uff0c\u867d\u7136\u6700\u63a5\u8fd1\u516c\u6709\u94fe( Mainnet )\uff0c\u4f46\u662f\u56e0\u4e3a\u5b83\u4f7f\u7528\u7684\u5de5\u4f5c\u91cf\u8bc1\u660e\u662f POW \u5171\u8bc6\u673a\u5236\uff0c\u8fc7\u53bb\u5df2\u53d7\u5230\u653b\u51fb\uff0c\u5bf9TelChain\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\u5f80\u5f80\u6709\u66f4\u591a\u7684\u95ee\u9898\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 Rinkeby \u6d4b\u8bd5\u94fe\u7684 Rinkeby Crypto Fauce \u8bf7\u6c42TelChain\u5e01\uff0c\u5177\u4f53\u600e\u4e48\u505a\u53ef\u4ee5\u770b\u8fd9\u91cc https://www.rinkeby.io/ \u3002 \u6709\u5173\u5982\u4f55\u8bf7\u6c42 Kovan \u6d4b\u8bd5\u94fe\u7684\u7ec6\u8282\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 \u5982\u679c\u4f60\u9700\u8981\u5728 Ropsten \u4e0a\u7684\u5f97\u5230\u4e00\u4e9b\u79ef\u5206\uff0c\u5c06\u4f60\u7684\u94b1\u5305\u5730\u5740\u7684\u6d88\u606f\u53d1\u5e03\u5230 bifj gitter channel \uff0c\u7136\u540e\u4f1a\u53d1\u9001\u4e00\u4e9b\u7ed9\u4f60\u3002","title":"TelChain\u6d4b\u8bd5\u94fe"},{"location":"%E4%BA%A4%E6%98%93/#4testnet","text":"\u5728ethereumTelChain\u6d4b\u8bd5\u94fe testnet \u4e2d\uff0c\u6316\u6398\u96be\u5ea6\u4f4e\u4e8e\u516c\u6709\u94fe mainnet \u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u7528\u666e\u901a\u7684CPU\uff0c\u6bd4\u5982\u4f60\u7684\u7b14\u8bb0\u672c\u7535\u8111\u6765\u6316\u6398\u65b0\u7684\u79ef\u5206\u3002\u4f60\u9700\u8981\u505a\u7684\u662f\u8fd0\u884c\u4e00\u4e2aTelChain\u5ba2\u6237\u7aef\uff0c\u4f8b\u5982 geth \u6216 Parity \uff0c\u5f00\u59cb\u505a\u4e00\u4e9b\u50a8\u5907\u3002\u8fdb\u4e00\u6b65\u7684\u8d44\u6599\u53ef\u5728\u4ed6\u4eec\u7684\u5b98\u65b9\u7f51\u7ad9\u4e0a\u83b7\u5f97\u3002 geth \uff1a https://github.com/ethereum/go-ethereum/wiki/Mining Parity : https://github.com/paritytech/parity/wiki/Mining \u4e00\u65e6\u4f60\u5f00\u91c7\u4e86\u4e00\u4e9b\u79ef\u5206\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528TelChain\u533a\u5757\u94fe\u4e86\u3002 \u7136\u800c\uff0c\u5982\u4e0a\u6240\u8ff0\uff0c\u4f7f\u7528 Kovan \u6216\u8005 Rinkeby \u6d4b\u8bd5\u7f51\u7edc\u66f4\u7b80\u5355\u4e9b\u3002","title":"4.\u5728testnet\u6d4b\u8bd5\u94fe\u6216\u8005\u79c1\u6709\u94fe\u4e0a\u6316\u6398"},{"location":"%E4%BA%A4%E6%98%93/#5gas","text":"\u5f53\u5728BifereumTelChain\u53d1\u751f\u4ea4\u6613\u65f6\uff0c\u5fc5\u987b\u4e3a\u6267\u884c\u8be5\u4ea4\u6613\u7684\u5ba2\u6237\u7aef\u652f\u4ed8\u4ea4\u6613\u6210\u672c\uff0c\u5c06\u8be5\u4ea4\u6613\u7684\u8f93\u51fa\u63d0\u4ea4\u5230TelChain\u533a\u5757\u94feBifereum blockchain\u3002 \u6b64\u6210\u672c\u662f\u901a\u8fc7gas\u6765\u6d4b\u91cf\u7684\uff0c\u5176\u4e2dgas\u662f\u7528\u4e8e\u5728TelChain\u865a\u62df\u673a\u4e2d\u6267\u884c\u4ea4\u6613\u6307\u4ee4\u7684\u6570\u91cf\u3002\u8bf7\u53c2\u9605 \u5b98\u65b9\u6587\u6863 \u4ee5\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002 \u5f53\u4f60\u4f7f\u7528TelChain\u5ba2\u6237\u7aef\u65f6\uff0c\u8fd9\u610f\u5473\u7740\uff0c\u6709\u4e24\u4e2a\u53c2\u6570\u7528\u6765\u6307\u793a\u4f60\u5e0c\u671b\u82b1\u8d39\u591a\u5c11\u79ef\u5206\u6765\u5b8c\u6210\u4f20\u8f93\uff1a gas price \uff1a\u6c14\u4f53\u4ef7\u683c\uff0c\u8fd9\u662f\u6bcf\u5355\u4f4dgas\u4e2d\u79ef\u5206\u7684\u6d88\u8017\u91cf\u3002go-sdk\u4f7f\u7528\u7684\u9ed8\u8ba4\u4ef7\u683c\u4e3a22000000000 wei(22\u00d710-8 Bifer)\u3002\u8fd9\u662f\u5728 \u4ea4\u6613\u7ba1\u7406 \u4e2d\u5b9a\u4e49\u7684\u3002 gas limit\uff1a\u6c14\u4f53\u6700\u5927\u91cf\uff0c\u8fd9\u662f\u4f60\u613f\u610f\u5728\u4ea4\u6613\u6267\u884c\u4e0a\u82b1\u8d39\u7684gas\u7684\u6700\u5927\u603b\u91cf\u3002\u5355\u4e2a\u4ea4\u6613\u5728\u4e00\u4e2aTelChain\u533a\u5757\u4e2d\u6709\u591a\u5927\u7684\u4e0a\u9650\uff0c\u901a\u5e38\u5c06\u8be5\u503c\u9650\u5236\u4e3a\u5c0f\u4e8e6700000\u3002\u5f53\u524d\u7684gas\u9650\u5236\u5728\u8fd9\u91cc\u67e5 https://ethstats.net/ \u3002 \u8fd9\u4e24\u4e2a\u53c2\u6570\u5171\u540c\u51b3\u5b9a\u4e86\u4f60\u613f\u610f\u82b1\u8d39\u5728\u4ea4\u6613\u6210\u672c\u4e0a\u7684\u6700\u5927\u91cf\u7684\u79ef\u5206Bifer\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u82b1\u8d39\u7684gas\u4e0d\u4f1a\u8d85\u8fc7 gas price * gas limit \u3002gas\u4ef7\u683c\u4e5f\u4f1a\u5f71\u54cd\u4ea4\u6613\u53d1\u751f\u7684\u901f\u5ea6\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5176\u4ed6\u4ea4\u6613\u662f\u5426\u80fd\u4e3a\u77ff\u5de5\u63d0\u4f9b\u66f4\u6709\u5229\u7684gas\u4ef7\u683c\u3002 \u4f60\u53ef\u80fd\u9700\u8981\u8c03\u6574\u8fd9\u4e9b\u53c2\u6570\u4ee5\u786e\u4fdd\u4ea4\u6613\u80fd\u53ca\u65f6\u8fdb\u884c\u3002","title":"5.gas"},{"location":"%E4%BA%A4%E6%98%93/#6","text":"\u5f53\u4f60\u7528\u4e00\u4e9b\u79ef\u5206Bifer\u521b\u5efa\u4e86\u4e00\u4e2a\u6709\u6548\u7684\u5e10\u6237\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e24\u79cd\u673a\u5236\u6765\u4e0eTelChain\u8fdb\u884c\u4ea4\u6613\u3002 \u901a\u8fc7TelChainethereum\u5ba2\u6237\u7aef\u8fdb\u884c\u8ba4\u8bc1\u7b7e\u540d\u4ea4\u6613 \u79bb\u7ebf\u4ea4\u6613\u7b7e\u540d\u8ba4\u8bc1 \u8fd9\u4e24\u79cd\u673a\u5236\u90fd\u662fgo-sdk\u6240\u652f\u6301\u7684\u3002","title":"6.\u4ea4\u6613\u673a\u5236"},{"location":"%E4%BA%A4%E6%98%93/#7","text":"\u4e3a\u4e86\u901a\u8fc7TelChain\u5ba2\u6237\u7aef\u8fdb\u884c\u4ea4\u6613\uff0c\u9996\u5148\u9700\u8981\u786e\u4fdd\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u5ba2\u6237\u7aef\u77e5\u9053\u4f60\u7684\u94b1\u5305\u5730\u5740\u3002\u6700\u597d\u662f\u8fd0\u884c\u81ea\u5df1\u7684TelChain\u5ba2\u6237\u7aef\uff0c\u6bd4\u5982 geth / Parity \uff0c\u4ee5\u4fbf\u53ef\u4ee5\u66f4\u65b9\u4fbf\u7684\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4e00\u65e6\u4f60\u6709\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fd0\u884c\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2aTelChain\u94b1\u5305\uff0c\u901a\u8fc7\uff1a geth Wiki \u5305\u542b\u4e86geth\u652f\u6301\u7684\u826f\u597d\u8fd0\u884c\u7684\u4e0d\u540c\u673a\u5236\uff0c\u4f8b\u5982\u5bfc\u5165\u79c1\u6709\u5bc6\u94a5\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7\u63a7\u5236\u53f0\u521b\u5efa\u65b0\u7684TelChain\u5e10\u6237\u3002 \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5ba2\u6237\u7aef\u4f7f\u7528JSON-RPC\u7ba1\u7406\u547d\u4ee4\uff0c\u4f8b\u5982\u7528 personal_newAccount \u4e3a geth / Parity \u521b\u5efa\u65b0TelChain\u8d26\u6237\u3002 \u901a\u8fc7\u521b\u5efa\u4f60\u7684\u94b1\u5305\u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7go-sdk\u6253\u5f00\u5e10\u6237\uff0c\u9996\u5148\u521b\u5efa\u652f\u6301 geth / Parity \u7ba1\u7406\u547d\u4ee4\u7684go-sdk\u5b9e\u4f8b\uff1a //Admin bifj = Admin.build(new HttpService()); var connection = newPersonal(providers.NewHTTPProvider(resources.IP00+\":\"+strconv.FormatUint(resources.Port, 10), 10, false)) \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u89e3\u9501\u5e10\u6237\uff0c\u5e76\u5982\u679c\u662f\u6210\u529f\u7684\uff0c\u5c31\u53ef\u4ee5\u53d1\u9001\u4e00\u4e2a\u4ea4\u6613\uff1a PersonalUnlockAccount personalUnlockAccount = gbif.personalUnlockAccount(\"0x000...\", \"a password\").send(); if (personalUnlockAccount.accountUnlocked()) { // send a transaction } func TestPersonalUnLockAccount(t *testing.T) { var connection = newPersonal(providers.NewHTTPProvider(resources.IP00+\":\"+strconv.FormatUint(resources.Port, 10), 10, false)) for _, test := range []struct { address string password string duration uint64 }{ {\"did:bid:ZFT4Y87Xdg83GEDDbiNknHLWs3Hfq58\", \"node\", 50}, } { res, err := connection.personalUnLockAccount(test.address, test.password, test.duration) if err != nil { t.Logf(\"error is %s \", err) } t.Log(res) } } Transaction transaction = Transaction.createContractTransaction( <from address>, <nonce>, BigInteger.valueOf(<gas price>), // we use default gas limit \"0x...<smart contract code to execute>\" ); org.gbif.protocol.core.methods.response.coreSendTransaction transactionResponse = parity.coreSendTransaction(ethSendTransaction) .send(); String transactionHash = transactionResponse.getTransactionHash(); // poll for transaction response via org.gbif.protocol.Gbif.coreGetTransactionReceipt(<txhash>) </txhash></smart></gas></nonce></from> func TestCoreSendTransactionInteractContract(t *testing.T) { // \u5408\u7ea6\u90e8\u7f72 // txHash := ballotDeploy(t) // txHash is 0x8e17880962519fa1421f1eea19a3503290758db10ce37524239030b9b7aa17c3 // Contract Address: did:bid:qwer:sfjGbVtUc3RNBNhMdPBJXrmRN2tzTCH8 // // \u5408\u7ea6\u4ea4\u4e92 \u67e5\u8be2 call \u65b9\u6cd5 // ballotCallWinnerName(t) // // \u5408\u7ea6\u4ea4\u4e92 \u4ea4\u6613 send \u65b9\u6cd5 // ballotSend(t) // // call voters ballotCallVoters(t) }","title":"7.\u901a\u8fc7\u5ba2\u6237\u7aef\u8fdb\u884c\u8ba4\u8bc1\u7b7e\u540d\u4ea4\u6613"},{"location":"%E4%BA%A4%E6%98%93/#8","text":"\u5982\u679c\u4f60\u4e0d\u60f3\u7ba1\u7406\u81ea\u5df1\u7684TelChain\u5ba2\u6237\u7aef\uff0c\u6216\u8005\u4e0d\u60f3\u5411TelChain\u5ba2\u6237\u7aef\u63d0\u4f9b\u8bf8\u5982\u5bc6\u7801\u4e4b\u7c7b\u7684\u94b1\u5305\u8be6\u7ec6\u4fe1\u606f\uff0c\u90a3\u4e48\u5c31\u901a\u8fc7\u79bb\u7ebf\u4ea4\u6613\u8ba4\u8bc1\u7b7e\u540d\u3002 \u79bb\u7ebf\u4ea4\u6613\u7b7e\u540d\u8ba4\u8bc1\u5141\u8bb8\u4f60\u5728go-sdk\u4e2d\u4f7f\u7528\u4f60\u7684TelChain\u94b1\u5305\u7b7e\u7f72\u4ea4\u6613\uff0c\u5141\u8bb8\u4f60\u5b8c\u5168\u63a7\u5236\u4f60\u7684\u79c1\u6709\u51ed\u636e\u3002\u7136\u540e\uff0c\u79bb\u7ebf\u521b\u5efa\u7684\u4ea4\u6613\u53ef\u4ee5\u88ab\u53d1\u9001\u5230\u7f51\u7edc\u4e0a\u7684\u4efb\u4f55TelChain\u5ba2\u6237\u7aef\uff0c\u53ea\u8981\u5b83\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4ea4\u6613\uff0c\u5b83\u4f1a\u5c06\u4ea4\u6613\u4f20\u64ad\u5230\u5176\u4ed6\u8282\u70b9\u3002 \u5982\u679c\u9700\u8981\uff0c\u8fd8\u53ef\u4ee5\u6267\u884c\u8fdb\u7a0b\u5916\u4ea4\u6613\u7b7e\u540d\u8ba4\u8bc1\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 ECKeyPair \u7684 sign \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002","title":"8.\u79bb\u7ebf\u4ea4\u6613\u7b7e\u540d\u8ba4\u8bc1"},{"location":"%E4%BA%A4%E6%98%93/#9","text":"\u4e3a\u4e86\u79bb\u7ebf\u8131\u673a\u4ea4\u6613\uff0c\u4f60\u9700\u8981\u6709\u4f60\u7684\u94b1\u5305\u6587\u4ef6\u6216\u4e0e\u79c1\u5bc6\u94b1\u5305/\u8d26\u6237\u76f8\u5173\u7684\u516c\u5171\u548c\u79c1\u4eba\u5bc6\u94a5\u3002 go-sdk\u80fd\u591f\u4e3a\u4f60\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5b89\u5168\u7684TelChain\u94b1\u5305\u6587\u4ef6Bifereum wallet file\uff0c\u6216\u8005\u4e0e\u4e5f\u53ef\u4ee5\u901a\u8fc7\u79c1\u94a5\u6765\u548c\u73b0\u6709\u7684\u94b1\u5305\u6587\u4ef6\u4e00\u8d77\u5de5\u4f5c\u3002 \u521b\u5efa\u65b0\u7684\u94b1\u5305\u6587\u4ef6: String fileName = WalletUtils.generateNewWalletFile( \"your password\", new File(\"/path/to/destination\")); \u52a0\u8f7d\u51ed\u636e\u4ece\u94b1\u5305\u6587\u4ef6: Credentials credentials = WalletUtils.loadCredentials( \"your password\", \"/path/to/walletfile\"); \u7136\u540e\u8fd9\u4e9b\u51ed\u636e\u4f1a\u88ab\u7528\u6765\u7b7e\u7f72\u4ea4\u6613\uff0c\u8bf7\u53c2\u9605go-sdk\u5b89\u5168\u5b58\u50a8\u5b9a\u4e49\u94b1\u5305\u6587\u4ef6\u89c4\u8303 Web3 Secret Storage Definition","title":"9.\u521b\u5efa\u548c\u4f7f\u7528\u94b1\u5305\u6587\u4ef6"},{"location":"%E4%BA%A4%E6%98%93/#10","text":"\u8981\u4f7f\u8131\u673a\u7b7e\u540d\u4ea4\u6613\u5f97\u5230\u7b7e\u7f72\uff0c\u9700\u8981\u8bbe\u5b9a\u4e00\u4e2a RawTransaction \u7c7b\u578b\u3002 RawTransaction \u7c7b\u4f3c\u4e8e\u524d\u9762\u63d0\u5230\u7684 Transaction \u7c7b\u578b\uff0c\u4f46\u662f\u5b83\u4e0d\u9700\u8981\u901a\u8fc7\u5177\u4f53\u7684\u8d26\u53f7\u5730\u5740\u6765\u8bf7\u6c42\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4ece\u7b7e\u540d\u4e2d\u63a8\u65ad\u51fa\u6765\u3002 \u4e3a\u4e86\u521b\u5efa\u548c\u7b7e\u7f72\u539f\u751f\u4ea4\u6613\uff0c\u4ea4\u6613\u7684\u987a\u5e8f\u5982\u4e0b\uff1a 1.\u786e\u5b9a\u4ea4\u6613\u53d1\u8d77\u8005\u5e10\u6237\u7684\u4e0b\u4e00\u4e2a\u53ef\u7528\u968f\u673a\u6570 nonce 2.\u521b\u5efa RawTransaction \u5bf9\u8c61 3.\u4f7f\u7528\u9012\u5f52\u957f\u5ea6\u524d\u7f00\u7f16\u7801(RLP\u5373 Recursive Length Prefix )\u5bf9 RawTransaction \u5bf9\u8c61\u8fdb\u884c\u7f16\u7801 4.\u7b7e\u7f72 RawTransaction \u5bf9\u8c61 5.\u5c06 RawTransaction \u5bf9\u8c61\u53d1\u9001\u5230\u8282\u70b9\u8fdb\u884c\u5904\u7406 nonce \u662f\u4e00\u4e2a\u4e0d\u65ad\u589e\u957f\u7684\u6570\u503c\uff0c\u7528\u6765\u552f\u4e00\u5730\u6807\u8bc6\u4ea4\u6613\u3002\u4e00\u4e2a nonce \u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u76f4\u5230\u4ea4\u6613\u88ab\u6316\u6398\u5b8c\u6210\uff0c\u53ef\u4ee5\u4ee5\u76f8\u540c\u7684\u968f\u673a\u6570\u53d1\u9001\u4ea4\u6613\u7684\u591a\u4e2a\u7248\u672c\uff0c\u4f46\u662f\u4e00\u65e6\u5176\u4e2d\u4e00\u4e2a\u88ab\u6316\u6398\u5b8c\u6210\uff0c\u5176\u4ed6\u540e\u7eed\u63d0\u4ea4\u7684\u90fd\u5c06\u88ab\u62d2\u7edd\u3002 \u4e00\u65e6\u83b7\u5f97\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684 nonce \uff0c\u8be5\u503c\u5c31\u53ef\u4ee5\u7528\u6765\u521b\u5efa transaction \u5bf9\u8c61\uff1a RawTransaction rawTransaction = RawTransaction.createBiferTransaction( nonce, <gas price>, <gas limit>, <toaddress>, <value>); </value></toaddress></gas></gas> \u7136\u540e\u53ef\u4ee5\u5bf9\u4ea4\u6613\u8fdb\u884c\u7b7e\u540d\u548c\u7f16\u7801\uff1a byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, <credentials>); String hexValue = Numeric.toHexString(signedMessage); </credentials> CorSendTransaction coreSendTransaction = gbif.coreSendRawTransaction(hexValue).sendAsync().get(); String transactionHash = coreSendTransaction.getTransactionHash(); // poll for transaction response via org.gbif.protocol.Gbif.coreGetTransactionReceipt(<txhash>) </txhash> func TestCoreSendRawTransaction(t *testing.T) { var connection = bif.NewBif(providers.NewHTTPProvider(resources.IP00+\":\"+strconv.FormatUint(resources.Port, 10), 10, false)) sender := \"did:bid:qwer:sf25XGBQU8E8wGFo9wGKo95jUgtYPM24Y\" nonce, err := connection.Core.GetTransactionCount(sender, block.LATEST) if err != nil { t.Error(err) t.FailNow() } priKey := \"e41219552564c956edeb0fa782c7760a6f5ade504768b3570c68dc0459a7889a\" recipientStr := \"did:bid:qwer:zftAgNtnQzLMGJHKPMdn9quPvuikNWUZ\" chainId, err := connection.Core.GetChainId() if err != nil { t.Error(err) t.FailNow() } var recipient utils.Address recipient = utils.StringToAddress(recipientStr) tx := &account.SignTxParams{ Recipient: &recipient, Nonce: nonce, GasPrice: big.NewInt(2000000), GasLimit: uint64(41000), Amount: big.NewInt(50000000000), Payload: nil, ChainId: chainId, } res, err := account.SignTransaction(tx, priKey, false) if err != nil { t.Error(err) t.FailNow() } txIDRaw, err := connection.Core.SendRawTransaction(hexutil.Encode(res.Raw)) if err != nil { t.Error(err) t.FailNow() } t.Log(txIDRaw) }","title":"10.\u7b7e\u7f72\u4ee5\u592a\u574a\u4ea4\u6613"},{"location":"%E4%BA%A4%E6%98%93/#11nonce","text":"nonce \u662f\u4e00\u4e2a\u4e0d\u65ad\u589e\u957f\u7684\u6570\u503c\uff0c\u7528\u6765\u552f\u4e00\u5730\u6807\u8bc6\u4ea4\u6613\u3002\u4e00\u4e2a nonce \u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u76f4\u5230\u4ea4\u6613\u88ab\u6316\u6398\u5b8c\u6210\uff0c\u53ef\u4ee5\u4ee5\u76f8\u540c\u7684\u968f\u673a\u6570\u53d1\u9001\u4ea4\u6613\u7684\u591a\u4e2a\u7248\u672c\uff0c\u4f46\u662f\u4e00\u65e6\u5176\u4e2d\u4e00\u4e2a\u88ab\u6316\u6398\u5b8c\u6210\uff0c\u5176\u4ed6\u540e\u7eed\u63d0\u4ea4\u7684\u90fd\u5c06\u88ab\u62d2\u7edd\u3002 \u53ef\u4ee5\u901a\u8fc7 eth_getTransactionCount \u65b9\u6cd5\u83b7\u5f97\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684 nonce \uff1a CorGetTransactionCount coreGetTransactionCount = gbif.coreGetTransactionCount( address, DefaultBlockParameterName.LATEST).sendAsync().get(); BigInteger nonce = coreGetTransactionCount.getTransactionCount(); func TestCoreGetTransactionCount(t *testing.T) { var connection = bif.NewBif(providers.NewHTTPProvider(resources.IP00+\":\"+strconv.FormatUint(resources.Port, 10), 10, false)) generator, _ := connection.Core.GetGenerator() count, err := connection.Core.GetTransactionCount(generator, block.LATEST) if err != nil { t.Error(err) t.FailNow() } countTwo, err := connection.Core.GetTransactionCount(generator, block.LATEST) if err != nil { t.Error(err) t.FailNow() } // count should not change if count.Cmp(countTwo) != 0 { t.Errorf(\"Count incorrect, changed between calls\") t.FailNow() } } \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 nonce \u521b\u5efa\u4f60\u7684\u4ea4\u6613\u5bf9\u8c61\uff1a RawTransaction rawTransaction = RawTransaction.createBiferTransaction( nonce, <gas price>, <gas limit>, <toaddress>, <value>); </value></toaddress></gas></gas> func TestCoreSendRawTransaction(t *testing.T) { var connection = bif.NewBif(providers.NewHTTPProvider(resources.IP00+\":\"+strconv.FormatUint(resources.Port, 10), 10, false)) sender := \"did:bid:qwer:sf25XGBQU8E8wGFo9wGKo95jUgtYPM24Y\" nonce, err := connection.Core.GetTransactionCount(sender, block.LATEST) if err != nil { t.Error(err) t.FailNow() } priKey := \"e41219552564c956edeb0fa782c7760a6f5ade504768b3570c68dc0459a7889a\" recipientStr := \"did:bid:qwer:zftAgNtnQzLMGJHKPMdn9quPvuikNWUZ\" chainId, err := connection.Core.GetChainId() if err != nil { t.Error(err) t.FailNow() } var recipient utils.Address recipient = utils.StringToAddress(recipientStr) tx := &account.SignTxParams{ Recipient: &recipient, Nonce: nonce, GasPrice: big.NewInt(2000000), GasLimit: uint64(41000), Amount: big.NewInt(50000000000), Payload: nil, ChainId: chainId, } res, err := account.SignTransaction(tx, priKey, false) if err != nil { t.Error(err) t.FailNow() } txIDRaw, err := connection.Core.SendRawTransaction(hexutil.Encode(res.Raw)) if err != nil { t.Error(err) t.FailNow() } t.Log(txIDRaw) }","title":"11.\u4ea4\u6613\u968f\u673a\u6570nonce"},{"location":"%E4%BA%A4%E6%98%93/#12","text":"go-sdk\u4e2d\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u4ea4\u6613\u90fd\u4f7f\u7528 Transaction \u548c RawTransaction \u5bf9\u8c61\u3002\u5173\u952e\u7684\u533a\u522b\u662f\u4ea4\u6613\u5bf9\u8c61\u5fc5\u987b\u59cb\u7ec8\u6709\u4e00\u4e2a\u5730\u5740\uff0c\u4ee5\u4fbf\u5904\u7406 eth_sendTransaction \u8bf7\u6c42\u7684TelChain\u5ba2\u6237\u7aef\u77e5\u9053\u8981\u4f7f\u7528\u54ea\u4e2a\u94b1\u5305\u6765\u4ee3\u8868\u6d88\u606f\u53d1\u9001\u8005\u5e76\u53d1\u9001\u8be5\u4ea4\u6613\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u5bf9\u4e8e\u79bb\u7ebf\u7b7e\u540d\u8ba4\u8bc1\u7b7e\u7f72\u7684\u539f\u59cb\u4ea4\u6613\u800c\u8a00\uff0c\u8fd9\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u63a5\u4e0b\u6765\u7684\u90e8\u5206\u6982\u8ff0\u4e86\u4e0d\u540c\u4ea4\u6613\u7c7b\u578b\u6240\u9700\u7684\u5173\u952e\u4ea4\u6613\u5c5e\u6027\u3002\u4e0b\u5217\u5c5e\u6027\u5bf9\u6240\u6709\u4eba\u90fd\u662f\u4e0d\u53d8\uff1a Gas price \u5929\u7136\u6c14\u6c14\u4f53\u4ef7\u683c Gas limit \u5929\u7136\u6c14\u6c14\u4f53\u9650\u5236 Nonce \u968f\u673a\u6570 from \u53d1\u9001\u5730\u5740 Transaction \u548c RawTransaction \u5bf9\u8c61\u5728\u6240\u6709\u540e\u7eed\u793a\u4f8b\u4e2d\u90fd\u53ef\u4e92\u6362\u4f7f\u7528\u3002","title":"12.\u4ea4\u6613\u7c7b\u578b"},{"location":"%E4%BA%A4%E6%98%93/#13","text":"\u5728\u53cc\u65b9\u4e4b\u95f4\u53d1\u9001\u79ef\u5206Bifer\u9700\u8981\u4ea4\u6613\u5bf9\u8c61\u7684\u6700\u5c11\u91cf\u7684\u4fe1\u606f\uff1a to \uff1a\u76ee\u7684\u5730\u94b1\u5305\u5730\u5740 value\uff1a\u4ef7\u503c\uff0c\u5e0c\u671b\u53d1\u9001\u5230\u76ee\u7684\u5730\u7684\u79ef\u5206\u6570\u91cf BigInteger value = Convert.toWei(\"1.0\", Convert.Unit.coreER).toBigInteger(); RawTransaction rawTransaction = RawTransaction.createBiferTransaction( <nonce>, <gas price>, <gas limit>, <toaddress>, value); // send... </toaddress></gas></gas></nonce> \u4f46\u662f\uff0c\u5efa\u8bae\u4f60\u4f7f\u7528 TransferClass \u6765\u53d1\u9001\u79ef\u5206Bifer\uff0c\u5b83\u8d1f\u8d23\u5bf9 nonce \u7ba1\u7406\u548c\u901a\u8fc7\u4e0d\u65ad\u7684\u8f6e\u8be2\u4e3a\u4f60\u63d0\u4f9b\u54cd\u5e94\uff1a Gbif gbif = Gbif.build(new HttpService()); // defaults to http://localhost:8545/ Credentials credentials = WalletUtils.loadCredentials(\"password\", \"/path/to/walletfile\"); TransactionReceipt transactionReceipt = Transfer.sendFunds( gbif, credentials, \"0x<address>|<ensname>\", BigDecimal.valueOf(1.0), Convert.Unit.coreER).send(); </ensname></address>","title":"13.\u79ef\u5206\u4ece\u4e00\u65b9\u4ea4\u6613\u5230\u53e6\u4e00\u65b9"},{"location":"%E4%BA%A4%E6%98%93/#14","text":"\u5f53\u4f7f\u7528\u4e0b\u9762\u5217\u51fa\u7684\u667a\u80fd\u5408\u7ea6\u6253\u5305\u5668\u65f6\uff0c\u5c06\u4e0d\u5f97\u4e0d\u624b\u52a8\u6267\u884c\u4eceSolidity\u5230\u672c\u673ago\u7c7b\u578b\u7684\u6240\u6709\u8f6c\u6362\u3002\u4f7f\u7528 Solidity smart contract wrappers \u662f\u975e\u5e38\u6709\u6548\u7684\uff0c\u5b83\u8d1f\u8d23\u6240\u6709\u7684\u4ee3\u7801\u751f\u6210\u548c\u8f6c\u6362\u3002","title":"14.\u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u6253\u5305\u5668"},{"location":"%E4%BA%A4%E6%98%93/#15","text":"\u8981\u90e8\u7f72\u65b0\u7684\u667a\u80fd\u5408\u7ea6\uff0c\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u5c5e\u6027\uff1a value \uff1a\u5728\u667a\u80fd\u5408\u7ea6\u4e2d\u5e0c\u671b\u5b58\u653e\u7684TelChainBifer\u91cf(\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u9ed8\u8ba4\u4e3a\u96f6) data \uff1a\u5341\u516d\u8fdb\u5236\u683c\u5f0f\u5316\u3001\u7f16\u8bd1\u7684\u667a\u80fd\u5408\u7ea6\u521b\u5efa\u4ee3\u7801 // using a raw transaction RawTransaction rawTransaction = RawTransaction.createContractTransaction( <nonce>, <gasprice>, <gaslimit>, <value>, \"0x <compiled smart contract code>\"); // send... // get contract address CorGetTransactionReceipt transactionReceipt = gbif.coreGetTransactionReceipt(transactionHash).send(); if (transactionReceipt.getTransactionReceipt.isPresent()) { String contractAddress = transactionReceipt.get().getContractAddress(); } else { // try again } </compiled></value></gaslimit></gasprice></nonce> func TestCoreGetTransactionReceipt(t *testing.T) { var connection = bif.NewBif(providers.NewHTTPProvider(resources.IP00+\":\"+strconv.FormatUint(resources.Port, 10), 10, false)) sender := \"did:bid:qwer:sf25XGBQU8E8wGFo9wGKo95jUgtYPM24Y\" priKey := \"e41219552564c956edeb0fa782c7760a6f5ade504768b3570c68dc0459a7889a\" recipient := \"did:bid:qwer:zftAgNtnQzLMGJHKPMdn9quPvuikNWUZ\" txID, err := signAndSingTx(connection, recipient, sender, priKey, false) if err != nil { t.Error(err) t.FailNow() } var receipt *dto.TransactionReceipt for receipt == nil { time.Sleep(time.Second) receipt, err = connection.Core.GetTransactionReceipt(txID) } if err != nil { t.Error(err) t.FailNow() } if len(receipt.ContractAddress) == 0 { t.Log(\"No contract address\") } if len(receipt.TransactionHash) == 0 { t.Error(\"No transaction hash\") t.FailNow() } if receipt.TransactionIndex == nil { t.Error(\"No transaction index\") t.FailNow() } if len(receipt.BlockHash) == 0 { t.Error(\"No block hash\") t.FailNow() } if receipt.BlockNumber == nil || receipt.BlockNumber.Cmp(big.NewInt(0)) == 0 { t.Error(\"No block number\") t.FailNow() } if receipt.Logs == nil || len(receipt.Logs) == 0 { t.Log(\"No logs\") } if !receipt.Status { t.Error(\"False status\") t.FailNow() } } \u5982\u679c\u667a\u80fd\u5408\u7ea6\u5305\u542b\u6784\u9020\u51fd\u6570\uff0c\u5219\u5fc5\u987b\u5bf9\u5173\u8054\u7684\u6784\u9020\u51fd\u6570\u5b57\u6bb5\u503c\u8fdb\u884c\u7f16\u7801\uff0c\u5e76\u5c06\u5176\u9644\u52a0\u5230\u7f16\u8bd1\u7684\u667a\u80fd\u5408\u7ea6\u4ee3\u7801\u4e2d compiled smart contract code \uff1a String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.asList(new Type(value), ...)); // using a regular transaction Transaction transaction = Transaction.createContractTransaction( <fromaddress>, <nonce>, <gasprice>, <gaslimit>, <value>, \"0x <compiled smart contract code>\" + encodedConstructor); // send... </compiled></value></gaslimit></gasprice></nonce></fromaddress>","title":"15.\u521b\u5efa\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6"},{"location":"%E4%BA%A4%E6%98%93/#16","text":"\u8981\u4e0e\u73b0\u6709\u7684\u667a\u80fd\u5408\u7ea6\u8fdb\u884c\u4ea4\u6613\uff0c\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u5c5e\u6027\uff1a to\uff1a\u667a\u80fd\u5408\u540c\u5730\u5740 value\uff1a\u5728\u667a\u80fd\u5408\u7ea6\u4e2d\u4f60\u5e0c\u671b\u5b58\u653e\u7684\u79ef\u5206Bifer\u91cf(\u5982\u679c\u667a\u80fd\u5408\u7ea6\u63a5\u53d7\u79ef\u5206Bifer\u7684\u8bdd) data: \u5df2\u7f16\u7801\u7684\u51fd\u6570\u9009\u62e9\u5668\u548c\u81ea\u53d8\u91cf\u53c2\u6570 go-sdk\u8d1f\u8d23\u51fd\u6570\u7f16\u7801\uff0c\u6709\u5173\u5b9e\u73b0\u7684\u8fdb\u4e00\u6b65\u7ec6\u8282\uff0c\u8bf7\u53c2\u9605\u5e94\u7528\u7a0b\u5e8f\u4e8c\u8fdb\u5236\u63a5\u53e3\u90e8\u5206 Application Binary Interface \u3002 Function function = new Function<>( \"functionName\", // function we're calling Arrays.asList(new Type(value), ...), // Parameters to pass as Solidity Types Arrays.asList(new TypeReference<type>() {}, ...)); String encodedFunction = FunctionEncoder.encode(function) Transaction transaction = Transaction.createFunctionCallTransaction( <from>, <gasprice>, <gaslimit>, contractAddress, <funds>, encodedFunction); org.gbif.protocol.core.methods.response.coreSendTransaction transactionResponse = gbif.coreSendTransaction(transaction).sendAsync().get(); String transactionHash = transactionResponse.getTransactionHash(); // wait for response using CoreGetTransactionReceipt... </funds></gaslimit></gasprice></from></type> \u65e0\u8bba\u6d88\u606f\u7b7e\u540d\u7684\u8fd4\u56de\u7c7b\u578b\u5982\u4f55\uff0c\u90fd\u4e0d\u53ef\u80fd\u4ece\u4e8b\u52a1\u6027\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c\u3002\u4f46\u662f\uff0c\u4f7f\u7528\u8fc7\u6ee4\u5668\u6355\u83b7\u51fd\u6570\u8fd4\u56de\u7684\u503c\u662f\u53ef\u80fd\u7684\u3002\u8be6\u60c5\u8bf7\u53c2\u9605\u8fc7\u6ee4\u5668\u548c\u4e8b\u4ef6\u90e8\u5206\u3002","title":"16.\u4e0e\u667a\u80fd\u5408\u7ea6\u4ea4\u6613"},{"location":"%E4%BA%A4%E6%98%93/#17","text":"\u8fd9\u79cd\u529f\u80fd\u662f\u7531 eth_call \u901a\u8fc7 JSON-RPC \u8c03\u7528\u6765\u5b9e\u73b0\u7684\u3002 eth_call\u5141\u8bb8\u4f60\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u4e0a\u7684\u65b9\u6cd5\u6765\u67e5\u8be2\u67d0\u4e2a\u503c\u3002\u6b64\u51fd\u6570\u6ca1\u6709\u5173\u8054\u4ea4\u6613\u6210\u672c\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u4e0d\u6539\u53d8\u4efb\u4f55\u667a\u80fd\u5408\u7ea6\u65b9\u6cd5\u7684\u72b6\u6001\uff0c\u5b83\u53ea\u8fd4\u56de\u5b83\u4eec\u7684\u503c\uff1a Function function = new Function<>( \"functionName\", Arrays.asList(new Type(value)), // Solidity Types in smart contract functions Arrays.asList(new TypeReference<type>() {}, ...)); String encodedFunction = FunctionEncoder.encode(function) org.gbif.protocol.core.methods.response.coreCall response = gbif.coreCall( Transaction.createCorCallTransaction(<from>, contractAddress, encodedFunction), DefaultBlockParameterName.LATEST) .sendAsync().get(); List<type> someTypes = FunctionReturnDecoder.decode( response.getValue(), function.getOutputParameters()); </type></from></type> \u6ce8\u610f \uff1a\u5982\u679c\u4e00\u4e2a\u65e0\u6548\u7684\u51fd\u6570\u8c03\u7528\u88ab\u6267\u884c\uff0c\u6216\u8005\u5f97\u5230\u4e00\u4e2a\u7a7anull\u8fd4\u56de\u7ed3\u679c\u65f6\uff0c\u8fd4\u56de\u503c\u5c06\u662f\u4e00\u4e2a Collections.emptyList \u5b9e\u4f8b\u3002","title":"17.\u67e5\u8be2\u667a\u80fd\u5408\u7ea6\u72b6\u6001"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/","text":"\u667a\u80fd\u5408\u7ea6 1.\u667a\u80fd\u5408\u7ea6\u7b80\u4ecb \u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u9009\u62e9\u4e09\u79cd\u8bed\u8a00\u6765\u7f16\u5199\u667a\u80fd\u5408\u7ea6\uff1a 1.solidity\uff0cTelChain\u7684\u65d7\u8230\u8bed\u8a00\uff0c\u4e5f\u662f\u5f00\u53d1\u667a\u80fd\u5408\u7ea6\u6700\u6d41\u884c\u7684\u8bed\u8a00\u3002 2.Serpent\uff0c\u4e00\u4e2a\u7528\u4e8e\u7f16\u5199\u667a\u80fd\u5408\u7ea6\u7684Python\u8bed\u8a00\u3002 3.\u7c7bLISP\u8bed\u8a00\uff08LLL\uff09\uff0c\u4f4e\u7ea7\u8bed\u8a00\uff0cSerpent\u63d0\u4f9b\u4e86LLL\u7684\u8d85\u96c6\u3002\u4f7f\u7528LLL\u7684\u4fe1\u606f\u4e0d\u591a\uff0c\u8fd9\u4e2a\u535a\u5ba2 /var/log/syrinx \u548cgithub\u76f8\u5173\u7684\u5e93 lll-resurrected GitHub \u4e0d\u9519\uff0c\u53ef\u4ee5\u53c2\u8003\u53c2\u8003\u3002 \u4e3a\u4e86\u5c06\u667a\u80fd\u5408\u7ea6\u90e8\u7f72\u5230TelChain\u533a\u5757\u94fe\u4e0a\uff0c\u5fc5\u987b\u5148\u5c06\u5176\u7f16\u8bd1\u6210\u5b57\u8282\u7801\u7684\u683c\u5f0f\uff0c\u7136\u540e\u5c06\u5176\u4f5c\u4e3a\u4ea4\u6613\u7684\u4e00\u90e8\u5206\u53d1\u9001\u3002java-sdk\u53ef\u4ee5\u5e2e\u4f60\u505a\u8fd9\u4e9b\u5e76\u4e14\u5c06\u5b83\u4e0esolidity\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u8d77\u6765\u3002\u4e3a\u4e86\u4e86\u89e3\u5e55\u540e\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003 \u667a\u80fd\u5408\u7ea6\u521b\u5efa \u4e2d\u7684\u7ec6\u8282\u3002 \u9274\u4e8esolidity\u662f\u7f16\u5199\u667a\u80fd\u5408\u7ea6\u7684\u9996\u9009\u8bed\u8a00\uff0c\u5b83\u4e5f\u662fjava-sdk\u652f\u6301\u7684\u8bed\u8a00\uff0c\u968f\u540e\u7684\u6240\u6709\u793a\u4f8b\u90fd\u4f1a\u7528\u5230\u5b83\u3002 2.\u4ecesolidity\u8bed\u8a00\u5f00\u59cb solidity\u7684\u6982\u8ff0\u4e0d\u662f\u672c\u6587\u8981\u8ba8\u8bba\u7684\u91cd\u70b9\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u8981\u63a8\u8350\u4e00\u4e9b\u8d44\u6599\u7ed9\u5927\u5bb6\uff1a Contract Tutorial TelChain\u5b98\u7f51github\u7ef4\u57fa\u767e\u79d1\u4e2d\u7684\u667a\u80fd\u5408\u7ea6\u6307\u5357 Introduction to Smart Contracts solidity\u7684\u5b98\u7f51\u5f00\u53d1\u6587\u4ef6\u4e2d\u5173\u4e8e\u667a\u80fd\u5408\u7ea6\u7684\u7ae0\u8282\u3002 Writing a contract TelChain\u5b98\u65b9\u63d0\u4f9b\u5982\u4f55\u7f16\u5199\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u3002 3.\u7f16\u8bd1solidity\u6e90\u4ee3\u7801 \u7f16\u5199solidity\u4ee3\u7801\u8fd0\u884c\uff1a $ solc <contract>.sol --bin --abi --optimize -o <output-dir>/ </output-dir></contract> bin \u548c ABI \u7f16\u8bd1\u5668\u53c2\u6570\u90fd\u9700\u8981\u5145\u5206\u5229\u7528java-sdk\u4e2d\u7684\u667a\u80fd\u5408\u7ea6\u3002 bin\uff0c\u8f93\u51fa\u5305\u542b\u5341\u516d\u8fdb\u5236\u7f16\u7801\u7684solidity\u4e8c\u8fdb\u5236\u6587\u4ef6\u4ee5\u63d0\u4f9b\u4ea4\u6613\u8bf7\u6c42\u3002 ABI\uff0c\u8f93\u51fa\u4e00\u4e2asolidity\u7684\u5e94\u7528\u7a0b\u5e8f\u4e8c\u8fdb\u5236\u63a5\u53e3\uff08ABI\uff09\u6587\u4ef6\uff0c\u5b83\u8be6\u7ec6\u63cf\u8ff0\u4e86\u6240\u6709\u53ef\u516c\u5f00\u8bbf\u95ee\u7684\u5408\u7ea6\u65b9\u6cd5\u53ca\u5176\u76f8\u5173\u53c2\u6570\u3002\u8fd9\u4e9b\u7ec6\u8282\u548c\u5408\u7ea6\u5730\u5740\u5bf9\u4e8e\u667a\u80fd\u5408\u7ea6\u7684\u4ea4\u4e92\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002ABI\u6587\u4ef6\u4e5f\u7528\u4e8e\u5c01\u88c5solidity\u7684\u667a\u80fd\u5408\u7ea6\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7solidity\u7684\u6d4f\u89c8\u5668\u9879\u76ee Remix \u5728\u6d4f\u89c8\u5668\u4e2d\u7f16\u5199\u548c\u7f16\u8bd1solidity\u4ee3\u7801\u3002\u4f7f\u7528solidity\u6d4f\u89c8\u5668\u9879\u76eeRemix IDE\u5bf9\u4e8e\u8f83\u5c0f\u7684\u667a\u80fd\u5408\u7ea6\u6765\u8bf4\u662f\u5f88\u597d\u7684\uff0c\u4f46\u662f\u4f60\u9047\u5230\u4e0e\u8f83\u5927\u7684\u667a\u80fd\u5408\u7ea6\u76f8\u5173\u7684\u95ee\u9898\u3002 \u8fd8\u53ef\u4ee5\u901a\u8fc7TelChain\u5ba2\u6237\u7aef\uff08\u5982geth\u548cParity\uff09\u7f16\u8bd1solidity\u4ee3\u7801\uff0cgo-sdk\u4e2d\u4e5f\u652f\u6301\u4f7f\u7528JSON-RPC\u65b9\u6cd5 eth_compileSolidity \u3002\u7136\u800c\uff0c\u5fc5\u987b\u5728\u5ba2\u6237\u7aef\u4e0a\u5b89\u88c5solidity\u7f16\u8bd1\u5668\uff0c\u8fd9\u6837\u5b83\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 4.\u90e8\u7f72\u667a\u80fd\u5408\u7ea6\u53ca\u4e0e\u667a\u80fd\u5408\u7ea6\u4ea4\u4e92 \u5982\u679c\u4f60\u60f3\u907f\u514d\u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u7684\u5e95\u5c42\u5b9e\u73b0\u7ec6\u8282\uff0cgo-sdk\u63d0\u4f9bsolidity\u7684\u667a\u80fd\u5408\u7ea6\u7684\u5c01\u88c5\u5305\uff0c\u4f7f\u4f60\u80fd\u591f\u901a\u8fc7go-sdk\u751f\u6210\u7684\u5305\u88c5\u5bf9\u8c61\u76f4\u63a5\u4e0e\u667a\u80fd\u5408\u7ea6\u7684\u6240\u6709\u65b9\u6cd5\u8fdb\u884c\u4ea4\u4e92\u3002 \u53e6\u5916\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u53d1\u9001\u5e38\u89c4\u4ea4\u6613\u6216\u5e0c\u671b\u5728\u4e0e\u667a\u80fd\u5408\u7ea6\u7684\u4ea4\u4e92\u4e2d\u6709\u66f4\u591a\u7684\u63a7\u5236\u6743\uff0c\u8bf7\u53c2\u9605 java-sdk\u6559\u7a0b\uff1ajava\u4f7f\u7528java-sdk\u5f00\u53d1TelChain\u667a\u80fd\u5408\u7ea6\u4ea4\u6613 ,\u8fd9\u91cc\u8bb2\u5230\u4e86\u521b\u5efa\u667a\u80fd\u5408\u7ea6\uff0c\u4e0e\u667a\u80fd\u5408\u7ea6\u8fdb\u884c\u4ea4\u6613\uff0c\u67e5\u8be2\u667a\u80fd\u5408\u7ea6\u7684\u72b6\u6001\u7b49\u5185\u5bb9\u3002 5.\u667a\u80fd\u5408\u7ea6\u793a\u4f8bdemo go-sdk\u5728\u9879\u76ee\u76ee\u5f55\u4e2d\u63d0\u4f9b\u4e86\u8bb8\u591a\u667a\u80fd\u5408\u7ea6\u793a\u4f8bdemo\uff1a codegen/src/test/resources/solidity \u5b83\u8fd8\u63d0\u4f9b\u4e86\u96c6\u6210\u6d4b\u8bd5\uff0c\u7528\u4e8e\u6f14\u793a\u5728\u96c6\u6210\u6d4b\u8bd5\u6a21\u5757\u4e2d\u90e8\u7f72\u548c\u4f7f\u7528\u8fd9\u4e9b\u667a\u80fd\u5408\u7ea6\uff1a integration-tests/src/test/java/org/bifj/protocol/scenarios 6.\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305 go-sdk\u652f\u6301go\u4eceABI\u6587\u4ef6\u4e2d\u81ea\u52a8\u751f\u6210\u667a\u80fd\u5408\u7ea6\u51fd\u6570\u5c01\u88c5\u5305\u3002 go-sdk\u8fd8\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177\u6765\u751f\u6210\u667a\u80fd\u5408\u7ea6\u51fd\u6570\u5c01\u88c5\u5305\uff1a $ bifj solidity generate [--javaTypes|--solidityTypes] /path/to/<smart-contract>.bin /path/to/<smart-contract>.abi -o /path/to/src/main/java -p com.your.organisation.name </smart-contract></smart-contract> \u5728go-sdk\u76843.x\u4e4b\u524d\u7684\u7248\u672c\u4e2d\uff0c\u751f\u6210\u7684\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305\u4f7f\u7528\u539f\u751fSolidity\u7c7b\u578b\u3002\u4ecego-sdk 3.x\u5f00\u59cb\uff0c\u9ed8\u8ba4\u4f1a\u91c7\u7528go\u7c7b\u578b\u3002\u53ef\u4ee5\u4f7f\u7528 &#x2013;solidityTypes \u547d\u4ee4\u884c\u53c2\u6570\u521b\u5efasolidity\u7c7b\u578b\u3002 \u8fd8\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8c03\u7528go\u65b9\u6cd5\u6765\u751f\u6210\u5c01\u88c5\u5305\uff1a org.gbif.codegen.SolidityFunctionWrapperGenerator /path/to/<smart-contract>.bin /path/to/<smart-contract>.abi -o /path/to/src/main/java -p com.your.organisation.name </smart-contract></smart-contract> \u5176\u4e2dbin\u548cabi\u662f\u6839\u636e\u672c\u6587\u4e2d \u7f16\u8bd1solidity\u6e90\u4ee3\u7801 \u7ae0\u8282\u7684\u65b9\u6cd5\u83b7\u5f97\u7684\u3002 \u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305\u652f\u6301\u6240\u6709\u4e0e\u667a\u80fd\u5408\u7ea6\u4e00\u8d77\u5de5\u4f5c\u7684\u901a\u7528\u64cd\u4f5c\uff1a \u6784\u5efa\u4e0e\u90e8\u7f72 \u8c03\u7528\u4ea4\u6613\u548c\u4e8b\u4ef6 \u8c03\u7528\u53c2\u6570\u65b9\u6cd5 \u786e\u5b9a\u5408\u7ea6\u6709\u6548\u6027 \u4efb\u4f55\u9700\u8981\u5e95\u5c42JSON-RPC\u8c03\u7528\u7684\u65b9\u6cd5\u8c03\u7528\u90fd\u4f1a\u6709\u4e00\u4e2a\u8fd4\u56de\u4ee5\u907f\u514d\u963b\u585e\u3002 go-sdk\u8fd8\u652f\u6301\u901a\u8fc7\u547d\u4ee4\u884c\u5de5\u5177\u76f4\u63a5\u4eceTunffle\u7684\u5408\u7ea6\u6a21\u5f0f\u751f\u6210go\u667a\u80fd\u5408\u7ea6\u529f\u80fd\u5c01\u88c5\u5305\u3002 $ bifj truffle generate [--javaTypes|--solidityTypes] /path/to/<truffle-smart-contract-output>.json -o /path/to/src/main/java -p com.your.organisation.name </truffle-smart-contract-output> \u8fd9\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528go\u65b9\u6cd5\u6765\u8c03\u7528\uff1a org.gbif.codegen.TruffleJsonFunctionWrapperGenerator /path/to/<truffle-smart-contract-output>.json -o /path/to/src/main/java -p com.your.organisation.name </truffle-smart-contract-output> \u4ee5\u8fd9\u79cd\u65b9\u5f0f\u751f\u6210\u7684\"\u589e\u5f3a\u578b\"\u7684\u5c01\u88c5\u5305\u4f1a\u66b4\u9732\u5408\u7ea6\u7684\u6bcf\u4e2a\u7f51\u7edc\u90e8\u7f72\u5730\u5740\u3002\u8fd9\u4e9b\u5730\u5740\u6765\u81ea\u4e8e\u53d1\u5e03Truffle\u90e8\u7f72\u65f6\u7684\u5c01\u88c5\u5305\u3002 7.\u6784\u5efa\u4e0e\u90e8\u7f72\u667a\u80fd\u5408\u7ea6 \u667a\u80fd\u5408\u7ea6\u7684\u6784\u5efa\u548c\u90e8\u7f72\u53d1\u751f\u5728 deploy \u65b9\u6cd5\u4e2d\uff1a YourSmartContract contract = YourSmartContract.deploy( <bifj>, <credentials>, GAS_PRICE, GAS_LIMIT, [<initialvalue>,] <param1>, ..., <paramn>).send(); </paramn></param1></initialvalue></credentials></bifj> contractObj, err := connection.Core.NewContract(contract.Abi) chainId, _ := connection.Core.GetChainId() nonce, _ := connection.Core.GetTransactionCount(singAddr, block.LATEST) var sender utils.Address sender = utils.StringToAddress(singAddr) tx := &account.SignTxParams{ ChainId: chainId, Nonce: nonce, GasPrice: big.NewInt(200), GasLimit: 200000, Sender: &sender, Recipient: nil, Amount: nil, } hash, err := contractObj.Deploy(tx, false, singAddrPriKey, contract.ByteCode) \u8fd9\u4e2a\u65b9\u6cd5\u5c06\u4f7f\u7528\u63d0\u4f9b\u7684\u51ed\u636e\u548c\u6784\u9020\u51fd\u6570\u53c2\u6570\u503c\u5728TelChain\u533a\u5757\u94fe\u4e0a\u521b\u5efa\u667a\u80fd\u5408\u7ea6\u7684\u65b0\u5b9e\u4f8b\u3002 \u5982\u679c\u4f60\u7684\u667a\u80fd\u5408\u7ea6\u5728\u6784\u9020\u4e0a\u63a5\u53d7\u79ef\u5206\uff0c\u5219\u53ea\u9700\u8981\u521d\u59cb\u5316\u53c2\u6570\u503c <initialvalue></initialvalue> \u3002\u8fd9\u5c31\u8981\u6c42\u5728\u5408\u7ea6\u4e2d\u51fa\u73b0\u652f\u4ed8 payable \u3002 \u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5b9e\u4f8b\uff0c\u5b83\u5305\u542b\u667a\u80fd\u5408\u7ea6\u7684\u5e95\u5c42\u5730\u5740\u3002\u5982\u679c\u5e0c\u671b\u7528\u73b0\u6709\u7684\u667a\u80fd\u5408\u7ea6\u6784\u9020\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u7684\u5b9e\u4f8b\uff0c\u53ea\u9700\u4f20\u9012\u5730\u5740\uff1a YourSmartContract contract = YourSmartContract.load( \"0x<address>|<ensname>\", bifj, credentials, GAS_PRICE, GAS_LIMIT); </ensname></address> 8.\u667a\u80fd\u5408\u7ea6\u6709\u6548\u6027 \u4f7f\u7528\u6b64\u65b9\u6cd5\uff0c\u53ef\u80fd\u5e0c\u671b\u786e\u5b9a\u6240\u52a0\u8f7d\u7684\u5408\u7ea6\u5730\u5740\u662f\u4f60\u6240\u671f\u671b\u7684\u667a\u80fd\u5408\u7ea6\u3002\u4e3a\u6b64\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 isValid \u5408\u7ea6\u65b9\u6cd5\uff0c\u53ea\u6709\u5728\u5408\u7ea6\u5730\u5740\u4e2d\u90e8\u7f72\u7684\u5b57\u8282\u7801\u4e0e\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305\u4e2d\u7684\u5b57\u8282\u7801\u5339\u914d\u65f6\u624d\u4f1a\u8fd4\u56detrue\u3002 contract.isValid(); // returns false if the contract bytecode does not match what's deployed // at the provided address 9.\u4ea4\u6613\u7ba1\u7406\u5668 go-sdk\u63d0\u4f9b\u4e86\u4e00\u4e2a \u4ea4\u6613\u7ba1\u7406\u5668TransactionManager \u6765\u63a7\u5236\u4f60\u8fde\u63a5\u5230TelChain\u5ba2\u6237\u7aef\u7684\u65b9\u5f0f\u3002\u9ed8\u8ba4\u673a\u5236\u4f7f\u7528go-sdk\u7684 RawTransactionManager \uff0c\u5b83\u4e0eTelChain\u94b1\u5305\u6587\u4ef6\u4e00\u8d77\u5de5\u4f5c\uff0c\u5728\u63d0\u4ea4\u5230\u7f51\u7edc\u4e4b\u524d\u79bb\u7ebf\u5730\u7b7e\u7f72\u4ea4\u6613\u3002 \u4f46\u662f\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4fee\u6539\u4ea4\u6613\u7ba1\u7406\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5176\u4f20\u9012\u7ed9\u667a\u80fd\u5408\u7ea6\u90e8\u7f72\u548c\u6784\u5efa\u65b9\u6cd5 deploy \uff0c\u800c\u4e0d\u662f\u51ed\u636e\u5bf9\u8c61\uff0c\u5373\uff1a YourSmartContract contract = YourSmartContract.deploy( <bifj>, <transactionmanager>, GAS_PRICE, GAS_LIMIT, <param1>, ..., <paramn>).send(); </paramn></param1></transactionmanager></bifj> \u9664\u4e86 RawTransactionManager \u4e4b\u5916\uff0cjava-sdk\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5ba2\u6237\u7aef\u4ea4\u6613\u7ba1\u7406\u5668 ClientTransactionManager \uff0c\u5b83\u5c06\u4f60\u7684\u4ea4\u6613\u7b7e\u7f72\u7684\u8d23\u4efb\u4f20\u9012\u7ed9\u4f60\u6b63\u5728\u8fde\u63a5\u7684TelChain\u5ba2\u6237\u7aef\u3002 \u8fd8\u6709\u4e00\u4e2a ReadonlyTransactionManager \uff0c\u7528\u4e8e\u53ea\u4ece\u667a\u80fd\u5408\u7ea6\u4e2d\u67e5\u8be2\u6570\u636e\uff0c\u800c\u4e0d\u4e0e\u5b83\u8fdb\u884c\u4ea4\u6613\u3002 10.\u5728\u4ea4\u6613\u4e2d\u6307\u5b9a\u94feID:EIP-155 RawTransactionManager \u91c7\u7528\u4e00\u4e2a\u53ef\u9009\u7684\u94fe\u8868\u53c2\u6570\u6765\u6307\u5b9a\u5728 EIP-155 \u4e0a\u4f7f\u7528\u7684\u94feID\u3002\u8fd9\u9632\u6b62\u4e86\u4e00\u4e2a\u94fe\u88ab\u91cd\u65b0\u5e7f\u64ad\u5230\u53e6\u4e00\u4e2a\u94fe\u4e0a\u7684\u4ea4\u6613\uff0c\u4f8b\u5982\u4ece Ropsten \u5230 Mainnet \uff1a TransactionManager transactionManager = new RawTransactionManager( bifj, credentials, ChainId.MAIN_NET); \u4e3a\u4e86\u907f\u514d\u66f4\u6539\u914d\u7f6e\u6216\u4ee3\u7801\u6765\u6307\u5b9a\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u94fe\uff0cgo-sdk\u9ed8\u8ba4\u662f\u4e0d\u6307\u5b9a\u4ea4\u6613\u4e0a\u7684\u94feID\uff0c\u4ee5\u7b80\u5316\u4e0e\u5e93\u95f4\u7684\u4ea4\u4e92\u3002\u7136\u800c\uff0cTelChain\u793e\u533a\u7684\u5efa\u8bae\u662f\u4f7f\u7528\u94feID\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u8bf7\u6c42\u83b7\u5f97\u4f60\u7684TelChain\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u7684\u7f51\u7edc\u7684\u94feID\uff1a gbif.netVersion().send().getNetVersion(); 11.\u4ea4\u6613\u6536\u636e\u5904\u7406\u5668 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53go-sdk\u5411TelChain\u5ba2\u6237\u7aef\u63d0\u4ea4\u65b0\u7684\u4ea4\u6613\u65f6\uff0cgo-sdk\u5c06\u7ee7\u7eed\u8f6e\u8be2\u5ba2\u6237\u7aef\u76f4\u5230\u6536\u636e\u5230 TransactionReceipt \uff0c\u6307\u793a\u4ea4\u6613\u5df2\u88ab\u6dfb\u52a0\u63d0\u4ea4\u5230\u533a\u5757\u94fe\u4e0a\u3002\u5982\u679c\u4f60\u7528go-sdk\u5f02\u6b65\u53d1\u9001\u591a\u4e2a\u4ea4\u6613\uff0c\u5219\u8fd9\u4f1a\u5bfc\u81f4\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8f6e\u8be2\u5ba2\u6237\u7aef\u3002 \u5728go-sdk\u4e2d\u63d0\u4f9b\u4e86\u591a\u4e2a\u5904\u7406\u5668\uff1a \u6ce8\u610f \uff1a\u5728\u6392\u961f\u4ea4\u6613\u6536\u636e\u5904\u7406\u5668\u7684\u521d\u59cb\u54cd\u5e94\u4e2d\u4e5f\u63d0\u4f9b\u4e86 EmptyTransactionReceipt \u3002\u8fd9\u5141\u8bb8\u8c03\u7528\u65b9\u5bf9\u63d0\u4ea4\u5230\u7f51\u7edc\u7684\u4ea4\u6613\u62e5\u6709\u4ea4\u6613\u54c8\u5e0c\u3002 \u5982\u679c\u4f60\u4e0d\u5e0c\u671b\u4f7f\u7528\u9ed8\u8ba4\u5904\u7406\u5668 PollingTransactionReceiptProcessor \uff0c\u5219\u53ef\u4ee5\u6307\u5b9a\u4ea4\u6613\u6536\u636e\u5904\u7406\u5668\u4ee3\u7801\u5982\u4e0b\uff1a TransactionReceiptProcessor transactionReceiptProcessor = new QueuingTransactionReceiptProcessor(bifj, new Callback() { @Override public void accept(TransactionReceipt transactionReceipt) { // process transactionReceipt } @Override public void exception(Exception exception) { // handle exception } TransactionManager transactionManager = new RawTransactionManager( bifj, credentials, ChainId.MAIN_NET, transactionReceiptProcessor); 12.\u8c03\u7528\u4ea4\u6613\u548c\u4e8b\u4ef6 \u6240\u6709\u4ea4\u6613\u7684\u667a\u80fd\u5408\u7ea6\u65b9\u6cd5\u4ee5\u76f8\u540c\u7684\u53c2\u6570\u503c\u547d\u540d\u4e3a\u5b83\u4eec\u7684solidity\u65b9\u6cd5\u3002\u4ea4\u6613\u8c03\u7528\u4e0d\u8fd4\u56de\u4efb\u4f55\u503c\uff0c\u540c\u6837\u4e0d\u9700\u8981\u8003\u8651\u65b9\u6cd5\u6307\u5b9a\u7684\u8fd4\u56de\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u6240\u6709\u4ea4\u6613\u7684\u65b9\u6cd5\uff0c\u53ea\u662f\u8fd4\u56de\u4e0e\u4ea4\u6613\u5173\u8054\u7684\u4ea4\u6613\u6536\u636e\u3002 TransactionReceipt transactionReceipt = contract.someMethod( <param1>, ...).send(); </param1> \u4ea4\u6613\u6536\u636e\u662f\u5341\u5206\u6709\u7528\u7684\u6709\u4e24\u4e2a\u4e3b\u8981\u539f\u56e0\uff1a \u5728\u667a\u80fd\u5408\u7ea6\u4e2d\u5b9a\u4e49\u7684\u4efb\u4f55\u4e8b\u4ef6\u90fd\u5c06\u7528\u4e00\u4e2a\u540d\u4e3a process<event name>Event</event> \u65b9\u6cd5\u5728\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305\u4e2d\u8fdb\u884c\u8868\u793a\uff0c\u8be5\u4e8b\u4ef6\u91c7\u7528\u4ea4\u6613\u6536\u636e\uff0c\u5e76\u4ece\u4e2d\u63d0\u53d6\u7d22\u5f15\u548c\u975e\u7d22\u5f15\u4e8b\u4ef6\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u5728 EventValues \u5b9e\u4f8b\u4e2d\u88ab\u89e3\u7801\u8fd4\u56de\uff1a EventValues eventValues = contract.processSomeEvent(transactionReceipt); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u53ef\u89c2\u5bdf\u7684\u8fc7\u6ee4\u5668 Observable filter \uff0c\u800c\u4e0d\u662f\u76d1\u542c\u4e0e\u667a\u80fd\u5408\u7ea6\u76f8\u5173\u8054\u7684\u4e8b\u4ef6\uff1a contract.someEventObservable(startBlock, endBlock). .subscribe(event -> ...); 13.\u8c03\u7528\u5e38\u91cf\u65b9\u6cd5 \u5e38\u91cf\u65b9\u6cd5\u662f\u5728\u667a\u80fd\u5408\u7ea6\u4e2d\u8bfb\u53d6\u503c\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u6539\u53d8\u667a\u80fd\u5408\u7ea6\u7684\u72b6\u6001\u3002\u8fd9\u4e9b\u65b9\u6cd5\u4e0e\u5b83\u4eec\u751f\u6210\u7684\u667a\u80fd\u5408\u7ea6\u76f8\u540c\u7684\u65b9\u6cd5\u7b7e\u540d\u90fd\u662f\u53ef\u7528\u7684\uff1a Type result = contract.someMethod(<param1>, ...).send(); </param1> 14.\u52a8\u6001gas\u4ef7\u683c\u4e0e\u9650\u4ef7 \u5728\u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u65f6\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u6839\u636e\u8c03\u7528\u51fd\u6570\u6307\u5b9a\u4e0d\u540c\u7684gas\u4ef7\u683c\u548c\u6700\u5927\u503c\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e3a\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305\u521b\u5efa\u81ea\u5df1\u7684 ContractGasProvider \u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 \u6bcf\u4e00\u4e2a\u751f\u6210\u7684\u5c01\u88c5\u5305\u90fd\u5305\u542b\u4f5c\u4e3a\u5e38\u91cf\u7684\u6240\u6709\u667a\u80fd\u5408\u7ea6\u65b9\u6cd5\u540d\u79f0\uff0c\u8fd9\u6709\u52a9\u4e8e\u901a\u8fc7 switch \u6765\u8fdb\u884c\u7f16\u8bd1\u65f6\u95f4\u5339\u914d\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528 Greeter \u5408\u7ea6\uff1a Greeter greeter = new Greeter(...); greeter.setGasProvider(new DefaultGasProvider() { @Override public BigInteger getGasPrice(String contractFunc) { switch (contractFunc) { case Greeter.FUNC_GREET: return BigInteger.valueOf(22_000_000_000L); case Greeter.FUNC_KILL: return BigInteger.valueOf(44_000_000_000L); default: throw new NotImplementedException(); } } @Override public BigInteger getGasLimit(String contractFunc) { switch (contractFunc) { case Greeter.FUNC_GREET: return BigInteger.valueOf(4_300_000); case Greeter.FUNC_KILL: return BigInteger.valueOf(5_300_000); default: throw new NotImplementedException(); } } }); 15.web3j\u5b9e\u4f8b \u8bf7\u770b\u672c\u6587\u4e2d\u7684 EIP-20TelChain\u901a\u8bc1\u6807\u51c6\u667a\u80fd\u5408\u7ea6 \u7ae0\u8282\u3002 \u5df2\u7ecf\u7f16\u5199\u4e86\u4e24\u4e2a\u96c6\u6210\u6d4b\u8bd5\u6765\u5145\u5206\u5c55\u793a\u8fd9\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u901a\u8bc1\u529f\u80fd\u3002","title":"\u667a\u80fd\u5408\u7ea6"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#_1","text":"","title":"\u667a\u80fd\u5408\u7ea6"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#1","text":"\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u9009\u62e9\u4e09\u79cd\u8bed\u8a00\u6765\u7f16\u5199\u667a\u80fd\u5408\u7ea6\uff1a 1.solidity\uff0cTelChain\u7684\u65d7\u8230\u8bed\u8a00\uff0c\u4e5f\u662f\u5f00\u53d1\u667a\u80fd\u5408\u7ea6\u6700\u6d41\u884c\u7684\u8bed\u8a00\u3002 2.Serpent\uff0c\u4e00\u4e2a\u7528\u4e8e\u7f16\u5199\u667a\u80fd\u5408\u7ea6\u7684Python\u8bed\u8a00\u3002 3.\u7c7bLISP\u8bed\u8a00\uff08LLL\uff09\uff0c\u4f4e\u7ea7\u8bed\u8a00\uff0cSerpent\u63d0\u4f9b\u4e86LLL\u7684\u8d85\u96c6\u3002\u4f7f\u7528LLL\u7684\u4fe1\u606f\u4e0d\u591a\uff0c\u8fd9\u4e2a\u535a\u5ba2 /var/log/syrinx \u548cgithub\u76f8\u5173\u7684\u5e93 lll-resurrected GitHub \u4e0d\u9519\uff0c\u53ef\u4ee5\u53c2\u8003\u53c2\u8003\u3002 \u4e3a\u4e86\u5c06\u667a\u80fd\u5408\u7ea6\u90e8\u7f72\u5230TelChain\u533a\u5757\u94fe\u4e0a\uff0c\u5fc5\u987b\u5148\u5c06\u5176\u7f16\u8bd1\u6210\u5b57\u8282\u7801\u7684\u683c\u5f0f\uff0c\u7136\u540e\u5c06\u5176\u4f5c\u4e3a\u4ea4\u6613\u7684\u4e00\u90e8\u5206\u53d1\u9001\u3002java-sdk\u53ef\u4ee5\u5e2e\u4f60\u505a\u8fd9\u4e9b\u5e76\u4e14\u5c06\u5b83\u4e0esolidity\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u8d77\u6765\u3002\u4e3a\u4e86\u4e86\u89e3\u5e55\u540e\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003 \u667a\u80fd\u5408\u7ea6\u521b\u5efa \u4e2d\u7684\u7ec6\u8282\u3002 \u9274\u4e8esolidity\u662f\u7f16\u5199\u667a\u80fd\u5408\u7ea6\u7684\u9996\u9009\u8bed\u8a00\uff0c\u5b83\u4e5f\u662fjava-sdk\u652f\u6301\u7684\u8bed\u8a00\uff0c\u968f\u540e\u7684\u6240\u6709\u793a\u4f8b\u90fd\u4f1a\u7528\u5230\u5b83\u3002","title":"1.\u667a\u80fd\u5408\u7ea6\u7b80\u4ecb"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#2solidity","text":"solidity\u7684\u6982\u8ff0\u4e0d\u662f\u672c\u6587\u8981\u8ba8\u8bba\u7684\u91cd\u70b9\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u8981\u63a8\u8350\u4e00\u4e9b\u8d44\u6599\u7ed9\u5927\u5bb6\uff1a Contract Tutorial TelChain\u5b98\u7f51github\u7ef4\u57fa\u767e\u79d1\u4e2d\u7684\u667a\u80fd\u5408\u7ea6\u6307\u5357 Introduction to Smart Contracts solidity\u7684\u5b98\u7f51\u5f00\u53d1\u6587\u4ef6\u4e2d\u5173\u4e8e\u667a\u80fd\u5408\u7ea6\u7684\u7ae0\u8282\u3002 Writing a contract TelChain\u5b98\u65b9\u63d0\u4f9b\u5982\u4f55\u7f16\u5199\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u3002","title":"2.\u4ecesolidity\u8bed\u8a00\u5f00\u59cb"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#3solidity","text":"\u7f16\u5199solidity\u4ee3\u7801\u8fd0\u884c\uff1a $ solc <contract>.sol --bin --abi --optimize -o <output-dir>/ </output-dir></contract> bin \u548c ABI \u7f16\u8bd1\u5668\u53c2\u6570\u90fd\u9700\u8981\u5145\u5206\u5229\u7528java-sdk\u4e2d\u7684\u667a\u80fd\u5408\u7ea6\u3002 bin\uff0c\u8f93\u51fa\u5305\u542b\u5341\u516d\u8fdb\u5236\u7f16\u7801\u7684solidity\u4e8c\u8fdb\u5236\u6587\u4ef6\u4ee5\u63d0\u4f9b\u4ea4\u6613\u8bf7\u6c42\u3002 ABI\uff0c\u8f93\u51fa\u4e00\u4e2asolidity\u7684\u5e94\u7528\u7a0b\u5e8f\u4e8c\u8fdb\u5236\u63a5\u53e3\uff08ABI\uff09\u6587\u4ef6\uff0c\u5b83\u8be6\u7ec6\u63cf\u8ff0\u4e86\u6240\u6709\u53ef\u516c\u5f00\u8bbf\u95ee\u7684\u5408\u7ea6\u65b9\u6cd5\u53ca\u5176\u76f8\u5173\u53c2\u6570\u3002\u8fd9\u4e9b\u7ec6\u8282\u548c\u5408\u7ea6\u5730\u5740\u5bf9\u4e8e\u667a\u80fd\u5408\u7ea6\u7684\u4ea4\u4e92\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002ABI\u6587\u4ef6\u4e5f\u7528\u4e8e\u5c01\u88c5solidity\u7684\u667a\u80fd\u5408\u7ea6\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7solidity\u7684\u6d4f\u89c8\u5668\u9879\u76ee Remix \u5728\u6d4f\u89c8\u5668\u4e2d\u7f16\u5199\u548c\u7f16\u8bd1solidity\u4ee3\u7801\u3002\u4f7f\u7528solidity\u6d4f\u89c8\u5668\u9879\u76eeRemix IDE\u5bf9\u4e8e\u8f83\u5c0f\u7684\u667a\u80fd\u5408\u7ea6\u6765\u8bf4\u662f\u5f88\u597d\u7684\uff0c\u4f46\u662f\u4f60\u9047\u5230\u4e0e\u8f83\u5927\u7684\u667a\u80fd\u5408\u7ea6\u76f8\u5173\u7684\u95ee\u9898\u3002 \u8fd8\u53ef\u4ee5\u901a\u8fc7TelChain\u5ba2\u6237\u7aef\uff08\u5982geth\u548cParity\uff09\u7f16\u8bd1solidity\u4ee3\u7801\uff0cgo-sdk\u4e2d\u4e5f\u652f\u6301\u4f7f\u7528JSON-RPC\u65b9\u6cd5 eth_compileSolidity \u3002\u7136\u800c\uff0c\u5fc5\u987b\u5728\u5ba2\u6237\u7aef\u4e0a\u5b89\u88c5solidity\u7f16\u8bd1\u5668\uff0c\u8fd9\u6837\u5b83\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002","title":"3.\u7f16\u8bd1solidity\u6e90\u4ee3\u7801"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#4","text":"\u5982\u679c\u4f60\u60f3\u907f\u514d\u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u7684\u5e95\u5c42\u5b9e\u73b0\u7ec6\u8282\uff0cgo-sdk\u63d0\u4f9bsolidity\u7684\u667a\u80fd\u5408\u7ea6\u7684\u5c01\u88c5\u5305\uff0c\u4f7f\u4f60\u80fd\u591f\u901a\u8fc7go-sdk\u751f\u6210\u7684\u5305\u88c5\u5bf9\u8c61\u76f4\u63a5\u4e0e\u667a\u80fd\u5408\u7ea6\u7684\u6240\u6709\u65b9\u6cd5\u8fdb\u884c\u4ea4\u4e92\u3002 \u53e6\u5916\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u53d1\u9001\u5e38\u89c4\u4ea4\u6613\u6216\u5e0c\u671b\u5728\u4e0e\u667a\u80fd\u5408\u7ea6\u7684\u4ea4\u4e92\u4e2d\u6709\u66f4\u591a\u7684\u63a7\u5236\u6743\uff0c\u8bf7\u53c2\u9605 java-sdk\u6559\u7a0b\uff1ajava\u4f7f\u7528java-sdk\u5f00\u53d1TelChain\u667a\u80fd\u5408\u7ea6\u4ea4\u6613 ,\u8fd9\u91cc\u8bb2\u5230\u4e86\u521b\u5efa\u667a\u80fd\u5408\u7ea6\uff0c\u4e0e\u667a\u80fd\u5408\u7ea6\u8fdb\u884c\u4ea4\u6613\uff0c\u67e5\u8be2\u667a\u80fd\u5408\u7ea6\u7684\u72b6\u6001\u7b49\u5185\u5bb9\u3002","title":"4.\u90e8\u7f72\u667a\u80fd\u5408\u7ea6\u53ca\u4e0e\u667a\u80fd\u5408\u7ea6\u4ea4\u4e92"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#5demo","text":"go-sdk\u5728\u9879\u76ee\u76ee\u5f55\u4e2d\u63d0\u4f9b\u4e86\u8bb8\u591a\u667a\u80fd\u5408\u7ea6\u793a\u4f8bdemo\uff1a codegen/src/test/resources/solidity \u5b83\u8fd8\u63d0\u4f9b\u4e86\u96c6\u6210\u6d4b\u8bd5\uff0c\u7528\u4e8e\u6f14\u793a\u5728\u96c6\u6210\u6d4b\u8bd5\u6a21\u5757\u4e2d\u90e8\u7f72\u548c\u4f7f\u7528\u8fd9\u4e9b\u667a\u80fd\u5408\u7ea6\uff1a integration-tests/src/test/java/org/bifj/protocol/scenarios","title":"5.\u667a\u80fd\u5408\u7ea6\u793a\u4f8bdemo"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#6","text":"go-sdk\u652f\u6301go\u4eceABI\u6587\u4ef6\u4e2d\u81ea\u52a8\u751f\u6210\u667a\u80fd\u5408\u7ea6\u51fd\u6570\u5c01\u88c5\u5305\u3002 go-sdk\u8fd8\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177\u6765\u751f\u6210\u667a\u80fd\u5408\u7ea6\u51fd\u6570\u5c01\u88c5\u5305\uff1a $ bifj solidity generate [--javaTypes|--solidityTypes] /path/to/<smart-contract>.bin /path/to/<smart-contract>.abi -o /path/to/src/main/java -p com.your.organisation.name </smart-contract></smart-contract> \u5728go-sdk\u76843.x\u4e4b\u524d\u7684\u7248\u672c\u4e2d\uff0c\u751f\u6210\u7684\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305\u4f7f\u7528\u539f\u751fSolidity\u7c7b\u578b\u3002\u4ecego-sdk 3.x\u5f00\u59cb\uff0c\u9ed8\u8ba4\u4f1a\u91c7\u7528go\u7c7b\u578b\u3002\u53ef\u4ee5\u4f7f\u7528 &#x2013;solidityTypes \u547d\u4ee4\u884c\u53c2\u6570\u521b\u5efasolidity\u7c7b\u578b\u3002 \u8fd8\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8c03\u7528go\u65b9\u6cd5\u6765\u751f\u6210\u5c01\u88c5\u5305\uff1a org.gbif.codegen.SolidityFunctionWrapperGenerator /path/to/<smart-contract>.bin /path/to/<smart-contract>.abi -o /path/to/src/main/java -p com.your.organisation.name </smart-contract></smart-contract> \u5176\u4e2dbin\u548cabi\u662f\u6839\u636e\u672c\u6587\u4e2d \u7f16\u8bd1solidity\u6e90\u4ee3\u7801 \u7ae0\u8282\u7684\u65b9\u6cd5\u83b7\u5f97\u7684\u3002 \u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305\u652f\u6301\u6240\u6709\u4e0e\u667a\u80fd\u5408\u7ea6\u4e00\u8d77\u5de5\u4f5c\u7684\u901a\u7528\u64cd\u4f5c\uff1a \u6784\u5efa\u4e0e\u90e8\u7f72 \u8c03\u7528\u4ea4\u6613\u548c\u4e8b\u4ef6 \u8c03\u7528\u53c2\u6570\u65b9\u6cd5 \u786e\u5b9a\u5408\u7ea6\u6709\u6548\u6027 \u4efb\u4f55\u9700\u8981\u5e95\u5c42JSON-RPC\u8c03\u7528\u7684\u65b9\u6cd5\u8c03\u7528\u90fd\u4f1a\u6709\u4e00\u4e2a\u8fd4\u56de\u4ee5\u907f\u514d\u963b\u585e\u3002 go-sdk\u8fd8\u652f\u6301\u901a\u8fc7\u547d\u4ee4\u884c\u5de5\u5177\u76f4\u63a5\u4eceTunffle\u7684\u5408\u7ea6\u6a21\u5f0f\u751f\u6210go\u667a\u80fd\u5408\u7ea6\u529f\u80fd\u5c01\u88c5\u5305\u3002 $ bifj truffle generate [--javaTypes|--solidityTypes] /path/to/<truffle-smart-contract-output>.json -o /path/to/src/main/java -p com.your.organisation.name </truffle-smart-contract-output> \u8fd9\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528go\u65b9\u6cd5\u6765\u8c03\u7528\uff1a org.gbif.codegen.TruffleJsonFunctionWrapperGenerator /path/to/<truffle-smart-contract-output>.json -o /path/to/src/main/java -p com.your.organisation.name </truffle-smart-contract-output> \u4ee5\u8fd9\u79cd\u65b9\u5f0f\u751f\u6210\u7684\"\u589e\u5f3a\u578b\"\u7684\u5c01\u88c5\u5305\u4f1a\u66b4\u9732\u5408\u7ea6\u7684\u6bcf\u4e2a\u7f51\u7edc\u90e8\u7f72\u5730\u5740\u3002\u8fd9\u4e9b\u5730\u5740\u6765\u81ea\u4e8e\u53d1\u5e03Truffle\u90e8\u7f72\u65f6\u7684\u5c01\u88c5\u5305\u3002","title":"6.\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#7","text":"\u667a\u80fd\u5408\u7ea6\u7684\u6784\u5efa\u548c\u90e8\u7f72\u53d1\u751f\u5728 deploy \u65b9\u6cd5\u4e2d\uff1a YourSmartContract contract = YourSmartContract.deploy( <bifj>, <credentials>, GAS_PRICE, GAS_LIMIT, [<initialvalue>,] <param1>, ..., <paramn>).send(); </paramn></param1></initialvalue></credentials></bifj> contractObj, err := connection.Core.NewContract(contract.Abi) chainId, _ := connection.Core.GetChainId() nonce, _ := connection.Core.GetTransactionCount(singAddr, block.LATEST) var sender utils.Address sender = utils.StringToAddress(singAddr) tx := &account.SignTxParams{ ChainId: chainId, Nonce: nonce, GasPrice: big.NewInt(200), GasLimit: 200000, Sender: &sender, Recipient: nil, Amount: nil, } hash, err := contractObj.Deploy(tx, false, singAddrPriKey, contract.ByteCode) \u8fd9\u4e2a\u65b9\u6cd5\u5c06\u4f7f\u7528\u63d0\u4f9b\u7684\u51ed\u636e\u548c\u6784\u9020\u51fd\u6570\u53c2\u6570\u503c\u5728TelChain\u533a\u5757\u94fe\u4e0a\u521b\u5efa\u667a\u80fd\u5408\u7ea6\u7684\u65b0\u5b9e\u4f8b\u3002 \u5982\u679c\u4f60\u7684\u667a\u80fd\u5408\u7ea6\u5728\u6784\u9020\u4e0a\u63a5\u53d7\u79ef\u5206\uff0c\u5219\u53ea\u9700\u8981\u521d\u59cb\u5316\u53c2\u6570\u503c <initialvalue></initialvalue> \u3002\u8fd9\u5c31\u8981\u6c42\u5728\u5408\u7ea6\u4e2d\u51fa\u73b0\u652f\u4ed8 payable \u3002 \u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5b9e\u4f8b\uff0c\u5b83\u5305\u542b\u667a\u80fd\u5408\u7ea6\u7684\u5e95\u5c42\u5730\u5740\u3002\u5982\u679c\u5e0c\u671b\u7528\u73b0\u6709\u7684\u667a\u80fd\u5408\u7ea6\u6784\u9020\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u7684\u5b9e\u4f8b\uff0c\u53ea\u9700\u4f20\u9012\u5730\u5740\uff1a YourSmartContract contract = YourSmartContract.load( \"0x<address>|<ensname>\", bifj, credentials, GAS_PRICE, GAS_LIMIT); </ensname></address>","title":"7.\u6784\u5efa\u4e0e\u90e8\u7f72\u667a\u80fd\u5408\u7ea6"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#8","text":"\u4f7f\u7528\u6b64\u65b9\u6cd5\uff0c\u53ef\u80fd\u5e0c\u671b\u786e\u5b9a\u6240\u52a0\u8f7d\u7684\u5408\u7ea6\u5730\u5740\u662f\u4f60\u6240\u671f\u671b\u7684\u667a\u80fd\u5408\u7ea6\u3002\u4e3a\u6b64\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 isValid \u5408\u7ea6\u65b9\u6cd5\uff0c\u53ea\u6709\u5728\u5408\u7ea6\u5730\u5740\u4e2d\u90e8\u7f72\u7684\u5b57\u8282\u7801\u4e0e\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305\u4e2d\u7684\u5b57\u8282\u7801\u5339\u914d\u65f6\u624d\u4f1a\u8fd4\u56detrue\u3002 contract.isValid(); // returns false if the contract bytecode does not match what's deployed // at the provided address","title":"8.\u667a\u80fd\u5408\u7ea6\u6709\u6548\u6027"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#9","text":"go-sdk\u63d0\u4f9b\u4e86\u4e00\u4e2a \u4ea4\u6613\u7ba1\u7406\u5668TransactionManager \u6765\u63a7\u5236\u4f60\u8fde\u63a5\u5230TelChain\u5ba2\u6237\u7aef\u7684\u65b9\u5f0f\u3002\u9ed8\u8ba4\u673a\u5236\u4f7f\u7528go-sdk\u7684 RawTransactionManager \uff0c\u5b83\u4e0eTelChain\u94b1\u5305\u6587\u4ef6\u4e00\u8d77\u5de5\u4f5c\uff0c\u5728\u63d0\u4ea4\u5230\u7f51\u7edc\u4e4b\u524d\u79bb\u7ebf\u5730\u7b7e\u7f72\u4ea4\u6613\u3002 \u4f46\u662f\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4fee\u6539\u4ea4\u6613\u7ba1\u7406\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5176\u4f20\u9012\u7ed9\u667a\u80fd\u5408\u7ea6\u90e8\u7f72\u548c\u6784\u5efa\u65b9\u6cd5 deploy \uff0c\u800c\u4e0d\u662f\u51ed\u636e\u5bf9\u8c61\uff0c\u5373\uff1a YourSmartContract contract = YourSmartContract.deploy( <bifj>, <transactionmanager>, GAS_PRICE, GAS_LIMIT, <param1>, ..., <paramn>).send(); </paramn></param1></transactionmanager></bifj> \u9664\u4e86 RawTransactionManager \u4e4b\u5916\uff0cjava-sdk\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5ba2\u6237\u7aef\u4ea4\u6613\u7ba1\u7406\u5668 ClientTransactionManager \uff0c\u5b83\u5c06\u4f60\u7684\u4ea4\u6613\u7b7e\u7f72\u7684\u8d23\u4efb\u4f20\u9012\u7ed9\u4f60\u6b63\u5728\u8fde\u63a5\u7684TelChain\u5ba2\u6237\u7aef\u3002 \u8fd8\u6709\u4e00\u4e2a ReadonlyTransactionManager \uff0c\u7528\u4e8e\u53ea\u4ece\u667a\u80fd\u5408\u7ea6\u4e2d\u67e5\u8be2\u6570\u636e\uff0c\u800c\u4e0d\u4e0e\u5b83\u8fdb\u884c\u4ea4\u6613\u3002","title":"9.\u4ea4\u6613\u7ba1\u7406\u5668"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#10ideip-155","text":"RawTransactionManager \u91c7\u7528\u4e00\u4e2a\u53ef\u9009\u7684\u94fe\u8868\u53c2\u6570\u6765\u6307\u5b9a\u5728 EIP-155 \u4e0a\u4f7f\u7528\u7684\u94feID\u3002\u8fd9\u9632\u6b62\u4e86\u4e00\u4e2a\u94fe\u88ab\u91cd\u65b0\u5e7f\u64ad\u5230\u53e6\u4e00\u4e2a\u94fe\u4e0a\u7684\u4ea4\u6613\uff0c\u4f8b\u5982\u4ece Ropsten \u5230 Mainnet \uff1a TransactionManager transactionManager = new RawTransactionManager( bifj, credentials, ChainId.MAIN_NET); \u4e3a\u4e86\u907f\u514d\u66f4\u6539\u914d\u7f6e\u6216\u4ee3\u7801\u6765\u6307\u5b9a\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u94fe\uff0cgo-sdk\u9ed8\u8ba4\u662f\u4e0d\u6307\u5b9a\u4ea4\u6613\u4e0a\u7684\u94feID\uff0c\u4ee5\u7b80\u5316\u4e0e\u5e93\u95f4\u7684\u4ea4\u4e92\u3002\u7136\u800c\uff0cTelChain\u793e\u533a\u7684\u5efa\u8bae\u662f\u4f7f\u7528\u94feID\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u8bf7\u6c42\u83b7\u5f97\u4f60\u7684TelChain\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u7684\u7f51\u7edc\u7684\u94feID\uff1a gbif.netVersion().send().getNetVersion();","title":"10.\u5728\u4ea4\u6613\u4e2d\u6307\u5b9a\u94feID:EIP-155"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#11","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53go-sdk\u5411TelChain\u5ba2\u6237\u7aef\u63d0\u4ea4\u65b0\u7684\u4ea4\u6613\u65f6\uff0cgo-sdk\u5c06\u7ee7\u7eed\u8f6e\u8be2\u5ba2\u6237\u7aef\u76f4\u5230\u6536\u636e\u5230 TransactionReceipt \uff0c\u6307\u793a\u4ea4\u6613\u5df2\u88ab\u6dfb\u52a0\u63d0\u4ea4\u5230\u533a\u5757\u94fe\u4e0a\u3002\u5982\u679c\u4f60\u7528go-sdk\u5f02\u6b65\u53d1\u9001\u591a\u4e2a\u4ea4\u6613\uff0c\u5219\u8fd9\u4f1a\u5bfc\u81f4\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8f6e\u8be2\u5ba2\u6237\u7aef\u3002 \u5728go-sdk\u4e2d\u63d0\u4f9b\u4e86\u591a\u4e2a\u5904\u7406\u5668\uff1a \u6ce8\u610f \uff1a\u5728\u6392\u961f\u4ea4\u6613\u6536\u636e\u5904\u7406\u5668\u7684\u521d\u59cb\u54cd\u5e94\u4e2d\u4e5f\u63d0\u4f9b\u4e86 EmptyTransactionReceipt \u3002\u8fd9\u5141\u8bb8\u8c03\u7528\u65b9\u5bf9\u63d0\u4ea4\u5230\u7f51\u7edc\u7684\u4ea4\u6613\u62e5\u6709\u4ea4\u6613\u54c8\u5e0c\u3002 \u5982\u679c\u4f60\u4e0d\u5e0c\u671b\u4f7f\u7528\u9ed8\u8ba4\u5904\u7406\u5668 PollingTransactionReceiptProcessor \uff0c\u5219\u53ef\u4ee5\u6307\u5b9a\u4ea4\u6613\u6536\u636e\u5904\u7406\u5668\u4ee3\u7801\u5982\u4e0b\uff1a TransactionReceiptProcessor transactionReceiptProcessor = new QueuingTransactionReceiptProcessor(bifj, new Callback() { @Override public void accept(TransactionReceipt transactionReceipt) { // process transactionReceipt } @Override public void exception(Exception exception) { // handle exception } TransactionManager transactionManager = new RawTransactionManager( bifj, credentials, ChainId.MAIN_NET, transactionReceiptProcessor);","title":"11.\u4ea4\u6613\u6536\u636e\u5904\u7406\u5668"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#12","text":"\u6240\u6709\u4ea4\u6613\u7684\u667a\u80fd\u5408\u7ea6\u65b9\u6cd5\u4ee5\u76f8\u540c\u7684\u53c2\u6570\u503c\u547d\u540d\u4e3a\u5b83\u4eec\u7684solidity\u65b9\u6cd5\u3002\u4ea4\u6613\u8c03\u7528\u4e0d\u8fd4\u56de\u4efb\u4f55\u503c\uff0c\u540c\u6837\u4e0d\u9700\u8981\u8003\u8651\u65b9\u6cd5\u6307\u5b9a\u7684\u8fd4\u56de\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u6240\u6709\u4ea4\u6613\u7684\u65b9\u6cd5\uff0c\u53ea\u662f\u8fd4\u56de\u4e0e\u4ea4\u6613\u5173\u8054\u7684\u4ea4\u6613\u6536\u636e\u3002 TransactionReceipt transactionReceipt = contract.someMethod( <param1>, ...).send(); </param1> \u4ea4\u6613\u6536\u636e\u662f\u5341\u5206\u6709\u7528\u7684\u6709\u4e24\u4e2a\u4e3b\u8981\u539f\u56e0\uff1a \u5728\u667a\u80fd\u5408\u7ea6\u4e2d\u5b9a\u4e49\u7684\u4efb\u4f55\u4e8b\u4ef6\u90fd\u5c06\u7528\u4e00\u4e2a\u540d\u4e3a process<event name>Event</event> \u65b9\u6cd5\u5728\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305\u4e2d\u8fdb\u884c\u8868\u793a\uff0c\u8be5\u4e8b\u4ef6\u91c7\u7528\u4ea4\u6613\u6536\u636e\uff0c\u5e76\u4ece\u4e2d\u63d0\u53d6\u7d22\u5f15\u548c\u975e\u7d22\u5f15\u4e8b\u4ef6\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u5728 EventValues \u5b9e\u4f8b\u4e2d\u88ab\u89e3\u7801\u8fd4\u56de\uff1a EventValues eventValues = contract.processSomeEvent(transactionReceipt); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u53ef\u89c2\u5bdf\u7684\u8fc7\u6ee4\u5668 Observable filter \uff0c\u800c\u4e0d\u662f\u76d1\u542c\u4e0e\u667a\u80fd\u5408\u7ea6\u76f8\u5173\u8054\u7684\u4e8b\u4ef6\uff1a contract.someEventObservable(startBlock, endBlock). .subscribe(event -> ...);","title":"12.\u8c03\u7528\u4ea4\u6613\u548c\u4e8b\u4ef6"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#13","text":"\u5e38\u91cf\u65b9\u6cd5\u662f\u5728\u667a\u80fd\u5408\u7ea6\u4e2d\u8bfb\u53d6\u503c\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u6539\u53d8\u667a\u80fd\u5408\u7ea6\u7684\u72b6\u6001\u3002\u8fd9\u4e9b\u65b9\u6cd5\u4e0e\u5b83\u4eec\u751f\u6210\u7684\u667a\u80fd\u5408\u7ea6\u76f8\u540c\u7684\u65b9\u6cd5\u7b7e\u540d\u90fd\u662f\u53ef\u7528\u7684\uff1a Type result = contract.someMethod(<param1>, ...).send(); </param1>","title":"13.\u8c03\u7528\u5e38\u91cf\u65b9\u6cd5"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#14gas","text":"\u5728\u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u65f6\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u6839\u636e\u8c03\u7528\u51fd\u6570\u6307\u5b9a\u4e0d\u540c\u7684gas\u4ef7\u683c\u548c\u6700\u5927\u503c\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e3a\u667a\u80fd\u5408\u7ea6\u5c01\u88c5\u5305\u521b\u5efa\u81ea\u5df1\u7684 ContractGasProvider \u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 \u6bcf\u4e00\u4e2a\u751f\u6210\u7684\u5c01\u88c5\u5305\u90fd\u5305\u542b\u4f5c\u4e3a\u5e38\u91cf\u7684\u6240\u6709\u667a\u80fd\u5408\u7ea6\u65b9\u6cd5\u540d\u79f0\uff0c\u8fd9\u6709\u52a9\u4e8e\u901a\u8fc7 switch \u6765\u8fdb\u884c\u7f16\u8bd1\u65f6\u95f4\u5339\u914d\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528 Greeter \u5408\u7ea6\uff1a Greeter greeter = new Greeter(...); greeter.setGasProvider(new DefaultGasProvider() { @Override public BigInteger getGasPrice(String contractFunc) { switch (contractFunc) { case Greeter.FUNC_GREET: return BigInteger.valueOf(22_000_000_000L); case Greeter.FUNC_KILL: return BigInteger.valueOf(44_000_000_000L); default: throw new NotImplementedException(); } } @Override public BigInteger getGasLimit(String contractFunc) { switch (contractFunc) { case Greeter.FUNC_GREET: return BigInteger.valueOf(4_300_000); case Greeter.FUNC_KILL: return BigInteger.valueOf(5_300_000); default: throw new NotImplementedException(); } } });","title":"14.\u52a8\u6001gas\u4ef7\u683c\u4e0e\u9650\u4ef7"},{"location":"%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/#15web3j","text":"\u8bf7\u770b\u672c\u6587\u4e2d\u7684 EIP-20TelChain\u901a\u8bc1\u6807\u51c6\u667a\u80fd\u5408\u7ea6 \u7ae0\u8282\u3002 \u5df2\u7ecf\u7f16\u5199\u4e86\u4e24\u4e2a\u96c6\u6210\u6d4b\u8bd5\u6765\u5145\u5206\u5c55\u793a\u8fd9\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u901a\u8bc1\u529f\u80fd\u3002","title":"15.web3j\u5b9e\u4f8b"},{"location":"%E6%A8%A1%E5%9D%97/","text":"\u6a21\u5757 1.\u6a21\u5757\u7b80\u4ecb \u5982\u4f55\u4f7f\u7528go-sdk\u4e3ago\u5e94\u7528\u589e\u52a0TelChain\u533a\u5757\u94fe\u652f\u6301\uff0c\u672c\u6559\u7a0b\u5185\u5bb9\u5373\u6d89\u53caTelChain\u4e2d\u7684\u6838\u5fc3\u6982\u5ff5\uff0c\u4f8b\u5982\u8d26\u6237\u7ba1\u7406\u5305\u62ec\u8d26\u6237\u7684\u521b\u5efa\u3001\u94b1\u5305\u521b\u5efa\u3001\u4ea4\u6613\u8f6c\u8d26\uff0c\u4ea4\u6613\u4e0e\u72b6\u6001\u3001\u667a\u80fd\u5408\u7ea6\u5f00\u53d1\u4e0e\u4ea4\u4e92\u3001\u8fc7\u6ee4\u5668\u548c\u4e8b\u4ef6\u7b49\uff0c\u540c\u65f6\u4e5f\u8be6\u7ec6\u8bf4\u660e\u5982\u4f55\u4f7f\u7528go-sdk\u63d0\u4f9b\u7684API\u5f00\u53d1\u63a5\u53e3\u4e0eTelChain\u8fdb\u884c\u4ea4\u4e92\uff0c\u662fgo\u5de5\u7a0b\u5e08\u5b66\u4e60TelChain\u5e94\u7528\u5f00\u53d1(DApp)\u7684\u4e0d\u4e8c\u9009\u62e9\u3002 TelChain\u6982\u8ff0 TelChain\u662f\u5907\u53d7\u5173\u6ce8\u7684\u533a\u5757\u94fe\uff0c\u5b83\u57fa\u4e8e\u5bc6\u7801\u5b66\u6280\u672f\u548cP2P\u901a\u4fe1\u6280\u672f \u6784\u5efa\u4e86\u4e00\u4e2a\u53bb\u4e2d\u5fc3\u5316\u7684\u5e73\u53f0\uff0c\u6240\u6709\u7684\u4ea4\u6613\u540c\u6b65\u4fdd\u5b58\u5728\u6bcf\u4e2a\u8282\u70b9\u4e2d\uff0c \u901a\u8fc7\u5c06\u533a\u5757\u5355\u5411\u7ea7\u8054\u6210\u94fe\uff0cTelChain\u6709\u6548\u7684\u4fdd\u8bc1\u4e86\u4ea4\u6613\u7684\u4e0d\u53ef\u7be1\u6539\uff1a \u667a\u80fd\u5408\u7ea6\u5e73\u53f0 TelChain\u662f\u7b2c\u4e00\u4e2a\u5b9e\u73b0\u4e86\u865a\u62df\u673a\u7684\u533a\u5757\u94fe\uff0c\u56e0\u6b64\u4e3a\u667a\u80fd\u5408\u7ea6 - Smart Contract - \u7684\u8fd0\u884c\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u652f\u6301\u73af\u5883\u3002\u4e5f\u6b63\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0cTelChain\u88ab\u79f0\u4e3a\u533a\u5757\u94fe 2.0\uff0c\u4ee5\u533a\u522b\u4e8e\u6bd4\u7279\u5e01\u4ee3\u8868\u7684\u4ee5\u6570\u5b57\u52a0\u5bc6\u8d27\u5e01\u4e3a\u6838\u5fc3\u7279\u5f81\u7684\u533a\u5757\u94fe1.0\u3002 \u53ef\u4ee5\u5c06\u667a\u80fd\u5408\u7ea6\u7406\u89e3\u4e3a\u673a\u5668\u4e4b\u95f4\u7684\u5408\u540c\u7ea6\u5b9a\uff0c\u5728\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u65f6\u81ea\u52a8 \u6267\u884c\u7ea6\u5b9a\u597d\u7684\u903b\u8f91\uff0c\u4f8b\u5982\u5728\u4fdd\u9669\u7406\u8d54\u6d41\u7a0b\u4e2d\uff0c\u5982\u679c\u7406\u8d54\u6761\u4ef6\u6ee1\u8db3\u5c31\u81ea\u52a8 \u5c06\u8d54\u507f\u91d1\u91ca\u653e\u7ed9\u51fa\u9669\u4eba\uff0c\u8fd9\u4e2a\u6d41\u7a0b\u5c31\u53ef\u4ee5\u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u6765\u5b9e\u73b0\u3002 \u6709\u591a\u79cd\u8bed\u8a00\u53ef\u4ee5\u5f00\u53d1TelChain\u667a\u80fd\u5408\u7ea6\uff0c\u4f46\u76ee\u524d\u6700\u5e38\u7528\u7684\u662f\u7c7b\u4f3c\u4e8eJavaScript\u7684 Solidity\u8bed\u8a00\u3002\u672c\u8bfe\u7a0b\u4e2d\u5c06\u91c7\u7528Solidity\u8bb2\u89e3\u667a\u80fd\u5408\u7ea6\u7684\u5f00\u53d1\u3002 JSON RPC\u4e0ego-sdk \u5982\u679c\u6211\u4eec\u5e0c\u671b\u6784\u9020\u4e00\u4e2a\u53bb\u4e2d\u5fc3\u5316\u5e94\u7528\uff08DApp\uff09\uff0c\u9664\u4e86\u667a\u80fd\u5408\u7ea6\u7684\u5f00\u53d1\uff0c \u901a\u5e38\u8fd8\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u5f00\u53d1\u8bed\u8a00\u4e3a\u7528\u6237\u63d0\u4f9b\u64cd\u4f5c\u667a\u80fd\u5408\u7ea6\u7684\u7528\u6237\u63a5\u53e3\uff0c\u4f8b\u5982 \u5f00\u53d1\u4e00\u4e2a\u7f51\u9875\u3001\u4e00\u4e2a\u624b\u673aApp\u6216\u8005\u4e00\u4e2a\u684c\u9762\u5e94\u7528\u3002\u8fd9\u4e9b\u4ee3\u7801\u90fd\u9700\u8981\u4e0eTelChain\u8fdb\u884c\u4ea4\u4e92\u3002 TelChain\u89c4\u5b9a\u4e86\u6bcf\u4e2a\u8282\u70b9\u9700\u8981\u5b9e\u73b0\u7684JSON RPC API \u5e94\u7528\u5f00\u53d1\u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u662f\u4f20\u8f93\u65e0\u5173\u7684\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7HTTP\u3001websocket\u6216IPC\u7b49\u591a\u79cd \u901a\u4fe1\u673a\u5236\u6765\u4f7f\u7528\u8be5\u63a5\u53e3\u534f\u8bae\u64cd\u4f5cTelChain\u8282\u70b9\uff1a \u7406\u8bba\u4e0a\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u8bed\u8a00\u57fa\u4e8eJSON RPC\u63a5\u53e3\u5f00\u53d1\u51faTelChain\u4e4b\u4e0a\u7684 \u53bb\u4e2d\u5fc3\u5316\u5e94\u7528\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u63d0\u9ad8\u5f00\u53d1\u6548\u7387\uff0c\u66f4\u597d\u7684\u529e\u6cd5\u662f \u4f7f\u7528\u7279\u5b9a\u8bed\u8a00\u7684JSON RPC\u5c01\u88c5\u5e93\uff0c\u8fd9\u4e9b\u5e93\u5c01\u88c5\u4e86JSON RPC\u7684\u534f\u8bae\u7ec6\u8282\uff0c \u6709\u52a9\u4e8e\u5f00\u53d1\u4eba\u5458\u805a\u7126\u5728\u4e1a\u52a1\u903b\u8f91\u7684\u5b9e\u73b0\u4e0a\u3002 bifj \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u7528\u4e8e\u96c6\u6210TelChain\u529f\u80fd\u7684go\u5f00\u53d1\u5e93\uff0c\u5b83\u662fgo\u7248\u672c\u7684TelChainJSON RPC \u63a5\u53e3\u534f\u8bae\u5c01\u88c5\u5b9e\u73b0\uff0c\u5982\u679c\u9700\u8981\u5c06\u4f60\u7684go\u5e94\u7528\u63a5\u5165TelChain\uff0c\u7528go-sdk\u5c31\u5bf9\u4e86\u3002 go-sdk\u4f53\u7cfb\u6982\u8ff0 go-sdk\u7684\u529f\u80fd\u7ec4\u7ec7\u5728\u4e0d\u540c\u7684\u5305\u4e2d\uff0c\u4e0b\u56fe\u5c55\u793a\u4e86 org.bifj \u4e3b\u8981\u5305\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\uff1a core \uff1aJSON RPC\u534f\u8bae\u7684\u5c01\u88c5\u4e3b\u8981\u7531\u5305 org.gbif.core \u5b9e\u73b0\uff0c\u5b83\u4f9d\u8d56\u4e8e org.gbif.crypto \u5305\u63d0\u4f9b\u7684\u5bc6\u94a5\u4e0e\u7b7e\u540d\u76f8\u5173\u7684\u529f\u80fd\uff0c\u4ee5\u53ca org.gbif.abi \u5305\u63d0\u4f9b\u7684java/solidity\u7c7b\u578b\u6620\u5c04\u652f\u6301\u3002 console \uff1a org.gbif.console \u5305\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5355\u72ec\u8fd0\u884c\u7684\u547d\u4ee4\u884c\u7a0b\u5e8fgo-sdk\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u6765 \u751f\u6210solidity\u5408\u7ea6\u7684go\u5c01\u88c5\u7c7b\uff0c\u5176\u4e2d\uff0c org.gbif.codegen \u5305\u5b9e\u73b0\u4e86\u4eceabi\u5230go\u5c01\u88c5\u7c7b\u7684\u4ee3\u7801\u751f\u6210\u3002 \u8282\u70b9\u76f8\u5173 \uff1a org.gbif.infura \u5305\u5c01\u88c5\u4e86\u5bf9Infura\u516c\u5171\u8282\u70b9\u65f3http\u8bbf\u95ee\u670d\u52a1\u63a5\u53e3\uff0c org.gbif.geth \u548c org.gbif.parity \u5219\u5206\u522b\u5c01\u88c5\u4e86\u8fd9\u4e24\u79cd\u5e38\u7528TelChain\u8282\u70b9\u8f6f\u4ef6\u65f3\u7ba1\u7406\u63a5\u53e3\u3002 \u672c\u8bfe\u7a0b\u7684\u76ee\u7684\u662f\u5e2e\u52a9go\u5de5\u7a0b\u5e08\u5feb\u901f\u638c\u63e1\u4f7f\u7528go-sdk\u5f00\u53d1TelChain\u5e94\u7528\u7684\u6280\u80fd\uff0c\u56e0\u6b64 \u4e3b\u8981\u4ee5go-sdk\u7684\u5f00\u53d1\u63a5\u53e3\u4e3a\u4e3b\u7ebf\u6765\u5c55\u5f00\u8bfe\u7a0b\u5185\u5bb9\uff0c\u540c\u65f6\u7a7f\u63d2\u8bb2\u89e3TelChain\u7684\u4e00\u4e9b\u57fa\u672c \u6982\u5ff5\uff0c\u4f8b\u5982\uff1a\u8d26\u6237\u3001\u4ea4\u6613\u548c\u667a\u80fd\u5408\u7ea6\u7684\u5f00\u53d1\u7b49\u3002 \u8bfe\u7a0b\u5185\u5bb9\u6982\u8ff0 1.hello,bifj \u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684java\u5e94\u7528\u7684\u5f00\u53d1\u6765\u8bb2\u89e3\u4f7f\u7528java-sdk\u8fdb\u884cTelChain\u5e94\u7528\u5f00\u53d1\u7684\u6700\u7b80\u6d41\u7a0b\uff0c\u901a\u8fc7\u8fd9\u4e00\u90e8\u5206\u7684\u5b66\u4e60\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728\u81ea\u5df1\u7684java\u5e94\u7528\u4e2d\u5f15\u5165TelChain\u652f\u6301\u4e86\u3002 2.\u8d26\u6237\u7ba1\u7406 \u5c06\u8be6\u7ec6\u4ecb\u7ecdjava-sdk\u63d0\u4f9b\u7684\u8d26\u6237\u7ba1\u7406\u63a5\u53e3\u3002\u5982\u679c\u4f60\u5bf9\u5f00\u53d1\u94b1\u5305\u5e94\u7528\uff08\u4e2d\u5fc3\u5316/\u53bb\u4e2d\u5fc3\u5316\uff09\u611f\u5174\u8da3\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4f1a\u6709\u5f88\u5927\u7684\u5e2e\u52a9\u3002java-sdk\u521b\u5efa\u8d26\u6237\uff0c\u521b\u5efa\u94b1\u5305\uff0c\u8f6c\u8d26\u7279\u522b\u662f\u4ee3\u5e01\u8f6c\u8d26\u7b49\u4e30\u5bcc\u7684\u8fdb\u884c\u4ea4\u6613\u7684\u529f\u80fd\u3002 3.\u72b6\u6001\u4e0e\u4ea4\u6613 \u4e3b\u8981\u8bb2\u89e3java-sdk\u63d0\u4f9b\u7684\u4ea4\u6613\u64cd\u4f5c\u63a5\u53e3\uff0c\u540c\u65f6\u4e5f\u4ecb\u7ecd\u4e00\u4e9b\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u4f8b\u5982\u72b6\u6001\u3001\u88f8\u4ea4\u6613\u3001gas\u7b49\u3002\u8fd9\u90e8\u5206\u5185\u5bb9\u5c06\u5e2e\u52a9\u4f60\u7406\u6e05java\u5e94\u7528\u4e0eTelChain\u4ea4\u4e92\u7684\u5927\u591a\u6570\u95ee\u9898\u3002 4.\u667a\u80fd\u5408\u7ea6 \u5c06\u901a\u8fc7\u4e00\u4e2a\u6295\u7968\u5408\u7ea6\u7684\u5f00\u53d1\u3001\u7f16\u8bd1\u3001\u4ee3\u7801\u751f\u6210\u3001\u90e8\u7f72\u4e0e\u4ea4\u4e92\u7684\u5b8c\u6574\u6d41\u7a0b\uff0c\u8bb2\u89e3\u4f7f\u7528java-sdk\u64cd\u4f5csolitiy\u667a\u80fd\u5408\u7ea6\u7684\u65b9\u6cd5\u3002 5.\u8fc7\u6ee4\u5668\u4e0e\u4e8b\u4ef6 \u4e3b\u8981\u8bb2\u89e3TelChain\u7684\u901a\u77e5\u673a\u5236\u548cjava-sdk\u7684\u54cd\u5e94\u5f0f\u5c01\u88c5\u63a5\u53e3\u3002","title":"\u6a21\u5757"},{"location":"%E6%A8%A1%E5%9D%97/#_1","text":"","title":"\u6a21\u5757"},{"location":"%E6%A8%A1%E5%9D%97/#1","text":"\u5982\u4f55\u4f7f\u7528go-sdk\u4e3ago\u5e94\u7528\u589e\u52a0TelChain\u533a\u5757\u94fe\u652f\u6301\uff0c\u672c\u6559\u7a0b\u5185\u5bb9\u5373\u6d89\u53caTelChain\u4e2d\u7684\u6838\u5fc3\u6982\u5ff5\uff0c\u4f8b\u5982\u8d26\u6237\u7ba1\u7406\u5305\u62ec\u8d26\u6237\u7684\u521b\u5efa\u3001\u94b1\u5305\u521b\u5efa\u3001\u4ea4\u6613\u8f6c\u8d26\uff0c\u4ea4\u6613\u4e0e\u72b6\u6001\u3001\u667a\u80fd\u5408\u7ea6\u5f00\u53d1\u4e0e\u4ea4\u4e92\u3001\u8fc7\u6ee4\u5668\u548c\u4e8b\u4ef6\u7b49\uff0c\u540c\u65f6\u4e5f\u8be6\u7ec6\u8bf4\u660e\u5982\u4f55\u4f7f\u7528go-sdk\u63d0\u4f9b\u7684API\u5f00\u53d1\u63a5\u53e3\u4e0eTelChain\u8fdb\u884c\u4ea4\u4e92\uff0c\u662fgo\u5de5\u7a0b\u5e08\u5b66\u4e60TelChain\u5e94\u7528\u5f00\u53d1(DApp)\u7684\u4e0d\u4e8c\u9009\u62e9\u3002","title":"1.\u6a21\u5757\u7b80\u4ecb"},{"location":"%E6%A8%A1%E5%9D%97/#telchain","text":"TelChain\u662f\u5907\u53d7\u5173\u6ce8\u7684\u533a\u5757\u94fe\uff0c\u5b83\u57fa\u4e8e\u5bc6\u7801\u5b66\u6280\u672f\u548cP2P\u901a\u4fe1\u6280\u672f \u6784\u5efa\u4e86\u4e00\u4e2a\u53bb\u4e2d\u5fc3\u5316\u7684\u5e73\u53f0\uff0c\u6240\u6709\u7684\u4ea4\u6613\u540c\u6b65\u4fdd\u5b58\u5728\u6bcf\u4e2a\u8282\u70b9\u4e2d\uff0c \u901a\u8fc7\u5c06\u533a\u5757\u5355\u5411\u7ea7\u8054\u6210\u94fe\uff0cTelChain\u6709\u6548\u7684\u4fdd\u8bc1\u4e86\u4ea4\u6613\u7684\u4e0d\u53ef\u7be1\u6539\uff1a \u667a\u80fd\u5408\u7ea6\u5e73\u53f0 TelChain\u662f\u7b2c\u4e00\u4e2a\u5b9e\u73b0\u4e86\u865a\u62df\u673a\u7684\u533a\u5757\u94fe\uff0c\u56e0\u6b64\u4e3a\u667a\u80fd\u5408\u7ea6 - Smart Contract - \u7684\u8fd0\u884c\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u652f\u6301\u73af\u5883\u3002\u4e5f\u6b63\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0cTelChain\u88ab\u79f0\u4e3a\u533a\u5757\u94fe 2.0\uff0c\u4ee5\u533a\u522b\u4e8e\u6bd4\u7279\u5e01\u4ee3\u8868\u7684\u4ee5\u6570\u5b57\u52a0\u5bc6\u8d27\u5e01\u4e3a\u6838\u5fc3\u7279\u5f81\u7684\u533a\u5757\u94fe1.0\u3002 \u53ef\u4ee5\u5c06\u667a\u80fd\u5408\u7ea6\u7406\u89e3\u4e3a\u673a\u5668\u4e4b\u95f4\u7684\u5408\u540c\u7ea6\u5b9a\uff0c\u5728\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u65f6\u81ea\u52a8 \u6267\u884c\u7ea6\u5b9a\u597d\u7684\u903b\u8f91\uff0c\u4f8b\u5982\u5728\u4fdd\u9669\u7406\u8d54\u6d41\u7a0b\u4e2d\uff0c\u5982\u679c\u7406\u8d54\u6761\u4ef6\u6ee1\u8db3\u5c31\u81ea\u52a8 \u5c06\u8d54\u507f\u91d1\u91ca\u653e\u7ed9\u51fa\u9669\u4eba\uff0c\u8fd9\u4e2a\u6d41\u7a0b\u5c31\u53ef\u4ee5\u4f7f\u7528\u667a\u80fd\u5408\u7ea6\u6765\u5b9e\u73b0\u3002 \u6709\u591a\u79cd\u8bed\u8a00\u53ef\u4ee5\u5f00\u53d1TelChain\u667a\u80fd\u5408\u7ea6\uff0c\u4f46\u76ee\u524d\u6700\u5e38\u7528\u7684\u662f\u7c7b\u4f3c\u4e8eJavaScript\u7684 Solidity\u8bed\u8a00\u3002\u672c\u8bfe\u7a0b\u4e2d\u5c06\u91c7\u7528Solidity\u8bb2\u89e3\u667a\u80fd\u5408\u7ea6\u7684\u5f00\u53d1\u3002","title":"TelChain\u6982\u8ff0"},{"location":"%E6%A8%A1%E5%9D%97/#json-rpcgo-sdk","text":"\u5982\u679c\u6211\u4eec\u5e0c\u671b\u6784\u9020\u4e00\u4e2a\u53bb\u4e2d\u5fc3\u5316\u5e94\u7528\uff08DApp\uff09\uff0c\u9664\u4e86\u667a\u80fd\u5408\u7ea6\u7684\u5f00\u53d1\uff0c \u901a\u5e38\u8fd8\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u5f00\u53d1\u8bed\u8a00\u4e3a\u7528\u6237\u63d0\u4f9b\u64cd\u4f5c\u667a\u80fd\u5408\u7ea6\u7684\u7528\u6237\u63a5\u53e3\uff0c\u4f8b\u5982 \u5f00\u53d1\u4e00\u4e2a\u7f51\u9875\u3001\u4e00\u4e2a\u624b\u673aApp\u6216\u8005\u4e00\u4e2a\u684c\u9762\u5e94\u7528\u3002\u8fd9\u4e9b\u4ee3\u7801\u90fd\u9700\u8981\u4e0eTelChain\u8fdb\u884c\u4ea4\u4e92\u3002 TelChain\u89c4\u5b9a\u4e86\u6bcf\u4e2a\u8282\u70b9\u9700\u8981\u5b9e\u73b0\u7684JSON RPC API \u5e94\u7528\u5f00\u53d1\u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u662f\u4f20\u8f93\u65e0\u5173\u7684\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7HTTP\u3001websocket\u6216IPC\u7b49\u591a\u79cd \u901a\u4fe1\u673a\u5236\u6765\u4f7f\u7528\u8be5\u63a5\u53e3\u534f\u8bae\u64cd\u4f5cTelChain\u8282\u70b9\uff1a \u7406\u8bba\u4e0a\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u8bed\u8a00\u57fa\u4e8eJSON RPC\u63a5\u53e3\u5f00\u53d1\u51faTelChain\u4e4b\u4e0a\u7684 \u53bb\u4e2d\u5fc3\u5316\u5e94\u7528\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u63d0\u9ad8\u5f00\u53d1\u6548\u7387\uff0c\u66f4\u597d\u7684\u529e\u6cd5\u662f \u4f7f\u7528\u7279\u5b9a\u8bed\u8a00\u7684JSON RPC\u5c01\u88c5\u5e93\uff0c\u8fd9\u4e9b\u5e93\u5c01\u88c5\u4e86JSON RPC\u7684\u534f\u8bae\u7ec6\u8282\uff0c \u6709\u52a9\u4e8e\u5f00\u53d1\u4eba\u5458\u805a\u7126\u5728\u4e1a\u52a1\u903b\u8f91\u7684\u5b9e\u73b0\u4e0a\u3002 bifj \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u7528\u4e8e\u96c6\u6210TelChain\u529f\u80fd\u7684go\u5f00\u53d1\u5e93\uff0c\u5b83\u662fgo\u7248\u672c\u7684TelChainJSON RPC \u63a5\u53e3\u534f\u8bae\u5c01\u88c5\u5b9e\u73b0\uff0c\u5982\u679c\u9700\u8981\u5c06\u4f60\u7684go\u5e94\u7528\u63a5\u5165TelChain\uff0c\u7528go-sdk\u5c31\u5bf9\u4e86\u3002","title":"JSON RPC\u4e0ego-sdk"},{"location":"%E6%A8%A1%E5%9D%97/#go-sdk","text":"go-sdk\u7684\u529f\u80fd\u7ec4\u7ec7\u5728\u4e0d\u540c\u7684\u5305\u4e2d\uff0c\u4e0b\u56fe\u5c55\u793a\u4e86 org.bifj \u4e3b\u8981\u5305\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\uff1a core \uff1aJSON RPC\u534f\u8bae\u7684\u5c01\u88c5\u4e3b\u8981\u7531\u5305 org.gbif.core \u5b9e\u73b0\uff0c\u5b83\u4f9d\u8d56\u4e8e org.gbif.crypto \u5305\u63d0\u4f9b\u7684\u5bc6\u94a5\u4e0e\u7b7e\u540d\u76f8\u5173\u7684\u529f\u80fd\uff0c\u4ee5\u53ca org.gbif.abi \u5305\u63d0\u4f9b\u7684java/solidity\u7c7b\u578b\u6620\u5c04\u652f\u6301\u3002 console \uff1a org.gbif.console \u5305\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5355\u72ec\u8fd0\u884c\u7684\u547d\u4ee4\u884c\u7a0b\u5e8fgo-sdk\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u6765 \u751f\u6210solidity\u5408\u7ea6\u7684go\u5c01\u88c5\u7c7b\uff0c\u5176\u4e2d\uff0c org.gbif.codegen \u5305\u5b9e\u73b0\u4e86\u4eceabi\u5230go\u5c01\u88c5\u7c7b\u7684\u4ee3\u7801\u751f\u6210\u3002 \u8282\u70b9\u76f8\u5173 \uff1a org.gbif.infura \u5305\u5c01\u88c5\u4e86\u5bf9Infura\u516c\u5171\u8282\u70b9\u65f3http\u8bbf\u95ee\u670d\u52a1\u63a5\u53e3\uff0c org.gbif.geth \u548c org.gbif.parity \u5219\u5206\u522b\u5c01\u88c5\u4e86\u8fd9\u4e24\u79cd\u5e38\u7528TelChain\u8282\u70b9\u8f6f\u4ef6\u65f3\u7ba1\u7406\u63a5\u53e3\u3002 \u672c\u8bfe\u7a0b\u7684\u76ee\u7684\u662f\u5e2e\u52a9go\u5de5\u7a0b\u5e08\u5feb\u901f\u638c\u63e1\u4f7f\u7528go-sdk\u5f00\u53d1TelChain\u5e94\u7528\u7684\u6280\u80fd\uff0c\u56e0\u6b64 \u4e3b\u8981\u4ee5go-sdk\u7684\u5f00\u53d1\u63a5\u53e3\u4e3a\u4e3b\u7ebf\u6765\u5c55\u5f00\u8bfe\u7a0b\u5185\u5bb9\uff0c\u540c\u65f6\u7a7f\u63d2\u8bb2\u89e3TelChain\u7684\u4e00\u4e9b\u57fa\u672c \u6982\u5ff5\uff0c\u4f8b\u5982\uff1a\u8d26\u6237\u3001\u4ea4\u6613\u548c\u667a\u80fd\u5408\u7ea6\u7684\u5f00\u53d1\u7b49\u3002","title":"go-sdk\u4f53\u7cfb\u6982\u8ff0"},{"location":"%E6%A8%A1%E5%9D%97/#_2","text":"1.hello,bifj \u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684java\u5e94\u7528\u7684\u5f00\u53d1\u6765\u8bb2\u89e3\u4f7f\u7528java-sdk\u8fdb\u884cTelChain\u5e94\u7528\u5f00\u53d1\u7684\u6700\u7b80\u6d41\u7a0b\uff0c\u901a\u8fc7\u8fd9\u4e00\u90e8\u5206\u7684\u5b66\u4e60\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728\u81ea\u5df1\u7684java\u5e94\u7528\u4e2d\u5f15\u5165TelChain\u652f\u6301\u4e86\u3002 2.\u8d26\u6237\u7ba1\u7406 \u5c06\u8be6\u7ec6\u4ecb\u7ecdjava-sdk\u63d0\u4f9b\u7684\u8d26\u6237\u7ba1\u7406\u63a5\u53e3\u3002\u5982\u679c\u4f60\u5bf9\u5f00\u53d1\u94b1\u5305\u5e94\u7528\uff08\u4e2d\u5fc3\u5316/\u53bb\u4e2d\u5fc3\u5316\uff09\u611f\u5174\u8da3\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4f1a\u6709\u5f88\u5927\u7684\u5e2e\u52a9\u3002java-sdk\u521b\u5efa\u8d26\u6237\uff0c\u521b\u5efa\u94b1\u5305\uff0c\u8f6c\u8d26\u7279\u522b\u662f\u4ee3\u5e01\u8f6c\u8d26\u7b49\u4e30\u5bcc\u7684\u8fdb\u884c\u4ea4\u6613\u7684\u529f\u80fd\u3002 3.\u72b6\u6001\u4e0e\u4ea4\u6613 \u4e3b\u8981\u8bb2\u89e3java-sdk\u63d0\u4f9b\u7684\u4ea4\u6613\u64cd\u4f5c\u63a5\u53e3\uff0c\u540c\u65f6\u4e5f\u4ecb\u7ecd\u4e00\u4e9b\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u4f8b\u5982\u72b6\u6001\u3001\u88f8\u4ea4\u6613\u3001gas\u7b49\u3002\u8fd9\u90e8\u5206\u5185\u5bb9\u5c06\u5e2e\u52a9\u4f60\u7406\u6e05java\u5e94\u7528\u4e0eTelChain\u4ea4\u4e92\u7684\u5927\u591a\u6570\u95ee\u9898\u3002 4.\u667a\u80fd\u5408\u7ea6 \u5c06\u901a\u8fc7\u4e00\u4e2a\u6295\u7968\u5408\u7ea6\u7684\u5f00\u53d1\u3001\u7f16\u8bd1\u3001\u4ee3\u7801\u751f\u6210\u3001\u90e8\u7f72\u4e0e\u4ea4\u4e92\u7684\u5b8c\u6574\u6d41\u7a0b\uff0c\u8bb2\u89e3\u4f7f\u7528java-sdk\u64cd\u4f5csolitiy\u667a\u80fd\u5408\u7ea6\u7684\u65b9\u6cd5\u3002 5.\u8fc7\u6ee4\u5668\u4e0e\u4e8b\u4ef6 \u4e3b\u8981\u8bb2\u89e3TelChain\u7684\u901a\u77e5\u673a\u5236\u548cjava-sdk\u7684\u54cd\u5e94\u5f0f\u5c01\u88c5\u63a5\u53e3\u3002","title":"\u8bfe\u7a0b\u5185\u5bb9\u6982\u8ff0"}]}